
Laba6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a90  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  08004c20  08004c20  00014c20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004d20  08004d20  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08004d20  08004d20  00014d20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004d28  08004d28  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004d28  08004d28  00014d28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004d2c  08004d2c  00014d2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08004d30  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          000000f8  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000016c  2000016c  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d922  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001ce2  00000000  00000000  0002d9c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000009e8  00000000  00000000  0002f6a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000968  00000000  00000000  00030090  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020a80  00000000  00000000  000309f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d081  00000000  00000000  00051478  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c4e84  00000000  00000000  0005e4f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0012337d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002dd8  00000000  00000000  001233d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004c08 	.word	0x08004c08

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08004c08 	.word	0x08004c08

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2uiz>:
 8000a1c:	004a      	lsls	r2, r1, #1
 8000a1e:	d211      	bcs.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a24:	d211      	bcs.n	8000a4a <__aeabi_d2uiz+0x2e>
 8000a26:	d50d      	bpl.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a30:	d40e      	bmi.n	8000a50 <__aeabi_d2uiz+0x34>
 8000a32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a3e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a42:	4770      	bx	lr
 8000a44:	f04f 0000 	mov.w	r0, #0
 8000a48:	4770      	bx	lr
 8000a4a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a4e:	d102      	bne.n	8000a56 <__aeabi_d2uiz+0x3a>
 8000a50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a54:	4770      	bx	lr
 8000a56:	f04f 0000 	mov.w	r0, #0
 8000a5a:	4770      	bx	lr

08000a5c <__aeabi_uldivmod>:
 8000a5c:	b953      	cbnz	r3, 8000a74 <__aeabi_uldivmod+0x18>
 8000a5e:	b94a      	cbnz	r2, 8000a74 <__aeabi_uldivmod+0x18>
 8000a60:	2900      	cmp	r1, #0
 8000a62:	bf08      	it	eq
 8000a64:	2800      	cmpeq	r0, #0
 8000a66:	bf1c      	itt	ne
 8000a68:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000a6c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000a70:	f000 b96e 	b.w	8000d50 <__aeabi_idiv0>
 8000a74:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a78:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a7c:	f000 f806 	bl	8000a8c <__udivmoddi4>
 8000a80:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a88:	b004      	add	sp, #16
 8000a8a:	4770      	bx	lr

08000a8c <__udivmoddi4>:
 8000a8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a90:	9d08      	ldr	r5, [sp, #32]
 8000a92:	4604      	mov	r4, r0
 8000a94:	468c      	mov	ip, r1
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	f040 8083 	bne.w	8000ba2 <__udivmoddi4+0x116>
 8000a9c:	428a      	cmp	r2, r1
 8000a9e:	4617      	mov	r7, r2
 8000aa0:	d947      	bls.n	8000b32 <__udivmoddi4+0xa6>
 8000aa2:	fab2 f282 	clz	r2, r2
 8000aa6:	b142      	cbz	r2, 8000aba <__udivmoddi4+0x2e>
 8000aa8:	f1c2 0020 	rsb	r0, r2, #32
 8000aac:	fa24 f000 	lsr.w	r0, r4, r0
 8000ab0:	4091      	lsls	r1, r2
 8000ab2:	4097      	lsls	r7, r2
 8000ab4:	ea40 0c01 	orr.w	ip, r0, r1
 8000ab8:	4094      	lsls	r4, r2
 8000aba:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000abe:	0c23      	lsrs	r3, r4, #16
 8000ac0:	fbbc f6f8 	udiv	r6, ip, r8
 8000ac4:	fa1f fe87 	uxth.w	lr, r7
 8000ac8:	fb08 c116 	mls	r1, r8, r6, ip
 8000acc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ad0:	fb06 f10e 	mul.w	r1, r6, lr
 8000ad4:	4299      	cmp	r1, r3
 8000ad6:	d909      	bls.n	8000aec <__udivmoddi4+0x60>
 8000ad8:	18fb      	adds	r3, r7, r3
 8000ada:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000ade:	f080 8119 	bcs.w	8000d14 <__udivmoddi4+0x288>
 8000ae2:	4299      	cmp	r1, r3
 8000ae4:	f240 8116 	bls.w	8000d14 <__udivmoddi4+0x288>
 8000ae8:	3e02      	subs	r6, #2
 8000aea:	443b      	add	r3, r7
 8000aec:	1a5b      	subs	r3, r3, r1
 8000aee:	b2a4      	uxth	r4, r4
 8000af0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000af4:	fb08 3310 	mls	r3, r8, r0, r3
 8000af8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000afc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000b00:	45a6      	cmp	lr, r4
 8000b02:	d909      	bls.n	8000b18 <__udivmoddi4+0x8c>
 8000b04:	193c      	adds	r4, r7, r4
 8000b06:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000b0a:	f080 8105 	bcs.w	8000d18 <__udivmoddi4+0x28c>
 8000b0e:	45a6      	cmp	lr, r4
 8000b10:	f240 8102 	bls.w	8000d18 <__udivmoddi4+0x28c>
 8000b14:	3802      	subs	r0, #2
 8000b16:	443c      	add	r4, r7
 8000b18:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b1c:	eba4 040e 	sub.w	r4, r4, lr
 8000b20:	2600      	movs	r6, #0
 8000b22:	b11d      	cbz	r5, 8000b2c <__udivmoddi4+0xa0>
 8000b24:	40d4      	lsrs	r4, r2
 8000b26:	2300      	movs	r3, #0
 8000b28:	e9c5 4300 	strd	r4, r3, [r5]
 8000b2c:	4631      	mov	r1, r6
 8000b2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b32:	b902      	cbnz	r2, 8000b36 <__udivmoddi4+0xaa>
 8000b34:	deff      	udf	#255	; 0xff
 8000b36:	fab2 f282 	clz	r2, r2
 8000b3a:	2a00      	cmp	r2, #0
 8000b3c:	d150      	bne.n	8000be0 <__udivmoddi4+0x154>
 8000b3e:	1bcb      	subs	r3, r1, r7
 8000b40:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b44:	fa1f f887 	uxth.w	r8, r7
 8000b48:	2601      	movs	r6, #1
 8000b4a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000b4e:	0c21      	lsrs	r1, r4, #16
 8000b50:	fb0e 331c 	mls	r3, lr, ip, r3
 8000b54:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b58:	fb08 f30c 	mul.w	r3, r8, ip
 8000b5c:	428b      	cmp	r3, r1
 8000b5e:	d907      	bls.n	8000b70 <__udivmoddi4+0xe4>
 8000b60:	1879      	adds	r1, r7, r1
 8000b62:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000b66:	d202      	bcs.n	8000b6e <__udivmoddi4+0xe2>
 8000b68:	428b      	cmp	r3, r1
 8000b6a:	f200 80e9 	bhi.w	8000d40 <__udivmoddi4+0x2b4>
 8000b6e:	4684      	mov	ip, r0
 8000b70:	1ac9      	subs	r1, r1, r3
 8000b72:	b2a3      	uxth	r3, r4
 8000b74:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b78:	fb0e 1110 	mls	r1, lr, r0, r1
 8000b7c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000b80:	fb08 f800 	mul.w	r8, r8, r0
 8000b84:	45a0      	cmp	r8, r4
 8000b86:	d907      	bls.n	8000b98 <__udivmoddi4+0x10c>
 8000b88:	193c      	adds	r4, r7, r4
 8000b8a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000b8e:	d202      	bcs.n	8000b96 <__udivmoddi4+0x10a>
 8000b90:	45a0      	cmp	r8, r4
 8000b92:	f200 80d9 	bhi.w	8000d48 <__udivmoddi4+0x2bc>
 8000b96:	4618      	mov	r0, r3
 8000b98:	eba4 0408 	sub.w	r4, r4, r8
 8000b9c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ba0:	e7bf      	b.n	8000b22 <__udivmoddi4+0x96>
 8000ba2:	428b      	cmp	r3, r1
 8000ba4:	d909      	bls.n	8000bba <__udivmoddi4+0x12e>
 8000ba6:	2d00      	cmp	r5, #0
 8000ba8:	f000 80b1 	beq.w	8000d0e <__udivmoddi4+0x282>
 8000bac:	2600      	movs	r6, #0
 8000bae:	e9c5 0100 	strd	r0, r1, [r5]
 8000bb2:	4630      	mov	r0, r6
 8000bb4:	4631      	mov	r1, r6
 8000bb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bba:	fab3 f683 	clz	r6, r3
 8000bbe:	2e00      	cmp	r6, #0
 8000bc0:	d14a      	bne.n	8000c58 <__udivmoddi4+0x1cc>
 8000bc2:	428b      	cmp	r3, r1
 8000bc4:	d302      	bcc.n	8000bcc <__udivmoddi4+0x140>
 8000bc6:	4282      	cmp	r2, r0
 8000bc8:	f200 80b8 	bhi.w	8000d3c <__udivmoddi4+0x2b0>
 8000bcc:	1a84      	subs	r4, r0, r2
 8000bce:	eb61 0103 	sbc.w	r1, r1, r3
 8000bd2:	2001      	movs	r0, #1
 8000bd4:	468c      	mov	ip, r1
 8000bd6:	2d00      	cmp	r5, #0
 8000bd8:	d0a8      	beq.n	8000b2c <__udivmoddi4+0xa0>
 8000bda:	e9c5 4c00 	strd	r4, ip, [r5]
 8000bde:	e7a5      	b.n	8000b2c <__udivmoddi4+0xa0>
 8000be0:	f1c2 0320 	rsb	r3, r2, #32
 8000be4:	fa20 f603 	lsr.w	r6, r0, r3
 8000be8:	4097      	lsls	r7, r2
 8000bea:	fa01 f002 	lsl.w	r0, r1, r2
 8000bee:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000bf2:	40d9      	lsrs	r1, r3
 8000bf4:	4330      	orrs	r0, r6
 8000bf6:	0c03      	lsrs	r3, r0, #16
 8000bf8:	fbb1 f6fe 	udiv	r6, r1, lr
 8000bfc:	fa1f f887 	uxth.w	r8, r7
 8000c00:	fb0e 1116 	mls	r1, lr, r6, r1
 8000c04:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c08:	fb06 f108 	mul.w	r1, r6, r8
 8000c0c:	4299      	cmp	r1, r3
 8000c0e:	fa04 f402 	lsl.w	r4, r4, r2
 8000c12:	d909      	bls.n	8000c28 <__udivmoddi4+0x19c>
 8000c14:	18fb      	adds	r3, r7, r3
 8000c16:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000c1a:	f080 808d 	bcs.w	8000d38 <__udivmoddi4+0x2ac>
 8000c1e:	4299      	cmp	r1, r3
 8000c20:	f240 808a 	bls.w	8000d38 <__udivmoddi4+0x2ac>
 8000c24:	3e02      	subs	r6, #2
 8000c26:	443b      	add	r3, r7
 8000c28:	1a5b      	subs	r3, r3, r1
 8000c2a:	b281      	uxth	r1, r0
 8000c2c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c30:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c34:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c38:	fb00 f308 	mul.w	r3, r0, r8
 8000c3c:	428b      	cmp	r3, r1
 8000c3e:	d907      	bls.n	8000c50 <__udivmoddi4+0x1c4>
 8000c40:	1879      	adds	r1, r7, r1
 8000c42:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000c46:	d273      	bcs.n	8000d30 <__udivmoddi4+0x2a4>
 8000c48:	428b      	cmp	r3, r1
 8000c4a:	d971      	bls.n	8000d30 <__udivmoddi4+0x2a4>
 8000c4c:	3802      	subs	r0, #2
 8000c4e:	4439      	add	r1, r7
 8000c50:	1acb      	subs	r3, r1, r3
 8000c52:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000c56:	e778      	b.n	8000b4a <__udivmoddi4+0xbe>
 8000c58:	f1c6 0c20 	rsb	ip, r6, #32
 8000c5c:	fa03 f406 	lsl.w	r4, r3, r6
 8000c60:	fa22 f30c 	lsr.w	r3, r2, ip
 8000c64:	431c      	orrs	r4, r3
 8000c66:	fa20 f70c 	lsr.w	r7, r0, ip
 8000c6a:	fa01 f306 	lsl.w	r3, r1, r6
 8000c6e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000c72:	fa21 f10c 	lsr.w	r1, r1, ip
 8000c76:	431f      	orrs	r7, r3
 8000c78:	0c3b      	lsrs	r3, r7, #16
 8000c7a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000c7e:	fa1f f884 	uxth.w	r8, r4
 8000c82:	fb0e 1119 	mls	r1, lr, r9, r1
 8000c86:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000c8a:	fb09 fa08 	mul.w	sl, r9, r8
 8000c8e:	458a      	cmp	sl, r1
 8000c90:	fa02 f206 	lsl.w	r2, r2, r6
 8000c94:	fa00 f306 	lsl.w	r3, r0, r6
 8000c98:	d908      	bls.n	8000cac <__udivmoddi4+0x220>
 8000c9a:	1861      	adds	r1, r4, r1
 8000c9c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000ca0:	d248      	bcs.n	8000d34 <__udivmoddi4+0x2a8>
 8000ca2:	458a      	cmp	sl, r1
 8000ca4:	d946      	bls.n	8000d34 <__udivmoddi4+0x2a8>
 8000ca6:	f1a9 0902 	sub.w	r9, r9, #2
 8000caa:	4421      	add	r1, r4
 8000cac:	eba1 010a 	sub.w	r1, r1, sl
 8000cb0:	b2bf      	uxth	r7, r7
 8000cb2:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cb6:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cba:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000cbe:	fb00 f808 	mul.w	r8, r0, r8
 8000cc2:	45b8      	cmp	r8, r7
 8000cc4:	d907      	bls.n	8000cd6 <__udivmoddi4+0x24a>
 8000cc6:	19e7      	adds	r7, r4, r7
 8000cc8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000ccc:	d22e      	bcs.n	8000d2c <__udivmoddi4+0x2a0>
 8000cce:	45b8      	cmp	r8, r7
 8000cd0:	d92c      	bls.n	8000d2c <__udivmoddi4+0x2a0>
 8000cd2:	3802      	subs	r0, #2
 8000cd4:	4427      	add	r7, r4
 8000cd6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000cda:	eba7 0708 	sub.w	r7, r7, r8
 8000cde:	fba0 8902 	umull	r8, r9, r0, r2
 8000ce2:	454f      	cmp	r7, r9
 8000ce4:	46c6      	mov	lr, r8
 8000ce6:	4649      	mov	r1, r9
 8000ce8:	d31a      	bcc.n	8000d20 <__udivmoddi4+0x294>
 8000cea:	d017      	beq.n	8000d1c <__udivmoddi4+0x290>
 8000cec:	b15d      	cbz	r5, 8000d06 <__udivmoddi4+0x27a>
 8000cee:	ebb3 020e 	subs.w	r2, r3, lr
 8000cf2:	eb67 0701 	sbc.w	r7, r7, r1
 8000cf6:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000cfa:	40f2      	lsrs	r2, r6
 8000cfc:	ea4c 0202 	orr.w	r2, ip, r2
 8000d00:	40f7      	lsrs	r7, r6
 8000d02:	e9c5 2700 	strd	r2, r7, [r5]
 8000d06:	2600      	movs	r6, #0
 8000d08:	4631      	mov	r1, r6
 8000d0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d0e:	462e      	mov	r6, r5
 8000d10:	4628      	mov	r0, r5
 8000d12:	e70b      	b.n	8000b2c <__udivmoddi4+0xa0>
 8000d14:	4606      	mov	r6, r0
 8000d16:	e6e9      	b.n	8000aec <__udivmoddi4+0x60>
 8000d18:	4618      	mov	r0, r3
 8000d1a:	e6fd      	b.n	8000b18 <__udivmoddi4+0x8c>
 8000d1c:	4543      	cmp	r3, r8
 8000d1e:	d2e5      	bcs.n	8000cec <__udivmoddi4+0x260>
 8000d20:	ebb8 0e02 	subs.w	lr, r8, r2
 8000d24:	eb69 0104 	sbc.w	r1, r9, r4
 8000d28:	3801      	subs	r0, #1
 8000d2a:	e7df      	b.n	8000cec <__udivmoddi4+0x260>
 8000d2c:	4608      	mov	r0, r1
 8000d2e:	e7d2      	b.n	8000cd6 <__udivmoddi4+0x24a>
 8000d30:	4660      	mov	r0, ip
 8000d32:	e78d      	b.n	8000c50 <__udivmoddi4+0x1c4>
 8000d34:	4681      	mov	r9, r0
 8000d36:	e7b9      	b.n	8000cac <__udivmoddi4+0x220>
 8000d38:	4666      	mov	r6, ip
 8000d3a:	e775      	b.n	8000c28 <__udivmoddi4+0x19c>
 8000d3c:	4630      	mov	r0, r6
 8000d3e:	e74a      	b.n	8000bd6 <__udivmoddi4+0x14a>
 8000d40:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d44:	4439      	add	r1, r7
 8000d46:	e713      	b.n	8000b70 <__udivmoddi4+0xe4>
 8000d48:	3802      	subs	r0, #2
 8000d4a:	443c      	add	r4, r7
 8000d4c:	e724      	b.n	8000b98 <__udivmoddi4+0x10c>
 8000d4e:	bf00      	nop

08000d50 <__aeabi_idiv0>:
 8000d50:	4770      	bx	lr
 8000d52:	bf00      	nop
 8000d54:	0000      	movs	r0, r0
	...

08000d58 <set_PWM_freq>:
 */

#include "PWM_I2C.h"

void set_PWM_freq(uint16_t freq)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b08a      	sub	sp, #40	; 0x28
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	4603      	mov	r3, r0
 8000d60:	80fb      	strh	r3, [r7, #6]
	sleep_mode_on();
 8000d62:	f000 f8dd 	bl	8000f20 <sleep_mode_on>
	uint8_t psc = round((double)INT_FREQUENCY/(MAX_VALUE * freq)) - 1;
 8000d66:	88fb      	ldrh	r3, [r7, #6]
 8000d68:	031b      	lsls	r3, r3, #12
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	f7ff fbda 	bl	8000524 <__aeabi_i2d>
 8000d70:	4602      	mov	r2, r0
 8000d72:	460b      	mov	r3, r1
 8000d74:	a123      	add	r1, pc, #140	; (adr r1, 8000e04 <set_PWM_freq+0xac>)
 8000d76:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000d7a:	f7ff fd67 	bl	800084c <__aeabi_ddiv>
 8000d7e:	4602      	mov	r2, r0
 8000d80:	460b      	mov	r3, r1
 8000d82:	ec43 2b17 	vmov	d7, r2, r3
 8000d86:	eeb0 0a47 	vmov.f32	s0, s14
 8000d8a:	eef0 0a67 	vmov.f32	s1, s15
 8000d8e:	f003 fef5 	bl	8004b7c <round>
 8000d92:	ec51 0b10 	vmov	r0, r1, d0
 8000d96:	f04f 0200 	mov.w	r2, #0
 8000d9a:	4b17      	ldr	r3, [pc, #92]	; (8000df8 <set_PWM_freq+0xa0>)
 8000d9c:	f7ff fa74 	bl	8000288 <__aeabi_dsub>
 8000da0:	4602      	mov	r2, r0
 8000da2:	460b      	mov	r3, r1
 8000da4:	4610      	mov	r0, r2
 8000da6:	4619      	mov	r1, r3
 8000da8:	f7ff fe38 	bl	8000a1c <__aeabi_d2uiz>
 8000dac:	4603      	mov	r3, r0
 8000dae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	send_I2C_data(psc, 0xFE);
 8000db2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000db6:	21fe      	movs	r1, #254	; 0xfe
 8000db8:	4618      	mov	r0, r3
 8000dba:	f000 f895 	bl	8000ee8 <send_I2C_data>
	uint8_t message[25];
	sprintf((char*)message, "Set frequency: %d\r\n", freq);
 8000dbe:	88fa      	ldrh	r2, [r7, #6]
 8000dc0:	f107 030c 	add.w	r3, r7, #12
 8000dc4:	490d      	ldr	r1, [pc, #52]	; (8000dfc <set_PWM_freq+0xa4>)
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f003 faaa 	bl	8004320 <siprintf>
	HAL_UART_Transmit(&huart3, &message, strlen((char*)message), 50);
 8000dcc:	f107 030c 	add.w	r3, r7, #12
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f7ff f9fd 	bl	80001d0 <strlen>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	b29a      	uxth	r2, r3
 8000dda:	f107 010c 	add.w	r1, r7, #12
 8000dde:	2332      	movs	r3, #50	; 0x32
 8000de0:	4807      	ldr	r0, [pc, #28]	; (8000e00 <set_PWM_freq+0xa8>)
 8000de2:	f002 fa4e 	bl	8003282 <HAL_UART_Transmit>
	sleep_mode_off();
 8000de6:	f000 f8ad 	bl	8000f44 <sleep_mode_off>
}
 8000dea:	bf00      	nop
 8000dec:	3728      	adds	r7, #40	; 0x28
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	f3af 8000 	nop.w
 8000df8:	3ff00000 	.word	0x3ff00000
 8000dfc:	08004c20 	.word	0x08004c20
 8000e00:	200000ac 	.word	0x200000ac
 8000e04:	00000000 	.word	0x00000000
 8000e08:	4177d784 	.word	0x4177d784

08000e0c <set_PWM_duty>:

void set_PWM_duty(uint8_t duty, uint8_t led)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b08a      	sub	sp, #40	; 0x28
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	4603      	mov	r3, r0
 8000e14:	460a      	mov	r2, r1
 8000e16:	71fb      	strb	r3, [r7, #7]
 8000e18:	4613      	mov	r3, r2
 8000e1a:	71bb      	strb	r3, [r7, #6]
	if((duty > 100) && (duty < 0) && (led < 0) && (led > 15))
	{
		return;
	}
	uint8_t led_controls[NUM_REG_BY_CHANNEL];
	uint16_t led_off = ((float)duty * MAX_VALUE / 100) - 1;
 8000e1c:	79fb      	ldrb	r3, [r7, #7]
 8000e1e:	ee07 3a90 	vmov	s15, r3
 8000e22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000e26:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8000ed8 <set_PWM_duty+0xcc>
 8000e2a:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000e2e:	eddf 6a2b 	vldr	s13, [pc, #172]	; 8000edc <set_PWM_duty+0xd0>
 8000e32:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000e36:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000e3a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000e3e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000e42:	ee17 3a90 	vmov	r3, s15
 8000e46:	84bb      	strh	r3, [r7, #36]	; 0x24
	led_controls[0] = 0x00;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	f887 3020 	strb.w	r3, [r7, #32]
	led_controls[1] = 0x00;	//because i don't use delay time before led on, and change duty only by led off
 8000e4e:	2300      	movs	r3, #0
 8000e50:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	led_controls[3] = led_off / 256;	//take 3rd digit with the led_off, because we have 12-bit PWM, but we have two 8-bit register for this
 8000e54:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000e56:	0a1b      	lsrs	r3, r3, #8
 8000e58:	b29b      	uxth	r3, r3
 8000e5a:	b2db      	uxtb	r3, r3
 8000e5c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	led_controls[2] = led_off - (led_controls[3] * 256);	//take 1st and 2nd digit with the led_off, for LEDx_OFF_L
 8000e60:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000e62:	b2db      	uxtb	r3, r3
 8000e64:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	for(uint8_t i = 0; i < NUM_REG_BY_CHANNEL; i++)
 8000e68:	2300      	movs	r3, #0
 8000e6a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000e6e:	e017      	b.n	8000ea0 <set_PWM_duty+0x94>
		send_I2C_data(led_controls[i], NUM2ADR(led) + i);
 8000e70:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000e74:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000e78:	4413      	add	r3, r2
 8000e7a:	f813 0c08 	ldrb.w	r0, [r3, #-8]
 8000e7e:	79bb      	ldrb	r3, [r7, #6]
 8000e80:	009b      	lsls	r3, r3, #2
 8000e82:	b2da      	uxtb	r2, r3
 8000e84:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000e88:	4413      	add	r3, r2
 8000e8a:	b2db      	uxtb	r3, r3
 8000e8c:	3306      	adds	r3, #6
 8000e8e:	b2db      	uxtb	r3, r3
 8000e90:	4619      	mov	r1, r3
 8000e92:	f000 f829 	bl	8000ee8 <send_I2C_data>
	for(uint8_t i = 0; i < NUM_REG_BY_CHANNEL; i++)
 8000e96:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000e9a:	3301      	adds	r3, #1
 8000e9c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000ea0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000ea4:	2b03      	cmp	r3, #3
 8000ea6:	d9e3      	bls.n	8000e70 <set_PWM_duty+0x64>
	uint8_t message[24];
	sprintf((char*)message, "Set Duty on LED%d: %d%%\r\n",led + 1, duty);
 8000ea8:	79bb      	ldrb	r3, [r7, #6]
 8000eaa:	1c5a      	adds	r2, r3, #1
 8000eac:	79fb      	ldrb	r3, [r7, #7]
 8000eae:	f107 0008 	add.w	r0, r7, #8
 8000eb2:	490b      	ldr	r1, [pc, #44]	; (8000ee0 <set_PWM_duty+0xd4>)
 8000eb4:	f003 fa34 	bl	8004320 <siprintf>
	HAL_UART_Transmit(&huart3, &message, strlen((char*)message), 50);
 8000eb8:	f107 0308 	add.w	r3, r7, #8
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f7ff f987 	bl	80001d0 <strlen>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	b29a      	uxth	r2, r3
 8000ec6:	f107 0108 	add.w	r1, r7, #8
 8000eca:	2332      	movs	r3, #50	; 0x32
 8000ecc:	4805      	ldr	r0, [pc, #20]	; (8000ee4 <set_PWM_duty+0xd8>)
 8000ece:	f002 f9d8 	bl	8003282 <HAL_UART_Transmit>
}
 8000ed2:	3728      	adds	r7, #40	; 0x28
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	45800000 	.word	0x45800000
 8000edc:	42c80000 	.word	0x42c80000
 8000ee0:	08004c34 	.word	0x08004c34
 8000ee4:	200000ac 	.word	0x200000ac

08000ee8 <send_I2C_data>:

void send_I2C_data(uint8_t data, uint8_t adr)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b086      	sub	sp, #24
 8000eec:	af02      	add	r7, sp, #8
 8000eee:	4603      	mov	r3, r0
 8000ef0:	460a      	mov	r2, r1
 8000ef2:	71fb      	strb	r3, [r7, #7]
 8000ef4:	4613      	mov	r3, r2
 8000ef6:	71bb      	strb	r3, [r7, #6]
	uint8_t Buffer[2];
	Buffer[0] = adr;
 8000ef8:	79bb      	ldrb	r3, [r7, #6]
 8000efa:	733b      	strb	r3, [r7, #12]
	Buffer[1] = data;
 8000efc:	79fb      	ldrb	r3, [r7, #7]
 8000efe:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, ADR, (uint8_t*)&Buffer, 2, 100);
 8000f00:	f107 020c 	add.w	r2, r7, #12
 8000f04:	2364      	movs	r3, #100	; 0x64
 8000f06:	9300      	str	r3, [sp, #0]
 8000f08:	2302      	movs	r3, #2
 8000f0a:	2180      	movs	r1, #128	; 0x80
 8000f0c:	4803      	ldr	r0, [pc, #12]	; (8000f1c <send_I2C_data+0x34>)
 8000f0e:	f001 f9ef 	bl	80022f0 <HAL_I2C_Master_Transmit>
}
 8000f12:	bf00      	nop
 8000f14:	3710      	adds	r7, #16
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	200000f0 	.word	0x200000f0

08000f20 <sleep_mode_on>:

void sleep_mode_on(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	af00      	add	r7, sp, #0
	send_I2C_data(0b00010000, 0x00);
 8000f24:	2100      	movs	r1, #0
 8000f26:	2010      	movs	r0, #16
 8000f28:	f7ff ffde 	bl	8000ee8 <send_I2C_data>
	HAL_UART_Transmit(&huart3, "Sleep mode ON\r\n", 15, 50);
 8000f2c:	2332      	movs	r3, #50	; 0x32
 8000f2e:	220f      	movs	r2, #15
 8000f30:	4902      	ldr	r1, [pc, #8]	; (8000f3c <sleep_mode_on+0x1c>)
 8000f32:	4803      	ldr	r0, [pc, #12]	; (8000f40 <sleep_mode_on+0x20>)
 8000f34:	f002 f9a5 	bl	8003282 <HAL_UART_Transmit>
}
 8000f38:	bf00      	nop
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	08004c50 	.word	0x08004c50
 8000f40:	200000ac 	.word	0x200000ac

08000f44 <sleep_mode_off>:

void sleep_mode_off(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
	send_I2C_data(0b00000000, 0x00);
 8000f48:	2100      	movs	r1, #0
 8000f4a:	2000      	movs	r0, #0
 8000f4c:	f7ff ffcc 	bl	8000ee8 <send_I2C_data>
	HAL_UART_Transmit(&huart3, "Sleep mode OFF\r\n", 16, 50);
 8000f50:	2332      	movs	r3, #50	; 0x32
 8000f52:	2210      	movs	r2, #16
 8000f54:	4902      	ldr	r1, [pc, #8]	; (8000f60 <sleep_mode_off+0x1c>)
 8000f56:	4803      	ldr	r0, [pc, #12]	; (8000f64 <sleep_mode_off+0x20>)
 8000f58:	f002 f993 	bl	8003282 <HAL_UART_Transmit>
}
 8000f5c:	bf00      	nop
 8000f5e:	bd80      	pop	{r7, pc}
 8000f60:	08004c60 	.word	0x08004c60
 8000f64:	200000ac 	.word	0x200000ac

08000f68 <state_all_PWM_channels>:

void state_all_PWM_channels(_Bool state)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b082      	sub	sp, #8
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	4603      	mov	r3, r0
 8000f70:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(PWM_EN_GPIO_Port, PWM_EN_Pin, !state);
 8000f72:	79fb      	ldrb	r3, [r7, #7]
 8000f74:	f083 0301 	eor.w	r3, r3, #1
 8000f78:	b2db      	uxtb	r3, r3
 8000f7a:	461a      	mov	r2, r3
 8000f7c:	2180      	movs	r1, #128	; 0x80
 8000f7e:	480b      	ldr	r0, [pc, #44]	; (8000fac <state_all_PWM_channels+0x44>)
 8000f80:	f001 f858 	bl	8002034 <HAL_GPIO_WritePin>
	if (state)
 8000f84:	79fb      	ldrb	r3, [r7, #7]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d006      	beq.n	8000f98 <state_all_PWM_channels+0x30>
		HAL_UART_Transmit(&huart3, "All channels ENABLE\r\n", 21, 50);
 8000f8a:	2332      	movs	r3, #50	; 0x32
 8000f8c:	2215      	movs	r2, #21
 8000f8e:	4908      	ldr	r1, [pc, #32]	; (8000fb0 <state_all_PWM_channels+0x48>)
 8000f90:	4808      	ldr	r0, [pc, #32]	; (8000fb4 <state_all_PWM_channels+0x4c>)
 8000f92:	f002 f976 	bl	8003282 <HAL_UART_Transmit>
	else
		HAL_UART_Transmit(&huart3, "All channels DISABLE\r\n", 22, 50);
}
 8000f96:	e005      	b.n	8000fa4 <state_all_PWM_channels+0x3c>
		HAL_UART_Transmit(&huart3, "All channels DISABLE\r\n", 22, 50);
 8000f98:	2332      	movs	r3, #50	; 0x32
 8000f9a:	2216      	movs	r2, #22
 8000f9c:	4906      	ldr	r1, [pc, #24]	; (8000fb8 <state_all_PWM_channels+0x50>)
 8000f9e:	4805      	ldr	r0, [pc, #20]	; (8000fb4 <state_all_PWM_channels+0x4c>)
 8000fa0:	f002 f96f 	bl	8003282 <HAL_UART_Transmit>
}
 8000fa4:	bf00      	nop
 8000fa6:	3708      	adds	r7, #8
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	40020400 	.word	0x40020400
 8000fb0:	08004c74 	.word	0x08004c74
 8000fb4:	200000ac 	.word	0x200000ac
 8000fb8:	08004c8c 	.word	0x08004c8c

08000fbc <check_mode>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void check_mode(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
	uint8_t buffer;
	if (HAL_UART_Receive(&huart3, &buffer, 1, 10) != HAL_OK)
 8000fc2:	1df9      	adds	r1, r7, #7
 8000fc4:	230a      	movs	r3, #10
 8000fc6:	2201      	movs	r2, #1
 8000fc8:	482a      	ldr	r0, [pc, #168]	; (8001074 <check_mode+0xb8>)
 8000fca:	f002 f9ec 	bl	80033a6 <HAL_UART_Receive>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d14b      	bne.n	800106c <check_mode+0xb0>
		return;
	switch(buffer)
 8000fd4:	79fb      	ldrb	r3, [r7, #7]
 8000fd6:	3b65      	subs	r3, #101	; 0x65
 8000fd8:	2b0e      	cmp	r3, #14
 8000fda:	d848      	bhi.n	800106e <check_mode+0xb2>
 8000fdc:	a201      	add	r2, pc, #4	; (adr r2, 8000fe4 <check_mode+0x28>)
 8000fde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fe2:	bf00      	nop
 8000fe4:	08001053 	.word	0x08001053
 8000fe8:	08001021 	.word	0x08001021
 8000fec:	0800106f 	.word	0x0800106f
 8000ff0:	0800106f 	.word	0x0800106f
 8000ff4:	0800106f 	.word	0x0800106f
 8000ff8:	0800106f 	.word	0x0800106f
 8000ffc:	0800106f 	.word	0x0800106f
 8001000:	08001029 	.word	0x08001029
 8001004:	0800106f 	.word	0x0800106f
 8001008:	0800106f 	.word	0x0800106f
 800100c:	0800106f 	.word	0x0800106f
 8001010:	0800106f 	.word	0x0800106f
 8001014:	0800106f 	.word	0x0800106f
 8001018:	0800106f 	.word	0x0800106f
 800101c:	08001031 	.word	0x08001031
	{
	case 'f':		//set frequency
		mode = 1;
 8001020:	4b15      	ldr	r3, [pc, #84]	; (8001078 <check_mode+0xbc>)
 8001022:	2201      	movs	r2, #1
 8001024:	701a      	strb	r2, [r3, #0]
		break;
 8001026:	e022      	b.n	800106e <check_mode+0xb2>
	case 'l':		//set led info
		mode = 2;
 8001028:	4b13      	ldr	r3, [pc, #76]	; (8001078 <check_mode+0xbc>)
 800102a:	2202      	movs	r2, #2
 800102c:	701a      	strb	r2, [r3, #0]
		break;
 800102e:	e01e      	b.n	800106e <check_mode+0xb2>
	case 's':		//toggle sleep mode
		sleep = sleep == 1 ? 0 : 1;
 8001030:	4b12      	ldr	r3, [pc, #72]	; (800107c <check_mode+0xc0>)
 8001032:	781b      	ldrb	r3, [r3, #0]
 8001034:	f083 0301 	eor.w	r3, r3, #1
 8001038:	b2da      	uxtb	r2, r3
 800103a:	4b10      	ldr	r3, [pc, #64]	; (800107c <check_mode+0xc0>)
 800103c:	701a      	strb	r2, [r3, #0]
		if (sleep)
 800103e:	4b0f      	ldr	r3, [pc, #60]	; (800107c <check_mode+0xc0>)
 8001040:	781b      	ldrb	r3, [r3, #0]
 8001042:	2b00      	cmp	r3, #0
 8001044:	d002      	beq.n	800104c <check_mode+0x90>
			sleep_mode_on();
 8001046:	f7ff ff6b 	bl	8000f20 <sleep_mode_on>
		else
			sleep_mode_off();
		break;
 800104a:	e010      	b.n	800106e <check_mode+0xb2>
			sleep_mode_off();
 800104c:	f7ff ff7a 	bl	8000f44 <sleep_mode_off>
		break;
 8001050:	e00d      	b.n	800106e <check_mode+0xb2>
	case 'e':		//on/off
		state = state == 1 ? 0 : 1;
 8001052:	4b0b      	ldr	r3, [pc, #44]	; (8001080 <check_mode+0xc4>)
 8001054:	781b      	ldrb	r3, [r3, #0]
 8001056:	f083 0301 	eor.w	r3, r3, #1
 800105a:	b2da      	uxtb	r2, r3
 800105c:	4b08      	ldr	r3, [pc, #32]	; (8001080 <check_mode+0xc4>)
 800105e:	701a      	strb	r2, [r3, #0]
		state_all_PWM_channels(state);
 8001060:	4b07      	ldr	r3, [pc, #28]	; (8001080 <check_mode+0xc4>)
 8001062:	781b      	ldrb	r3, [r3, #0]
 8001064:	4618      	mov	r0, r3
 8001066:	f7ff ff7f 	bl	8000f68 <state_all_PWM_channels>
		break;
 800106a:	e000      	b.n	800106e <check_mode+0xb2>
		return;
 800106c:	bf00      	nop
	}
}
 800106e:	3708      	adds	r7, #8
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}
 8001074:	200000ac 	.word	0x200000ac
 8001078:	20000090 	.word	0x20000090
 800107c:	20000094 	.word	0x20000094
 8001080:	20000000 	.word	0x20000000

08001084 <set_frequency>:

void set_frequency(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b082      	sub	sp, #8
 8001088:	af00      	add	r7, sp, #0
	if (mode != 1)
 800108a:	4b32      	ldr	r3, [pc, #200]	; (8001154 <set_frequency+0xd0>)
 800108c:	781b      	ldrb	r3, [r3, #0]
 800108e:	2b01      	cmp	r3, #1
 8001090:	d04c      	beq.n	800112c <set_frequency+0xa8>
	{
		if (end_freq)
 8001092:	4b31      	ldr	r3, [pc, #196]	; (8001158 <set_frequency+0xd4>)
 8001094:	781b      	ldrb	r3, [r3, #0]
 8001096:	2b00      	cmp	r3, #0
 8001098:	d057      	beq.n	800114a <set_frequency+0xc6>
		{
			uint16_t num = 0;
 800109a:	2300      	movs	r3, #0
 800109c:	80bb      	strh	r3, [r7, #4]
			num = CHAR2NUM(buffer_freq[0]) * 1000 + CHAR2NUM(buffer_freq[1]) * 100 + CHAR2NUM(buffer_freq[2]) * 10 + CHAR2NUM(buffer_freq[3]);
 800109e:	4b2f      	ldr	r3, [pc, #188]	; (800115c <set_frequency+0xd8>)
 80010a0:	781b      	ldrb	r3, [r3, #0]
 80010a2:	3b30      	subs	r3, #48	; 0x30
 80010a4:	b29b      	uxth	r3, r3
 80010a6:	461a      	mov	r2, r3
 80010a8:	0152      	lsls	r2, r2, #5
 80010aa:	1ad2      	subs	r2, r2, r3
 80010ac:	0092      	lsls	r2, r2, #2
 80010ae:	4413      	add	r3, r2
 80010b0:	00db      	lsls	r3, r3, #3
 80010b2:	b29a      	uxth	r2, r3
 80010b4:	4b29      	ldr	r3, [pc, #164]	; (800115c <set_frequency+0xd8>)
 80010b6:	785b      	ldrb	r3, [r3, #1]
 80010b8:	3b30      	subs	r3, #48	; 0x30
 80010ba:	b29b      	uxth	r3, r3
 80010bc:	4619      	mov	r1, r3
 80010be:	0089      	lsls	r1, r1, #2
 80010c0:	440b      	add	r3, r1
 80010c2:	4619      	mov	r1, r3
 80010c4:	0088      	lsls	r0, r1, #2
 80010c6:	4619      	mov	r1, r3
 80010c8:	4603      	mov	r3, r0
 80010ca:	440b      	add	r3, r1
 80010cc:	009b      	lsls	r3, r3, #2
 80010ce:	b29b      	uxth	r3, r3
 80010d0:	4413      	add	r3, r2
 80010d2:	b29a      	uxth	r2, r3
 80010d4:	4b21      	ldr	r3, [pc, #132]	; (800115c <set_frequency+0xd8>)
 80010d6:	789b      	ldrb	r3, [r3, #2]
 80010d8:	3b30      	subs	r3, #48	; 0x30
 80010da:	b29b      	uxth	r3, r3
 80010dc:	4619      	mov	r1, r3
 80010de:	0089      	lsls	r1, r1, #2
 80010e0:	440b      	add	r3, r1
 80010e2:	005b      	lsls	r3, r3, #1
 80010e4:	b29b      	uxth	r3, r3
 80010e6:	4413      	add	r3, r2
 80010e8:	b29a      	uxth	r2, r3
 80010ea:	4b1c      	ldr	r3, [pc, #112]	; (800115c <set_frequency+0xd8>)
 80010ec:	78db      	ldrb	r3, [r3, #3]
 80010ee:	b29b      	uxth	r3, r3
 80010f0:	4413      	add	r3, r2
 80010f2:	b29b      	uxth	r3, r3
 80010f4:	3b30      	subs	r3, #48	; 0x30
 80010f6:	80bb      	strh	r3, [r7, #4]
			set_PWM_freq(num);
 80010f8:	88bb      	ldrh	r3, [r7, #4]
 80010fa:	4618      	mov	r0, r3
 80010fc:	f7ff fe2c 	bl	8000d58 <set_PWM_freq>
			for (uint8_t i = 0; i < 16; i++)
 8001100:	2300      	movs	r3, #0
 8001102:	71fb      	strb	r3, [r7, #7]
 8001104:	e00b      	b.n	800111e <set_frequency+0x9a>
				set_PWM_duty(dutys[i], i);
 8001106:	79fb      	ldrb	r3, [r7, #7]
 8001108:	4a15      	ldr	r2, [pc, #84]	; (8001160 <set_frequency+0xdc>)
 800110a:	5cd3      	ldrb	r3, [r2, r3]
 800110c:	461a      	mov	r2, r3
 800110e:	79fb      	ldrb	r3, [r7, #7]
 8001110:	4619      	mov	r1, r3
 8001112:	4610      	mov	r0, r2
 8001114:	f7ff fe7a 	bl	8000e0c <set_PWM_duty>
			for (uint8_t i = 0; i < 16; i++)
 8001118:	79fb      	ldrb	r3, [r7, #7]
 800111a:	3301      	adds	r3, #1
 800111c:	71fb      	strb	r3, [r7, #7]
 800111e:	79fb      	ldrb	r3, [r7, #7]
 8001120:	2b0f      	cmp	r3, #15
 8001122:	d9f0      	bls.n	8001106 <set_frequency+0x82>
			end_freq = 0;
 8001124:	4b0c      	ldr	r3, [pc, #48]	; (8001158 <set_frequency+0xd4>)
 8001126:	2200      	movs	r2, #0
 8001128:	701a      	strb	r2, [r3, #0]
		}
		return;
 800112a:	e00e      	b.n	800114a <set_frequency+0xc6>
	}
	HAL_UART_Transmit(&huart3, "Set freqency:\r\n", 15, 50);
 800112c:	2332      	movs	r3, #50	; 0x32
 800112e:	220f      	movs	r2, #15
 8001130:	490c      	ldr	r1, [pc, #48]	; (8001164 <set_frequency+0xe0>)
 8001132:	480d      	ldr	r0, [pc, #52]	; (8001168 <set_frequency+0xe4>)
 8001134:	f002 f8a5 	bl	8003282 <HAL_UART_Transmit>
	HAL_UART_Receive_IT(&huart3, &buffer_freq, 4);
 8001138:	2204      	movs	r2, #4
 800113a:	4908      	ldr	r1, [pc, #32]	; (800115c <set_frequency+0xd8>)
 800113c:	480a      	ldr	r0, [pc, #40]	; (8001168 <set_frequency+0xe4>)
 800113e:	f002 f9d4 	bl	80034ea <HAL_UART_Receive_IT>
	mode = 0;
 8001142:	4b04      	ldr	r3, [pc, #16]	; (8001154 <set_frequency+0xd0>)
 8001144:	2200      	movs	r2, #0
 8001146:	701a      	strb	r2, [r3, #0]
 8001148:	e000      	b.n	800114c <set_frequency+0xc8>
		return;
 800114a:	bf00      	nop
}
 800114c:	3708      	adds	r7, #8
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	20000090 	.word	0x20000090
 8001158:	20000091 	.word	0x20000091
 800115c:	200000a4 	.word	0x200000a4
 8001160:	20000148 	.word	0x20000148
 8001164:	08004ca4 	.word	0x08004ca4
 8001168:	200000ac 	.word	0x200000ac

0800116c <set_duty>:
		sum *= num;
	return sum;
}

void set_duty(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b082      	sub	sp, #8
 8001170:	af00      	add	r7, sp, #0
	if (mode != 2)
 8001172:	4b33      	ldr	r3, [pc, #204]	; (8001240 <set_duty+0xd4>)
 8001174:	781b      	ldrb	r3, [r3, #0]
 8001176:	2b02      	cmp	r3, #2
 8001178:	d04f      	beq.n	800121a <set_duty+0xae>
	{
		if (end_duty)
 800117a:	4b32      	ldr	r3, [pc, #200]	; (8001244 <set_duty+0xd8>)
 800117c:	781b      	ldrb	r3, [r3, #0]
 800117e:	2b00      	cmp	r3, #0
 8001180:	d038      	beq.n	80011f4 <set_duty+0x88>
		{
			uint8_t led = 0;
 8001182:	2300      	movs	r3, #0
 8001184:	71fb      	strb	r3, [r7, #7]
			led = CHAR2NUM(buffer_led[0]) * 10 + CHAR2NUM(buffer_led[1]);
 8001186:	4b30      	ldr	r3, [pc, #192]	; (8001248 <set_duty+0xdc>)
 8001188:	781b      	ldrb	r3, [r3, #0]
 800118a:	461a      	mov	r2, r3
 800118c:	0092      	lsls	r2, r2, #2
 800118e:	4413      	add	r3, r2
 8001190:	005b      	lsls	r3, r3, #1
 8001192:	b2da      	uxtb	r2, r3
 8001194:	4b2c      	ldr	r3, [pc, #176]	; (8001248 <set_duty+0xdc>)
 8001196:	785b      	ldrb	r3, [r3, #1]
 8001198:	4413      	add	r3, r2
 800119a:	b2db      	uxtb	r3, r3
 800119c:	3b10      	subs	r3, #16
 800119e:	71fb      	strb	r3, [r7, #7]
			uint8_t duty = 0;
 80011a0:	2300      	movs	r3, #0
 80011a2:	71bb      	strb	r3, [r7, #6]
			duty = CHAR2NUM(buffer_duty[0]) * 100 + CHAR2NUM(buffer_duty[1]) * 10 + CHAR2NUM(buffer_duty[2]);
 80011a4:	4b29      	ldr	r3, [pc, #164]	; (800124c <set_duty+0xe0>)
 80011a6:	781b      	ldrb	r3, [r3, #0]
 80011a8:	461a      	mov	r2, r3
 80011aa:	0092      	lsls	r2, r2, #2
 80011ac:	4413      	add	r3, r2
 80011ae:	461a      	mov	r2, r3
 80011b0:	0091      	lsls	r1, r2, #2
 80011b2:	461a      	mov	r2, r3
 80011b4:	460b      	mov	r3, r1
 80011b6:	4413      	add	r3, r2
 80011b8:	009b      	lsls	r3, r3, #2
 80011ba:	b2da      	uxtb	r2, r3
 80011bc:	4b23      	ldr	r3, [pc, #140]	; (800124c <set_duty+0xe0>)
 80011be:	785b      	ldrb	r3, [r3, #1]
 80011c0:	4619      	mov	r1, r3
 80011c2:	0089      	lsls	r1, r1, #2
 80011c4:	440b      	add	r3, r1
 80011c6:	005b      	lsls	r3, r3, #1
 80011c8:	b2db      	uxtb	r3, r3
 80011ca:	4413      	add	r3, r2
 80011cc:	b2da      	uxtb	r2, r3
 80011ce:	4b1f      	ldr	r3, [pc, #124]	; (800124c <set_duty+0xe0>)
 80011d0:	789b      	ldrb	r3, [r3, #2]
 80011d2:	4413      	add	r3, r2
 80011d4:	b2db      	uxtb	r3, r3
 80011d6:	3330      	adds	r3, #48	; 0x30
 80011d8:	71bb      	strb	r3, [r7, #6]
			dutys[led] = duty;
 80011da:	79fb      	ldrb	r3, [r7, #7]
 80011dc:	491c      	ldr	r1, [pc, #112]	; (8001250 <set_duty+0xe4>)
 80011de:	79ba      	ldrb	r2, [r7, #6]
 80011e0:	54ca      	strb	r2, [r1, r3]
			set_PWM_duty(duty, led);
 80011e2:	79bb      	ldrb	r3, [r7, #6]
 80011e4:	79fa      	ldrb	r2, [r7, #7]
 80011e6:	4611      	mov	r1, r2
 80011e8:	4618      	mov	r0, r3
 80011ea:	f7ff fe0f 	bl	8000e0c <set_PWM_duty>
			end_duty = 0;
 80011ee:	4b15      	ldr	r3, [pc, #84]	; (8001244 <set_duty+0xd8>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	701a      	strb	r2, [r3, #0]
		}
		if(end_led)
 80011f4:	4b17      	ldr	r3, [pc, #92]	; (8001254 <set_duty+0xe8>)
 80011f6:	781b      	ldrb	r3, [r3, #0]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d01d      	beq.n	8001238 <set_duty+0xcc>
		{
			HAL_UART_Transmit(&huart3, "Set DUTY:\r\n", 10, 50);
 80011fc:	2332      	movs	r3, #50	; 0x32
 80011fe:	220a      	movs	r2, #10
 8001200:	4915      	ldr	r1, [pc, #84]	; (8001258 <set_duty+0xec>)
 8001202:	4816      	ldr	r0, [pc, #88]	; (800125c <set_duty+0xf0>)
 8001204:	f002 f83d 	bl	8003282 <HAL_UART_Transmit>
			HAL_UART_Receive_IT(&huart3, (uint8_t*)&buffer_duty, 3);
 8001208:	2203      	movs	r2, #3
 800120a:	4910      	ldr	r1, [pc, #64]	; (800124c <set_duty+0xe0>)
 800120c:	4813      	ldr	r0, [pc, #76]	; (800125c <set_duty+0xf0>)
 800120e:	f002 f96c 	bl	80034ea <HAL_UART_Receive_IT>
			end_led = 0;
 8001212:	4b10      	ldr	r3, [pc, #64]	; (8001254 <set_duty+0xe8>)
 8001214:	2200      	movs	r2, #0
 8001216:	701a      	strb	r2, [r3, #0]
		}
		return;
 8001218:	e00e      	b.n	8001238 <set_duty+0xcc>
	}
	HAL_UART_Transmit(&huart3, "Set LED:\r\n", 10, 50);
 800121a:	2332      	movs	r3, #50	; 0x32
 800121c:	220a      	movs	r2, #10
 800121e:	4910      	ldr	r1, [pc, #64]	; (8001260 <set_duty+0xf4>)
 8001220:	480e      	ldr	r0, [pc, #56]	; (800125c <set_duty+0xf0>)
 8001222:	f002 f82e 	bl	8003282 <HAL_UART_Transmit>
	HAL_UART_Receive_IT(&huart3, &buffer_led, 2);
 8001226:	2202      	movs	r2, #2
 8001228:	4907      	ldr	r1, [pc, #28]	; (8001248 <set_duty+0xdc>)
 800122a:	480c      	ldr	r0, [pc, #48]	; (800125c <set_duty+0xf0>)
 800122c:	f002 f95d 	bl	80034ea <HAL_UART_Receive_IT>

	mode = 0;
 8001230:	4b03      	ldr	r3, [pc, #12]	; (8001240 <set_duty+0xd4>)
 8001232:	2200      	movs	r2, #0
 8001234:	701a      	strb	r2, [r3, #0]
 8001236:	e000      	b.n	800123a <set_duty+0xce>
		return;
 8001238:	bf00      	nop
}
 800123a:	3708      	adds	r7, #8
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}
 8001240:	20000090 	.word	0x20000090
 8001244:	20000093 	.word	0x20000093
 8001248:	20000144 	.word	0x20000144
 800124c:	200000a8 	.word	0x200000a8
 8001250:	20000148 	.word	0x20000148
 8001254:	20000092 	.word	0x20000092
 8001258:	08004cb4 	.word	0x08004cb4
 800125c:	200000ac 	.word	0x200000ac
 8001260:	08004cc0 	.word	0x08004cc0

08001264 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001268:	f000 fb0e 	bl	8001888 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800126c:	f000 f824 	bl	80012b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001270:	f000 f8d6 	bl	8001420 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001274:	f000 f87c 	bl	8001370 <MX_I2C1_Init>
  MX_USART3_UART_Init();
 8001278:	f000 f8a8 	bl	80013cc <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  state_all_PWM_channels(ENABLE);
 800127c:	2001      	movs	r0, #1
 800127e:	f7ff fe73 	bl	8000f68 <state_all_PWM_channels>
  set_PWM_freq(1000);
 8001282:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001286:	f7ff fd67 	bl	8000d58 <set_PWM_freq>
  set_PWM_duty(20, 0);
 800128a:	2100      	movs	r1, #0
 800128c:	2014      	movs	r0, #20
 800128e:	f7ff fdbd 	bl	8000e0c <set_PWM_duty>
  HAL_Delay(500);
 8001292:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001296:	f000 fb69 	bl	800196c <HAL_Delay>
  set_PWM_duty(50, 0);
 800129a:	2100      	movs	r1, #0
 800129c:	2032      	movs	r0, #50	; 0x32
 800129e:	f7ff fdb5 	bl	8000e0c <set_PWM_duty>
  HAL_Delay(500);
 80012a2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80012a6:	f000 fb61 	bl	800196c <HAL_Delay>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  check_mode();
 80012aa:	f7ff fe87 	bl	8000fbc <check_mode>
	  set_frequency();
 80012ae:	f7ff fee9 	bl	8001084 <set_frequency>
	  set_duty();
 80012b2:	f7ff ff5b 	bl	800116c <set_duty>
	  check_mode();
 80012b6:	e7f8      	b.n	80012aa <main+0x46>

080012b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b094      	sub	sp, #80	; 0x50
 80012bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012be:	f107 0320 	add.w	r3, r7, #32
 80012c2:	2230      	movs	r2, #48	; 0x30
 80012c4:	2100      	movs	r1, #0
 80012c6:	4618      	mov	r0, r3
 80012c8:	f003 f822 	bl	8004310 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012cc:	f107 030c 	add.w	r3, r7, #12
 80012d0:	2200      	movs	r2, #0
 80012d2:	601a      	str	r2, [r3, #0]
 80012d4:	605a      	str	r2, [r3, #4]
 80012d6:	609a      	str	r2, [r3, #8]
 80012d8:	60da      	str	r2, [r3, #12]
 80012da:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80012dc:	2300      	movs	r3, #0
 80012de:	60bb      	str	r3, [r7, #8]
 80012e0:	4b21      	ldr	r3, [pc, #132]	; (8001368 <SystemClock_Config+0xb0>)
 80012e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012e4:	4a20      	ldr	r2, [pc, #128]	; (8001368 <SystemClock_Config+0xb0>)
 80012e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012ea:	6413      	str	r3, [r2, #64]	; 0x40
 80012ec:	4b1e      	ldr	r3, [pc, #120]	; (8001368 <SystemClock_Config+0xb0>)
 80012ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012f4:	60bb      	str	r3, [r7, #8]
 80012f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80012f8:	2300      	movs	r3, #0
 80012fa:	607b      	str	r3, [r7, #4]
 80012fc:	4b1b      	ldr	r3, [pc, #108]	; (800136c <SystemClock_Config+0xb4>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4a1a      	ldr	r2, [pc, #104]	; (800136c <SystemClock_Config+0xb4>)
 8001302:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001306:	6013      	str	r3, [r2, #0]
 8001308:	4b18      	ldr	r3, [pc, #96]	; (800136c <SystemClock_Config+0xb4>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001310:	607b      	str	r3, [r7, #4]
 8001312:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001314:	2301      	movs	r3, #1
 8001316:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001318:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800131c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800131e:	2300      	movs	r3, #0
 8001320:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001322:	f107 0320 	add.w	r3, r7, #32
 8001326:	4618      	mov	r0, r3
 8001328:	f001 faea 	bl	8002900 <HAL_RCC_OscConfig>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d001      	beq.n	8001336 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8001332:	f000 f93d 	bl	80015b0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001336:	230f      	movs	r3, #15
 8001338:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 800133a:	2301      	movs	r3, #1
 800133c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800133e:	2300      	movs	r3, #0
 8001340:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001342:	2300      	movs	r3, #0
 8001344:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001346:	2300      	movs	r3, #0
 8001348:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800134a:	f107 030c 	add.w	r3, r7, #12
 800134e:	2100      	movs	r1, #0
 8001350:	4618      	mov	r0, r3
 8001352:	f001 fd4d 	bl	8002df0 <HAL_RCC_ClockConfig>
 8001356:	4603      	mov	r3, r0
 8001358:	2b00      	cmp	r3, #0
 800135a:	d001      	beq.n	8001360 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 800135c:	f000 f928 	bl	80015b0 <Error_Handler>
  }
}
 8001360:	bf00      	nop
 8001362:	3750      	adds	r7, #80	; 0x50
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}
 8001368:	40023800 	.word	0x40023800
 800136c:	40007000 	.word	0x40007000

08001370 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001374:	4b13      	ldr	r3, [pc, #76]	; (80013c4 <MX_I2C1_Init+0x54>)
 8001376:	4a14      	ldr	r2, [pc, #80]	; (80013c8 <MX_I2C1_Init+0x58>)
 8001378:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 50000;
 800137a:	4b12      	ldr	r3, [pc, #72]	; (80013c4 <MX_I2C1_Init+0x54>)
 800137c:	f24c 3250 	movw	r2, #50000	; 0xc350
 8001380:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001382:	4b10      	ldr	r3, [pc, #64]	; (80013c4 <MX_I2C1_Init+0x54>)
 8001384:	2200      	movs	r2, #0
 8001386:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001388:	4b0e      	ldr	r3, [pc, #56]	; (80013c4 <MX_I2C1_Init+0x54>)
 800138a:	2200      	movs	r2, #0
 800138c:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800138e:	4b0d      	ldr	r3, [pc, #52]	; (80013c4 <MX_I2C1_Init+0x54>)
 8001390:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001394:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001396:	4b0b      	ldr	r3, [pc, #44]	; (80013c4 <MX_I2C1_Init+0x54>)
 8001398:	2200      	movs	r2, #0
 800139a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800139c:	4b09      	ldr	r3, [pc, #36]	; (80013c4 <MX_I2C1_Init+0x54>)
 800139e:	2200      	movs	r2, #0
 80013a0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013a2:	4b08      	ldr	r3, [pc, #32]	; (80013c4 <MX_I2C1_Init+0x54>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80013a8:	4b06      	ldr	r3, [pc, #24]	; (80013c4 <MX_I2C1_Init+0x54>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80013ae:	4805      	ldr	r0, [pc, #20]	; (80013c4 <MX_I2C1_Init+0x54>)
 80013b0:	f000 fe5a 	bl	8002068 <HAL_I2C_Init>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d001      	beq.n	80013be <MX_I2C1_Init+0x4e>
  {
    Error_Handler();
 80013ba:	f000 f8f9 	bl	80015b0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80013be:	bf00      	nop
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	200000f0 	.word	0x200000f0
 80013c8:	40005400 	.word	0x40005400

080013cc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80013d0:	4b11      	ldr	r3, [pc, #68]	; (8001418 <MX_USART3_UART_Init+0x4c>)
 80013d2:	4a12      	ldr	r2, [pc, #72]	; (800141c <MX_USART3_UART_Init+0x50>)
 80013d4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80013d6:	4b10      	ldr	r3, [pc, #64]	; (8001418 <MX_USART3_UART_Init+0x4c>)
 80013d8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013dc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80013de:	4b0e      	ldr	r3, [pc, #56]	; (8001418 <MX_USART3_UART_Init+0x4c>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80013e4:	4b0c      	ldr	r3, [pc, #48]	; (8001418 <MX_USART3_UART_Init+0x4c>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80013ea:	4b0b      	ldr	r3, [pc, #44]	; (8001418 <MX_USART3_UART_Init+0x4c>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80013f0:	4b09      	ldr	r3, [pc, #36]	; (8001418 <MX_USART3_UART_Init+0x4c>)
 80013f2:	220c      	movs	r2, #12
 80013f4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013f6:	4b08      	ldr	r3, [pc, #32]	; (8001418 <MX_USART3_UART_Init+0x4c>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80013fc:	4b06      	ldr	r3, [pc, #24]	; (8001418 <MX_USART3_UART_Init+0x4c>)
 80013fe:	2200      	movs	r2, #0
 8001400:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001402:	4805      	ldr	r0, [pc, #20]	; (8001418 <MX_USART3_UART_Init+0x4c>)
 8001404:	f001 fef0 	bl	80031e8 <HAL_UART_Init>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d001      	beq.n	8001412 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800140e:	f000 f8cf 	bl	80015b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001412:	bf00      	nop
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	200000ac 	.word	0x200000ac
 800141c:	40004800 	.word	0x40004800

08001420 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b08a      	sub	sp, #40	; 0x28
 8001424:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001426:	f107 0314 	add.w	r3, r7, #20
 800142a:	2200      	movs	r2, #0
 800142c:	601a      	str	r2, [r3, #0]
 800142e:	605a      	str	r2, [r3, #4]
 8001430:	609a      	str	r2, [r3, #8]
 8001432:	60da      	str	r2, [r3, #12]
 8001434:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001436:	2300      	movs	r3, #0
 8001438:	613b      	str	r3, [r7, #16]
 800143a:	4b26      	ldr	r3, [pc, #152]	; (80014d4 <MX_GPIO_Init+0xb4>)
 800143c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143e:	4a25      	ldr	r2, [pc, #148]	; (80014d4 <MX_GPIO_Init+0xb4>)
 8001440:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001444:	6313      	str	r3, [r2, #48]	; 0x30
 8001446:	4b23      	ldr	r3, [pc, #140]	; (80014d4 <MX_GPIO_Init+0xb4>)
 8001448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800144e:	613b      	str	r3, [r7, #16]
 8001450:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001452:	2300      	movs	r3, #0
 8001454:	60fb      	str	r3, [r7, #12]
 8001456:	4b1f      	ldr	r3, [pc, #124]	; (80014d4 <MX_GPIO_Init+0xb4>)
 8001458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145a:	4a1e      	ldr	r2, [pc, #120]	; (80014d4 <MX_GPIO_Init+0xb4>)
 800145c:	f043 0308 	orr.w	r3, r3, #8
 8001460:	6313      	str	r3, [r2, #48]	; 0x30
 8001462:	4b1c      	ldr	r3, [pc, #112]	; (80014d4 <MX_GPIO_Init+0xb4>)
 8001464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001466:	f003 0308 	and.w	r3, r3, #8
 800146a:	60fb      	str	r3, [r7, #12]
 800146c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800146e:	2300      	movs	r3, #0
 8001470:	60bb      	str	r3, [r7, #8]
 8001472:	4b18      	ldr	r3, [pc, #96]	; (80014d4 <MX_GPIO_Init+0xb4>)
 8001474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001476:	4a17      	ldr	r2, [pc, #92]	; (80014d4 <MX_GPIO_Init+0xb4>)
 8001478:	f043 0301 	orr.w	r3, r3, #1
 800147c:	6313      	str	r3, [r2, #48]	; 0x30
 800147e:	4b15      	ldr	r3, [pc, #84]	; (80014d4 <MX_GPIO_Init+0xb4>)
 8001480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001482:	f003 0301 	and.w	r3, r3, #1
 8001486:	60bb      	str	r3, [r7, #8]
 8001488:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800148a:	2300      	movs	r3, #0
 800148c:	607b      	str	r3, [r7, #4]
 800148e:	4b11      	ldr	r3, [pc, #68]	; (80014d4 <MX_GPIO_Init+0xb4>)
 8001490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001492:	4a10      	ldr	r2, [pc, #64]	; (80014d4 <MX_GPIO_Init+0xb4>)
 8001494:	f043 0302 	orr.w	r3, r3, #2
 8001498:	6313      	str	r3, [r2, #48]	; 0x30
 800149a:	4b0e      	ldr	r3, [pc, #56]	; (80014d4 <MX_GPIO_Init+0xb4>)
 800149c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149e:	f003 0302 	and.w	r3, r3, #2
 80014a2:	607b      	str	r3, [r7, #4]
 80014a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PWM_EN_GPIO_Port, PWM_EN_Pin, GPIO_PIN_RESET);
 80014a6:	2200      	movs	r2, #0
 80014a8:	2180      	movs	r1, #128	; 0x80
 80014aa:	480b      	ldr	r0, [pc, #44]	; (80014d8 <MX_GPIO_Init+0xb8>)
 80014ac:	f000 fdc2 	bl	8002034 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PWM_EN_Pin */
  GPIO_InitStruct.Pin = PWM_EN_Pin;
 80014b0:	2380      	movs	r3, #128	; 0x80
 80014b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014b4:	2301      	movs	r3, #1
 80014b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b8:	2300      	movs	r3, #0
 80014ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014bc:	2300      	movs	r3, #0
 80014be:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(PWM_EN_GPIO_Port, &GPIO_InitStruct);
 80014c0:	f107 0314 	add.w	r3, r7, #20
 80014c4:	4619      	mov	r1, r3
 80014c6:	4804      	ldr	r0, [pc, #16]	; (80014d8 <MX_GPIO_Init+0xb8>)
 80014c8:	f000 fc18 	bl	8001cfc <HAL_GPIO_Init>

}
 80014cc:	bf00      	nop
 80014ce:	3728      	adds	r7, #40	; 0x28
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	40023800 	.word	0x40023800
 80014d8:	40020400 	.word	0x40020400

080014dc <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef* huart)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b084      	sub	sp, #16
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
	uint16_t count = huart->RxXferSize;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80014e8:	81fb      	strh	r3, [r7, #14]
	switch(count)
 80014ea:	89fb      	ldrh	r3, [r7, #14]
 80014ec:	2b04      	cmp	r3, #4
 80014ee:	d032      	beq.n	8001556 <HAL_UART_RxCpltCallback+0x7a>
 80014f0:	2b04      	cmp	r3, #4
 80014f2:	dc46      	bgt.n	8001582 <HAL_UART_RxCpltCallback+0xa6>
 80014f4:	2b02      	cmp	r3, #2
 80014f6:	d002      	beq.n	80014fe <HAL_UART_RxCpltCallback+0x22>
 80014f8:	2b03      	cmp	r3, #3
 80014fa:	d016      	beq.n	800152a <HAL_UART_RxCpltCallback+0x4e>
		HAL_UART_Transmit(&huart3, "\n", 1, 10);
		HAL_UART_Transmit(&huart3,&buffer_freq, 4, 50);
		HAL_UART_Transmit(&huart3, "\r\n", 2, 10);
		break;
	}
}
 80014fc:	e041      	b.n	8001582 <HAL_UART_RxCpltCallback+0xa6>
		end_led = 1;
 80014fe:	4b23      	ldr	r3, [pc, #140]	; (800158c <HAL_UART_RxCpltCallback+0xb0>)
 8001500:	2201      	movs	r2, #1
 8001502:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart3, "\n", 1, 10);
 8001504:	230a      	movs	r3, #10
 8001506:	2201      	movs	r2, #1
 8001508:	4921      	ldr	r1, [pc, #132]	; (8001590 <HAL_UART_RxCpltCallback+0xb4>)
 800150a:	4822      	ldr	r0, [pc, #136]	; (8001594 <HAL_UART_RxCpltCallback+0xb8>)
 800150c:	f001 feb9 	bl	8003282 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart3,&buffer_led, 2, 50);
 8001510:	2332      	movs	r3, #50	; 0x32
 8001512:	2202      	movs	r2, #2
 8001514:	4920      	ldr	r1, [pc, #128]	; (8001598 <HAL_UART_RxCpltCallback+0xbc>)
 8001516:	481f      	ldr	r0, [pc, #124]	; (8001594 <HAL_UART_RxCpltCallback+0xb8>)
 8001518:	f001 feb3 	bl	8003282 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart3, "\r\n", 2, 10);
 800151c:	230a      	movs	r3, #10
 800151e:	2202      	movs	r2, #2
 8001520:	491e      	ldr	r1, [pc, #120]	; (800159c <HAL_UART_RxCpltCallback+0xc0>)
 8001522:	481c      	ldr	r0, [pc, #112]	; (8001594 <HAL_UART_RxCpltCallback+0xb8>)
 8001524:	f001 fead 	bl	8003282 <HAL_UART_Transmit>
		break;
 8001528:	e02b      	b.n	8001582 <HAL_UART_RxCpltCallback+0xa6>
		end_duty = 1;
 800152a:	4b1d      	ldr	r3, [pc, #116]	; (80015a0 <HAL_UART_RxCpltCallback+0xc4>)
 800152c:	2201      	movs	r2, #1
 800152e:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart3, "\n", 1, 10);
 8001530:	230a      	movs	r3, #10
 8001532:	2201      	movs	r2, #1
 8001534:	4916      	ldr	r1, [pc, #88]	; (8001590 <HAL_UART_RxCpltCallback+0xb4>)
 8001536:	4817      	ldr	r0, [pc, #92]	; (8001594 <HAL_UART_RxCpltCallback+0xb8>)
 8001538:	f001 fea3 	bl	8003282 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart3,&buffer_duty, 3, 50);
 800153c:	2332      	movs	r3, #50	; 0x32
 800153e:	2203      	movs	r2, #3
 8001540:	4918      	ldr	r1, [pc, #96]	; (80015a4 <HAL_UART_RxCpltCallback+0xc8>)
 8001542:	4814      	ldr	r0, [pc, #80]	; (8001594 <HAL_UART_RxCpltCallback+0xb8>)
 8001544:	f001 fe9d 	bl	8003282 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart3, "\r\n", 2, 10);
 8001548:	230a      	movs	r3, #10
 800154a:	2202      	movs	r2, #2
 800154c:	4913      	ldr	r1, [pc, #76]	; (800159c <HAL_UART_RxCpltCallback+0xc0>)
 800154e:	4811      	ldr	r0, [pc, #68]	; (8001594 <HAL_UART_RxCpltCallback+0xb8>)
 8001550:	f001 fe97 	bl	8003282 <HAL_UART_Transmit>
		break;
 8001554:	e015      	b.n	8001582 <HAL_UART_RxCpltCallback+0xa6>
		end_freq = 1;
 8001556:	4b14      	ldr	r3, [pc, #80]	; (80015a8 <HAL_UART_RxCpltCallback+0xcc>)
 8001558:	2201      	movs	r2, #1
 800155a:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart3, "\n", 1, 10);
 800155c:	230a      	movs	r3, #10
 800155e:	2201      	movs	r2, #1
 8001560:	490b      	ldr	r1, [pc, #44]	; (8001590 <HAL_UART_RxCpltCallback+0xb4>)
 8001562:	480c      	ldr	r0, [pc, #48]	; (8001594 <HAL_UART_RxCpltCallback+0xb8>)
 8001564:	f001 fe8d 	bl	8003282 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart3,&buffer_freq, 4, 50);
 8001568:	2332      	movs	r3, #50	; 0x32
 800156a:	2204      	movs	r2, #4
 800156c:	490f      	ldr	r1, [pc, #60]	; (80015ac <HAL_UART_RxCpltCallback+0xd0>)
 800156e:	4809      	ldr	r0, [pc, #36]	; (8001594 <HAL_UART_RxCpltCallback+0xb8>)
 8001570:	f001 fe87 	bl	8003282 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart3, "\r\n", 2, 10);
 8001574:	230a      	movs	r3, #10
 8001576:	2202      	movs	r2, #2
 8001578:	4908      	ldr	r1, [pc, #32]	; (800159c <HAL_UART_RxCpltCallback+0xc0>)
 800157a:	4806      	ldr	r0, [pc, #24]	; (8001594 <HAL_UART_RxCpltCallback+0xb8>)
 800157c:	f001 fe81 	bl	8003282 <HAL_UART_Transmit>
		break;
 8001580:	bf00      	nop
}
 8001582:	bf00      	nop
 8001584:	3710      	adds	r7, #16
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	20000092 	.word	0x20000092
 8001590:	08004ccc 	.word	0x08004ccc
 8001594:	200000ac 	.word	0x200000ac
 8001598:	20000144 	.word	0x20000144
 800159c:	08004cd0 	.word	0x08004cd0
 80015a0:	20000093 	.word	0x20000093
 80015a4:	200000a8 	.word	0x200000a8
 80015a8:	20000091 	.word	0x20000091
 80015ac:	200000a4 	.word	0x200000a4

080015b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015b0:	b480      	push	{r7}
 80015b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015b4:	b672      	cpsid	i
}
 80015b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015b8:	e7fe      	b.n	80015b8 <Error_Handler+0x8>
	...

080015bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015bc:	b480      	push	{r7}
 80015be:	b083      	sub	sp, #12
 80015c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015c2:	2300      	movs	r3, #0
 80015c4:	607b      	str	r3, [r7, #4]
 80015c6:	4b10      	ldr	r3, [pc, #64]	; (8001608 <HAL_MspInit+0x4c>)
 80015c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ca:	4a0f      	ldr	r2, [pc, #60]	; (8001608 <HAL_MspInit+0x4c>)
 80015cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015d0:	6453      	str	r3, [r2, #68]	; 0x44
 80015d2:	4b0d      	ldr	r3, [pc, #52]	; (8001608 <HAL_MspInit+0x4c>)
 80015d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015da:	607b      	str	r3, [r7, #4]
 80015dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015de:	2300      	movs	r3, #0
 80015e0:	603b      	str	r3, [r7, #0]
 80015e2:	4b09      	ldr	r3, [pc, #36]	; (8001608 <HAL_MspInit+0x4c>)
 80015e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e6:	4a08      	ldr	r2, [pc, #32]	; (8001608 <HAL_MspInit+0x4c>)
 80015e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015ec:	6413      	str	r3, [r2, #64]	; 0x40
 80015ee:	4b06      	ldr	r3, [pc, #24]	; (8001608 <HAL_MspInit+0x4c>)
 80015f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015f6:	603b      	str	r3, [r7, #0]
 80015f8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015fa:	bf00      	nop
 80015fc:	370c      	adds	r7, #12
 80015fe:	46bd      	mov	sp, r7
 8001600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001604:	4770      	bx	lr
 8001606:	bf00      	nop
 8001608:	40023800 	.word	0x40023800

0800160c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b08a      	sub	sp, #40	; 0x28
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001614:	f107 0314 	add.w	r3, r7, #20
 8001618:	2200      	movs	r2, #0
 800161a:	601a      	str	r2, [r3, #0]
 800161c:	605a      	str	r2, [r3, #4]
 800161e:	609a      	str	r2, [r3, #8]
 8001620:	60da      	str	r2, [r3, #12]
 8001622:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4a19      	ldr	r2, [pc, #100]	; (8001690 <HAL_I2C_MspInit+0x84>)
 800162a:	4293      	cmp	r3, r2
 800162c:	d12c      	bne.n	8001688 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800162e:	2300      	movs	r3, #0
 8001630:	613b      	str	r3, [r7, #16]
 8001632:	4b18      	ldr	r3, [pc, #96]	; (8001694 <HAL_I2C_MspInit+0x88>)
 8001634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001636:	4a17      	ldr	r2, [pc, #92]	; (8001694 <HAL_I2C_MspInit+0x88>)
 8001638:	f043 0302 	orr.w	r3, r3, #2
 800163c:	6313      	str	r3, [r2, #48]	; 0x30
 800163e:	4b15      	ldr	r3, [pc, #84]	; (8001694 <HAL_I2C_MspInit+0x88>)
 8001640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001642:	f003 0302 	and.w	r3, r3, #2
 8001646:	613b      	str	r3, [r7, #16]
 8001648:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 800164a:	f44f 7310 	mov.w	r3, #576	; 0x240
 800164e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001650:	2312      	movs	r3, #18
 8001652:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001654:	2300      	movs	r3, #0
 8001656:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001658:	2303      	movs	r3, #3
 800165a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800165c:	2304      	movs	r3, #4
 800165e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001660:	f107 0314 	add.w	r3, r7, #20
 8001664:	4619      	mov	r1, r3
 8001666:	480c      	ldr	r0, [pc, #48]	; (8001698 <HAL_I2C_MspInit+0x8c>)
 8001668:	f000 fb48 	bl	8001cfc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800166c:	2300      	movs	r3, #0
 800166e:	60fb      	str	r3, [r7, #12]
 8001670:	4b08      	ldr	r3, [pc, #32]	; (8001694 <HAL_I2C_MspInit+0x88>)
 8001672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001674:	4a07      	ldr	r2, [pc, #28]	; (8001694 <HAL_I2C_MspInit+0x88>)
 8001676:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800167a:	6413      	str	r3, [r2, #64]	; 0x40
 800167c:	4b05      	ldr	r3, [pc, #20]	; (8001694 <HAL_I2C_MspInit+0x88>)
 800167e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001680:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001684:	60fb      	str	r3, [r7, #12]
 8001686:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001688:	bf00      	nop
 800168a:	3728      	adds	r7, #40	; 0x28
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}
 8001690:	40005400 	.word	0x40005400
 8001694:	40023800 	.word	0x40023800
 8001698:	40020400 	.word	0x40020400

0800169c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b08a      	sub	sp, #40	; 0x28
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016a4:	f107 0314 	add.w	r3, r7, #20
 80016a8:	2200      	movs	r2, #0
 80016aa:	601a      	str	r2, [r3, #0]
 80016ac:	605a      	str	r2, [r3, #4]
 80016ae:	609a      	str	r2, [r3, #8]
 80016b0:	60da      	str	r2, [r3, #12]
 80016b2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4a1d      	ldr	r2, [pc, #116]	; (8001730 <HAL_UART_MspInit+0x94>)
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d134      	bne.n	8001728 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80016be:	2300      	movs	r3, #0
 80016c0:	613b      	str	r3, [r7, #16]
 80016c2:	4b1c      	ldr	r3, [pc, #112]	; (8001734 <HAL_UART_MspInit+0x98>)
 80016c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c6:	4a1b      	ldr	r2, [pc, #108]	; (8001734 <HAL_UART_MspInit+0x98>)
 80016c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016cc:	6413      	str	r3, [r2, #64]	; 0x40
 80016ce:	4b19      	ldr	r3, [pc, #100]	; (8001734 <HAL_UART_MspInit+0x98>)
 80016d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80016d6:	613b      	str	r3, [r7, #16]
 80016d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80016da:	2300      	movs	r3, #0
 80016dc:	60fb      	str	r3, [r7, #12]
 80016de:	4b15      	ldr	r3, [pc, #84]	; (8001734 <HAL_UART_MspInit+0x98>)
 80016e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e2:	4a14      	ldr	r2, [pc, #80]	; (8001734 <HAL_UART_MspInit+0x98>)
 80016e4:	f043 0308 	orr.w	r3, r3, #8
 80016e8:	6313      	str	r3, [r2, #48]	; 0x30
 80016ea:	4b12      	ldr	r3, [pc, #72]	; (8001734 <HAL_UART_MspInit+0x98>)
 80016ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ee:	f003 0308 	and.w	r3, r3, #8
 80016f2:	60fb      	str	r3, [r7, #12]
 80016f4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80016f6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80016fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016fc:	2302      	movs	r3, #2
 80016fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001700:	2300      	movs	r3, #0
 8001702:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001704:	2303      	movs	r3, #3
 8001706:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001708:	2307      	movs	r3, #7
 800170a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800170c:	f107 0314 	add.w	r3, r7, #20
 8001710:	4619      	mov	r1, r3
 8001712:	4809      	ldr	r0, [pc, #36]	; (8001738 <HAL_UART_MspInit+0x9c>)
 8001714:	f000 faf2 	bl	8001cfc <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001718:	2200      	movs	r2, #0
 800171a:	2100      	movs	r1, #0
 800171c:	2027      	movs	r0, #39	; 0x27
 800171e:	f000 fa24 	bl	8001b6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001722:	2027      	movs	r0, #39	; 0x27
 8001724:	f000 fa3d 	bl	8001ba2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001728:	bf00      	nop
 800172a:	3728      	adds	r7, #40	; 0x28
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}
 8001730:	40004800 	.word	0x40004800
 8001734:	40023800 	.word	0x40023800
 8001738:	40020c00 	.word	0x40020c00

0800173c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001740:	e7fe      	b.n	8001740 <NMI_Handler+0x4>

08001742 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001742:	b480      	push	{r7}
 8001744:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001746:	e7fe      	b.n	8001746 <HardFault_Handler+0x4>

08001748 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001748:	b480      	push	{r7}
 800174a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800174c:	e7fe      	b.n	800174c <MemManage_Handler+0x4>

0800174e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800174e:	b480      	push	{r7}
 8001750:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001752:	e7fe      	b.n	8001752 <BusFault_Handler+0x4>

08001754 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001758:	e7fe      	b.n	8001758 <UsageFault_Handler+0x4>

0800175a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800175a:	b480      	push	{r7}
 800175c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800175e:	bf00      	nop
 8001760:	46bd      	mov	sp, r7
 8001762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001766:	4770      	bx	lr

08001768 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001768:	b480      	push	{r7}
 800176a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800176c:	bf00      	nop
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr

08001776 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001776:	b480      	push	{r7}
 8001778:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800177a:	bf00      	nop
 800177c:	46bd      	mov	sp, r7
 800177e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001782:	4770      	bx	lr

08001784 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001788:	f000 f8d0 	bl	800192c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800178c:	bf00      	nop
 800178e:	bd80      	pop	{r7, pc}

08001790 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001794:	4802      	ldr	r0, [pc, #8]	; (80017a0 <USART3_IRQHandler+0x10>)
 8001796:	f001 fed9 	bl	800354c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800179a:	bf00      	nop
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	200000ac 	.word	0x200000ac

080017a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b086      	sub	sp, #24
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017ac:	4a14      	ldr	r2, [pc, #80]	; (8001800 <_sbrk+0x5c>)
 80017ae:	4b15      	ldr	r3, [pc, #84]	; (8001804 <_sbrk+0x60>)
 80017b0:	1ad3      	subs	r3, r2, r3
 80017b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017b4:	697b      	ldr	r3, [r7, #20]
 80017b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017b8:	4b13      	ldr	r3, [pc, #76]	; (8001808 <_sbrk+0x64>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d102      	bne.n	80017c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017c0:	4b11      	ldr	r3, [pc, #68]	; (8001808 <_sbrk+0x64>)
 80017c2:	4a12      	ldr	r2, [pc, #72]	; (800180c <_sbrk+0x68>)
 80017c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017c6:	4b10      	ldr	r3, [pc, #64]	; (8001808 <_sbrk+0x64>)
 80017c8:	681a      	ldr	r2, [r3, #0]
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	4413      	add	r3, r2
 80017ce:	693a      	ldr	r2, [r7, #16]
 80017d0:	429a      	cmp	r2, r3
 80017d2:	d207      	bcs.n	80017e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017d4:	f002 fd72 	bl	80042bc <__errno>
 80017d8:	4603      	mov	r3, r0
 80017da:	220c      	movs	r2, #12
 80017dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80017e2:	e009      	b.n	80017f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017e4:	4b08      	ldr	r3, [pc, #32]	; (8001808 <_sbrk+0x64>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017ea:	4b07      	ldr	r3, [pc, #28]	; (8001808 <_sbrk+0x64>)
 80017ec:	681a      	ldr	r2, [r3, #0]
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	4413      	add	r3, r2
 80017f2:	4a05      	ldr	r2, [pc, #20]	; (8001808 <_sbrk+0x64>)
 80017f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017f6:	68fb      	ldr	r3, [r7, #12]
}
 80017f8:	4618      	mov	r0, r3
 80017fa:	3718      	adds	r7, #24
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}
 8001800:	20020000 	.word	0x20020000
 8001804:	00000400 	.word	0x00000400
 8001808:	20000098 	.word	0x20000098
 800180c:	20000170 	.word	0x20000170

08001810 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001814:	4b06      	ldr	r3, [pc, #24]	; (8001830 <SystemInit+0x20>)
 8001816:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800181a:	4a05      	ldr	r2, [pc, #20]	; (8001830 <SystemInit+0x20>)
 800181c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001820:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001824:	bf00      	nop
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr
 800182e:	bf00      	nop
 8001830:	e000ed00 	.word	0xe000ed00

08001834 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001834:	f8df d034 	ldr.w	sp, [pc, #52]	; 800186c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001838:	480d      	ldr	r0, [pc, #52]	; (8001870 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800183a:	490e      	ldr	r1, [pc, #56]	; (8001874 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800183c:	4a0e      	ldr	r2, [pc, #56]	; (8001878 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800183e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001840:	e002      	b.n	8001848 <LoopCopyDataInit>

08001842 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001842:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001844:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001846:	3304      	adds	r3, #4

08001848 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001848:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800184a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800184c:	d3f9      	bcc.n	8001842 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800184e:	4a0b      	ldr	r2, [pc, #44]	; (800187c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001850:	4c0b      	ldr	r4, [pc, #44]	; (8001880 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001852:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001854:	e001      	b.n	800185a <LoopFillZerobss>

08001856 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001856:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001858:	3204      	adds	r2, #4

0800185a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800185a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800185c:	d3fb      	bcc.n	8001856 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800185e:	f7ff ffd7 	bl	8001810 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001862:	f002 fd31 	bl	80042c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001866:	f7ff fcfd 	bl	8001264 <main>
  bx  lr    
 800186a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800186c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001870:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001874:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001878:	08004d30 	.word	0x08004d30
  ldr r2, =_sbss
 800187c:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001880:	2000016c 	.word	0x2000016c

08001884 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001884:	e7fe      	b.n	8001884 <ADC_IRQHandler>
	...

08001888 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800188c:	4b0e      	ldr	r3, [pc, #56]	; (80018c8 <HAL_Init+0x40>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4a0d      	ldr	r2, [pc, #52]	; (80018c8 <HAL_Init+0x40>)
 8001892:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001896:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001898:	4b0b      	ldr	r3, [pc, #44]	; (80018c8 <HAL_Init+0x40>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a0a      	ldr	r2, [pc, #40]	; (80018c8 <HAL_Init+0x40>)
 800189e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80018a2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018a4:	4b08      	ldr	r3, [pc, #32]	; (80018c8 <HAL_Init+0x40>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a07      	ldr	r2, [pc, #28]	; (80018c8 <HAL_Init+0x40>)
 80018aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018ae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018b0:	2003      	movs	r0, #3
 80018b2:	f000 f94f 	bl	8001b54 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018b6:	200f      	movs	r0, #15
 80018b8:	f000 f808 	bl	80018cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018bc:	f7ff fe7e 	bl	80015bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018c0:	2300      	movs	r3, #0
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	40023c00 	.word	0x40023c00

080018cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b082      	sub	sp, #8
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018d4:	4b12      	ldr	r3, [pc, #72]	; (8001920 <HAL_InitTick+0x54>)
 80018d6:	681a      	ldr	r2, [r3, #0]
 80018d8:	4b12      	ldr	r3, [pc, #72]	; (8001924 <HAL_InitTick+0x58>)
 80018da:	781b      	ldrb	r3, [r3, #0]
 80018dc:	4619      	mov	r1, r3
 80018de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80018e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80018ea:	4618      	mov	r0, r3
 80018ec:	f000 f967 	bl	8001bbe <HAL_SYSTICK_Config>
 80018f0:	4603      	mov	r3, r0
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d001      	beq.n	80018fa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018f6:	2301      	movs	r3, #1
 80018f8:	e00e      	b.n	8001918 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	2b0f      	cmp	r3, #15
 80018fe:	d80a      	bhi.n	8001916 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001900:	2200      	movs	r2, #0
 8001902:	6879      	ldr	r1, [r7, #4]
 8001904:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001908:	f000 f92f 	bl	8001b6a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800190c:	4a06      	ldr	r2, [pc, #24]	; (8001928 <HAL_InitTick+0x5c>)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001912:	2300      	movs	r3, #0
 8001914:	e000      	b.n	8001918 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001916:	2301      	movs	r3, #1
}
 8001918:	4618      	mov	r0, r3
 800191a:	3708      	adds	r7, #8
 800191c:	46bd      	mov	sp, r7
 800191e:	bd80      	pop	{r7, pc}
 8001920:	20000004 	.word	0x20000004
 8001924:	2000000c 	.word	0x2000000c
 8001928:	20000008 	.word	0x20000008

0800192c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800192c:	b480      	push	{r7}
 800192e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001930:	4b06      	ldr	r3, [pc, #24]	; (800194c <HAL_IncTick+0x20>)
 8001932:	781b      	ldrb	r3, [r3, #0]
 8001934:	461a      	mov	r2, r3
 8001936:	4b06      	ldr	r3, [pc, #24]	; (8001950 <HAL_IncTick+0x24>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4413      	add	r3, r2
 800193c:	4a04      	ldr	r2, [pc, #16]	; (8001950 <HAL_IncTick+0x24>)
 800193e:	6013      	str	r3, [r2, #0]
}
 8001940:	bf00      	nop
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr
 800194a:	bf00      	nop
 800194c:	2000000c 	.word	0x2000000c
 8001950:	20000158 	.word	0x20000158

08001954 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001954:	b480      	push	{r7}
 8001956:	af00      	add	r7, sp, #0
  return uwTick;
 8001958:	4b03      	ldr	r3, [pc, #12]	; (8001968 <HAL_GetTick+0x14>)
 800195a:	681b      	ldr	r3, [r3, #0]
}
 800195c:	4618      	mov	r0, r3
 800195e:	46bd      	mov	sp, r7
 8001960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001964:	4770      	bx	lr
 8001966:	bf00      	nop
 8001968:	20000158 	.word	0x20000158

0800196c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b084      	sub	sp, #16
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001974:	f7ff ffee 	bl	8001954 <HAL_GetTick>
 8001978:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001984:	d005      	beq.n	8001992 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001986:	4b0a      	ldr	r3, [pc, #40]	; (80019b0 <HAL_Delay+0x44>)
 8001988:	781b      	ldrb	r3, [r3, #0]
 800198a:	461a      	mov	r2, r3
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	4413      	add	r3, r2
 8001990:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001992:	bf00      	nop
 8001994:	f7ff ffde 	bl	8001954 <HAL_GetTick>
 8001998:	4602      	mov	r2, r0
 800199a:	68bb      	ldr	r3, [r7, #8]
 800199c:	1ad3      	subs	r3, r2, r3
 800199e:	68fa      	ldr	r2, [r7, #12]
 80019a0:	429a      	cmp	r2, r3
 80019a2:	d8f7      	bhi.n	8001994 <HAL_Delay+0x28>
  {
  }
}
 80019a4:	bf00      	nop
 80019a6:	bf00      	nop
 80019a8:	3710      	adds	r7, #16
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	2000000c 	.word	0x2000000c

080019b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b085      	sub	sp, #20
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	f003 0307 	and.w	r3, r3, #7
 80019c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019c4:	4b0c      	ldr	r3, [pc, #48]	; (80019f8 <__NVIC_SetPriorityGrouping+0x44>)
 80019c6:	68db      	ldr	r3, [r3, #12]
 80019c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019ca:	68ba      	ldr	r2, [r7, #8]
 80019cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019d0:	4013      	ands	r3, r2
 80019d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019d8:	68bb      	ldr	r3, [r7, #8]
 80019da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019e6:	4a04      	ldr	r2, [pc, #16]	; (80019f8 <__NVIC_SetPriorityGrouping+0x44>)
 80019e8:	68bb      	ldr	r3, [r7, #8]
 80019ea:	60d3      	str	r3, [r2, #12]
}
 80019ec:	bf00      	nop
 80019ee:	3714      	adds	r7, #20
 80019f0:	46bd      	mov	sp, r7
 80019f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f6:	4770      	bx	lr
 80019f8:	e000ed00 	.word	0xe000ed00

080019fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019fc:	b480      	push	{r7}
 80019fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a00:	4b04      	ldr	r3, [pc, #16]	; (8001a14 <__NVIC_GetPriorityGrouping+0x18>)
 8001a02:	68db      	ldr	r3, [r3, #12]
 8001a04:	0a1b      	lsrs	r3, r3, #8
 8001a06:	f003 0307 	and.w	r3, r3, #7
}
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a12:	4770      	bx	lr
 8001a14:	e000ed00 	.word	0xe000ed00

08001a18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	b083      	sub	sp, #12
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	4603      	mov	r3, r0
 8001a20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	db0b      	blt.n	8001a42 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a2a:	79fb      	ldrb	r3, [r7, #7]
 8001a2c:	f003 021f 	and.w	r2, r3, #31
 8001a30:	4907      	ldr	r1, [pc, #28]	; (8001a50 <__NVIC_EnableIRQ+0x38>)
 8001a32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a36:	095b      	lsrs	r3, r3, #5
 8001a38:	2001      	movs	r0, #1
 8001a3a:	fa00 f202 	lsl.w	r2, r0, r2
 8001a3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a42:	bf00      	nop
 8001a44:	370c      	adds	r7, #12
 8001a46:	46bd      	mov	sp, r7
 8001a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4c:	4770      	bx	lr
 8001a4e:	bf00      	nop
 8001a50:	e000e100 	.word	0xe000e100

08001a54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b083      	sub	sp, #12
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	6039      	str	r1, [r7, #0]
 8001a5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	db0a      	blt.n	8001a7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	b2da      	uxtb	r2, r3
 8001a6c:	490c      	ldr	r1, [pc, #48]	; (8001aa0 <__NVIC_SetPriority+0x4c>)
 8001a6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a72:	0112      	lsls	r2, r2, #4
 8001a74:	b2d2      	uxtb	r2, r2
 8001a76:	440b      	add	r3, r1
 8001a78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a7c:	e00a      	b.n	8001a94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	b2da      	uxtb	r2, r3
 8001a82:	4908      	ldr	r1, [pc, #32]	; (8001aa4 <__NVIC_SetPriority+0x50>)
 8001a84:	79fb      	ldrb	r3, [r7, #7]
 8001a86:	f003 030f 	and.w	r3, r3, #15
 8001a8a:	3b04      	subs	r3, #4
 8001a8c:	0112      	lsls	r2, r2, #4
 8001a8e:	b2d2      	uxtb	r2, r2
 8001a90:	440b      	add	r3, r1
 8001a92:	761a      	strb	r2, [r3, #24]
}
 8001a94:	bf00      	nop
 8001a96:	370c      	adds	r7, #12
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9e:	4770      	bx	lr
 8001aa0:	e000e100 	.word	0xe000e100
 8001aa4:	e000ed00 	.word	0xe000ed00

08001aa8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b089      	sub	sp, #36	; 0x24
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	60f8      	str	r0, [r7, #12]
 8001ab0:	60b9      	str	r1, [r7, #8]
 8001ab2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	f003 0307 	and.w	r3, r3, #7
 8001aba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001abc:	69fb      	ldr	r3, [r7, #28]
 8001abe:	f1c3 0307 	rsb	r3, r3, #7
 8001ac2:	2b04      	cmp	r3, #4
 8001ac4:	bf28      	it	cs
 8001ac6:	2304      	movcs	r3, #4
 8001ac8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001aca:	69fb      	ldr	r3, [r7, #28]
 8001acc:	3304      	adds	r3, #4
 8001ace:	2b06      	cmp	r3, #6
 8001ad0:	d902      	bls.n	8001ad8 <NVIC_EncodePriority+0x30>
 8001ad2:	69fb      	ldr	r3, [r7, #28]
 8001ad4:	3b03      	subs	r3, #3
 8001ad6:	e000      	b.n	8001ada <NVIC_EncodePriority+0x32>
 8001ad8:	2300      	movs	r3, #0
 8001ada:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001adc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001ae0:	69bb      	ldr	r3, [r7, #24]
 8001ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae6:	43da      	mvns	r2, r3
 8001ae8:	68bb      	ldr	r3, [r7, #8]
 8001aea:	401a      	ands	r2, r3
 8001aec:	697b      	ldr	r3, [r7, #20]
 8001aee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001af0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001af4:	697b      	ldr	r3, [r7, #20]
 8001af6:	fa01 f303 	lsl.w	r3, r1, r3
 8001afa:	43d9      	mvns	r1, r3
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b00:	4313      	orrs	r3, r2
         );
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	3724      	adds	r7, #36	; 0x24
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr
	...

08001b10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b082      	sub	sp, #8
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	3b01      	subs	r3, #1
 8001b1c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b20:	d301      	bcc.n	8001b26 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b22:	2301      	movs	r3, #1
 8001b24:	e00f      	b.n	8001b46 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b26:	4a0a      	ldr	r2, [pc, #40]	; (8001b50 <SysTick_Config+0x40>)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	3b01      	subs	r3, #1
 8001b2c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b2e:	210f      	movs	r1, #15
 8001b30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001b34:	f7ff ff8e 	bl	8001a54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b38:	4b05      	ldr	r3, [pc, #20]	; (8001b50 <SysTick_Config+0x40>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b3e:	4b04      	ldr	r3, [pc, #16]	; (8001b50 <SysTick_Config+0x40>)
 8001b40:	2207      	movs	r2, #7
 8001b42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b44:	2300      	movs	r3, #0
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	3708      	adds	r7, #8
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	e000e010 	.word	0xe000e010

08001b54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b082      	sub	sp, #8
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b5c:	6878      	ldr	r0, [r7, #4]
 8001b5e:	f7ff ff29 	bl	80019b4 <__NVIC_SetPriorityGrouping>
}
 8001b62:	bf00      	nop
 8001b64:	3708      	adds	r7, #8
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}

08001b6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b6a:	b580      	push	{r7, lr}
 8001b6c:	b086      	sub	sp, #24
 8001b6e:	af00      	add	r7, sp, #0
 8001b70:	4603      	mov	r3, r0
 8001b72:	60b9      	str	r1, [r7, #8]
 8001b74:	607a      	str	r2, [r7, #4]
 8001b76:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b7c:	f7ff ff3e 	bl	80019fc <__NVIC_GetPriorityGrouping>
 8001b80:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b82:	687a      	ldr	r2, [r7, #4]
 8001b84:	68b9      	ldr	r1, [r7, #8]
 8001b86:	6978      	ldr	r0, [r7, #20]
 8001b88:	f7ff ff8e 	bl	8001aa8 <NVIC_EncodePriority>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b92:	4611      	mov	r1, r2
 8001b94:	4618      	mov	r0, r3
 8001b96:	f7ff ff5d 	bl	8001a54 <__NVIC_SetPriority>
}
 8001b9a:	bf00      	nop
 8001b9c:	3718      	adds	r7, #24
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}

08001ba2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ba2:	b580      	push	{r7, lr}
 8001ba4:	b082      	sub	sp, #8
 8001ba6:	af00      	add	r7, sp, #0
 8001ba8:	4603      	mov	r3, r0
 8001baa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001bac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f7ff ff31 	bl	8001a18 <__NVIC_EnableIRQ>
}
 8001bb6:	bf00      	nop
 8001bb8:	3708      	adds	r7, #8
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}

08001bbe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bbe:	b580      	push	{r7, lr}
 8001bc0:	b082      	sub	sp, #8
 8001bc2:	af00      	add	r7, sp, #0
 8001bc4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001bc6:	6878      	ldr	r0, [r7, #4]
 8001bc8:	f7ff ffa2 	bl	8001b10 <SysTick_Config>
 8001bcc:	4603      	mov	r3, r0
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	3708      	adds	r7, #8
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}

08001bd6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001bd6:	b580      	push	{r7, lr}
 8001bd8:	b084      	sub	sp, #16
 8001bda:	af00      	add	r7, sp, #0
 8001bdc:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001be2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001be4:	f7ff feb6 	bl	8001954 <HAL_GetTick>
 8001be8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001bf0:	b2db      	uxtb	r3, r3
 8001bf2:	2b02      	cmp	r3, #2
 8001bf4:	d008      	beq.n	8001c08 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2280      	movs	r2, #128	; 0x80
 8001bfa:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2200      	movs	r2, #0
 8001c00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001c04:	2301      	movs	r3, #1
 8001c06:	e052      	b.n	8001cae <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	681a      	ldr	r2, [r3, #0]
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f022 0216 	bic.w	r2, r2, #22
 8001c16:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	695a      	ldr	r2, [r3, #20]
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001c26:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d103      	bne.n	8001c38 <HAL_DMA_Abort+0x62>
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d007      	beq.n	8001c48 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	681a      	ldr	r2, [r3, #0]
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f022 0208 	bic.w	r2, r2, #8
 8001c46:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	681a      	ldr	r2, [r3, #0]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f022 0201 	bic.w	r2, r2, #1
 8001c56:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c58:	e013      	b.n	8001c82 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001c5a:	f7ff fe7b 	bl	8001954 <HAL_GetTick>
 8001c5e:	4602      	mov	r2, r0
 8001c60:	68bb      	ldr	r3, [r7, #8]
 8001c62:	1ad3      	subs	r3, r2, r3
 8001c64:	2b05      	cmp	r3, #5
 8001c66:	d90c      	bls.n	8001c82 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2220      	movs	r2, #32
 8001c6c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2203      	movs	r2, #3
 8001c72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2200      	movs	r2, #0
 8001c7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001c7e:	2303      	movs	r3, #3
 8001c80:	e015      	b.n	8001cae <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f003 0301 	and.w	r3, r3, #1
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d1e4      	bne.n	8001c5a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c94:	223f      	movs	r2, #63	; 0x3f
 8001c96:	409a      	lsls	r2, r3
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2201      	movs	r2, #1
 8001ca0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001cac:	2300      	movs	r3, #0
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	3710      	adds	r7, #16
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}

08001cb6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001cb6:	b480      	push	{r7}
 8001cb8:	b083      	sub	sp, #12
 8001cba:	af00      	add	r7, sp, #0
 8001cbc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001cc4:	b2db      	uxtb	r3, r3
 8001cc6:	2b02      	cmp	r3, #2
 8001cc8:	d004      	beq.n	8001cd4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2280      	movs	r2, #128	; 0x80
 8001cce:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	e00c      	b.n	8001cee <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2205      	movs	r2, #5
 8001cd8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	681a      	ldr	r2, [r3, #0]
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f022 0201 	bic.w	r2, r2, #1
 8001cea:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001cec:	2300      	movs	r3, #0
}
 8001cee:	4618      	mov	r0, r3
 8001cf0:	370c      	adds	r7, #12
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf8:	4770      	bx	lr
	...

08001cfc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b089      	sub	sp, #36	; 0x24
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
 8001d04:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001d06:	2300      	movs	r3, #0
 8001d08:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d12:	2300      	movs	r3, #0
 8001d14:	61fb      	str	r3, [r7, #28]
 8001d16:	e16b      	b.n	8001ff0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001d18:	2201      	movs	r2, #1
 8001d1a:	69fb      	ldr	r3, [r7, #28]
 8001d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d20:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	697a      	ldr	r2, [r7, #20]
 8001d28:	4013      	ands	r3, r2
 8001d2a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d2c:	693a      	ldr	r2, [r7, #16]
 8001d2e:	697b      	ldr	r3, [r7, #20]
 8001d30:	429a      	cmp	r2, r3
 8001d32:	f040 815a 	bne.w	8001fea <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	f003 0303 	and.w	r3, r3, #3
 8001d3e:	2b01      	cmp	r3, #1
 8001d40:	d005      	beq.n	8001d4e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d4a:	2b02      	cmp	r3, #2
 8001d4c:	d130      	bne.n	8001db0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	689b      	ldr	r3, [r3, #8]
 8001d52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d54:	69fb      	ldr	r3, [r7, #28]
 8001d56:	005b      	lsls	r3, r3, #1
 8001d58:	2203      	movs	r2, #3
 8001d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5e:	43db      	mvns	r3, r3
 8001d60:	69ba      	ldr	r2, [r7, #24]
 8001d62:	4013      	ands	r3, r2
 8001d64:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	68da      	ldr	r2, [r3, #12]
 8001d6a:	69fb      	ldr	r3, [r7, #28]
 8001d6c:	005b      	lsls	r3, r3, #1
 8001d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d72:	69ba      	ldr	r2, [r7, #24]
 8001d74:	4313      	orrs	r3, r2
 8001d76:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	69ba      	ldr	r2, [r7, #24]
 8001d7c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d84:	2201      	movs	r2, #1
 8001d86:	69fb      	ldr	r3, [r7, #28]
 8001d88:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8c:	43db      	mvns	r3, r3
 8001d8e:	69ba      	ldr	r2, [r7, #24]
 8001d90:	4013      	ands	r3, r2
 8001d92:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	091b      	lsrs	r3, r3, #4
 8001d9a:	f003 0201 	and.w	r2, r3, #1
 8001d9e:	69fb      	ldr	r3, [r7, #28]
 8001da0:	fa02 f303 	lsl.w	r3, r2, r3
 8001da4:	69ba      	ldr	r2, [r7, #24]
 8001da6:	4313      	orrs	r3, r2
 8001da8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	69ba      	ldr	r2, [r7, #24]
 8001dae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	f003 0303 	and.w	r3, r3, #3
 8001db8:	2b03      	cmp	r3, #3
 8001dba:	d017      	beq.n	8001dec <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	68db      	ldr	r3, [r3, #12]
 8001dc0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001dc2:	69fb      	ldr	r3, [r7, #28]
 8001dc4:	005b      	lsls	r3, r3, #1
 8001dc6:	2203      	movs	r2, #3
 8001dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dcc:	43db      	mvns	r3, r3
 8001dce:	69ba      	ldr	r2, [r7, #24]
 8001dd0:	4013      	ands	r3, r2
 8001dd2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	689a      	ldr	r2, [r3, #8]
 8001dd8:	69fb      	ldr	r3, [r7, #28]
 8001dda:	005b      	lsls	r3, r3, #1
 8001ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8001de0:	69ba      	ldr	r2, [r7, #24]
 8001de2:	4313      	orrs	r3, r2
 8001de4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	69ba      	ldr	r2, [r7, #24]
 8001dea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	f003 0303 	and.w	r3, r3, #3
 8001df4:	2b02      	cmp	r3, #2
 8001df6:	d123      	bne.n	8001e40 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001df8:	69fb      	ldr	r3, [r7, #28]
 8001dfa:	08da      	lsrs	r2, r3, #3
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	3208      	adds	r2, #8
 8001e00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e04:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001e06:	69fb      	ldr	r3, [r7, #28]
 8001e08:	f003 0307 	and.w	r3, r3, #7
 8001e0c:	009b      	lsls	r3, r3, #2
 8001e0e:	220f      	movs	r2, #15
 8001e10:	fa02 f303 	lsl.w	r3, r2, r3
 8001e14:	43db      	mvns	r3, r3
 8001e16:	69ba      	ldr	r2, [r7, #24]
 8001e18:	4013      	ands	r3, r2
 8001e1a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	691a      	ldr	r2, [r3, #16]
 8001e20:	69fb      	ldr	r3, [r7, #28]
 8001e22:	f003 0307 	and.w	r3, r3, #7
 8001e26:	009b      	lsls	r3, r3, #2
 8001e28:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2c:	69ba      	ldr	r2, [r7, #24]
 8001e2e:	4313      	orrs	r3, r2
 8001e30:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e32:	69fb      	ldr	r3, [r7, #28]
 8001e34:	08da      	lsrs	r2, r3, #3
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	3208      	adds	r2, #8
 8001e3a:	69b9      	ldr	r1, [r7, #24]
 8001e3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e46:	69fb      	ldr	r3, [r7, #28]
 8001e48:	005b      	lsls	r3, r3, #1
 8001e4a:	2203      	movs	r2, #3
 8001e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e50:	43db      	mvns	r3, r3
 8001e52:	69ba      	ldr	r2, [r7, #24]
 8001e54:	4013      	ands	r3, r2
 8001e56:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	f003 0203 	and.w	r2, r3, #3
 8001e60:	69fb      	ldr	r3, [r7, #28]
 8001e62:	005b      	lsls	r3, r3, #1
 8001e64:	fa02 f303 	lsl.w	r3, r2, r3
 8001e68:	69ba      	ldr	r2, [r7, #24]
 8001e6a:	4313      	orrs	r3, r2
 8001e6c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	69ba      	ldr	r2, [r7, #24]
 8001e72:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	f000 80b4 	beq.w	8001fea <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e82:	2300      	movs	r3, #0
 8001e84:	60fb      	str	r3, [r7, #12]
 8001e86:	4b60      	ldr	r3, [pc, #384]	; (8002008 <HAL_GPIO_Init+0x30c>)
 8001e88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e8a:	4a5f      	ldr	r2, [pc, #380]	; (8002008 <HAL_GPIO_Init+0x30c>)
 8001e8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e90:	6453      	str	r3, [r2, #68]	; 0x44
 8001e92:	4b5d      	ldr	r3, [pc, #372]	; (8002008 <HAL_GPIO_Init+0x30c>)
 8001e94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e9a:	60fb      	str	r3, [r7, #12]
 8001e9c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e9e:	4a5b      	ldr	r2, [pc, #364]	; (800200c <HAL_GPIO_Init+0x310>)
 8001ea0:	69fb      	ldr	r3, [r7, #28]
 8001ea2:	089b      	lsrs	r3, r3, #2
 8001ea4:	3302      	adds	r3, #2
 8001ea6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001eaa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001eac:	69fb      	ldr	r3, [r7, #28]
 8001eae:	f003 0303 	and.w	r3, r3, #3
 8001eb2:	009b      	lsls	r3, r3, #2
 8001eb4:	220f      	movs	r2, #15
 8001eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eba:	43db      	mvns	r3, r3
 8001ebc:	69ba      	ldr	r2, [r7, #24]
 8001ebe:	4013      	ands	r3, r2
 8001ec0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	4a52      	ldr	r2, [pc, #328]	; (8002010 <HAL_GPIO_Init+0x314>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d02b      	beq.n	8001f22 <HAL_GPIO_Init+0x226>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	4a51      	ldr	r2, [pc, #324]	; (8002014 <HAL_GPIO_Init+0x318>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d025      	beq.n	8001f1e <HAL_GPIO_Init+0x222>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	4a50      	ldr	r2, [pc, #320]	; (8002018 <HAL_GPIO_Init+0x31c>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d01f      	beq.n	8001f1a <HAL_GPIO_Init+0x21e>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	4a4f      	ldr	r2, [pc, #316]	; (800201c <HAL_GPIO_Init+0x320>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d019      	beq.n	8001f16 <HAL_GPIO_Init+0x21a>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	4a4e      	ldr	r2, [pc, #312]	; (8002020 <HAL_GPIO_Init+0x324>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d013      	beq.n	8001f12 <HAL_GPIO_Init+0x216>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	4a4d      	ldr	r2, [pc, #308]	; (8002024 <HAL_GPIO_Init+0x328>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d00d      	beq.n	8001f0e <HAL_GPIO_Init+0x212>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	4a4c      	ldr	r2, [pc, #304]	; (8002028 <HAL_GPIO_Init+0x32c>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d007      	beq.n	8001f0a <HAL_GPIO_Init+0x20e>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	4a4b      	ldr	r2, [pc, #300]	; (800202c <HAL_GPIO_Init+0x330>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d101      	bne.n	8001f06 <HAL_GPIO_Init+0x20a>
 8001f02:	2307      	movs	r3, #7
 8001f04:	e00e      	b.n	8001f24 <HAL_GPIO_Init+0x228>
 8001f06:	2308      	movs	r3, #8
 8001f08:	e00c      	b.n	8001f24 <HAL_GPIO_Init+0x228>
 8001f0a:	2306      	movs	r3, #6
 8001f0c:	e00a      	b.n	8001f24 <HAL_GPIO_Init+0x228>
 8001f0e:	2305      	movs	r3, #5
 8001f10:	e008      	b.n	8001f24 <HAL_GPIO_Init+0x228>
 8001f12:	2304      	movs	r3, #4
 8001f14:	e006      	b.n	8001f24 <HAL_GPIO_Init+0x228>
 8001f16:	2303      	movs	r3, #3
 8001f18:	e004      	b.n	8001f24 <HAL_GPIO_Init+0x228>
 8001f1a:	2302      	movs	r3, #2
 8001f1c:	e002      	b.n	8001f24 <HAL_GPIO_Init+0x228>
 8001f1e:	2301      	movs	r3, #1
 8001f20:	e000      	b.n	8001f24 <HAL_GPIO_Init+0x228>
 8001f22:	2300      	movs	r3, #0
 8001f24:	69fa      	ldr	r2, [r7, #28]
 8001f26:	f002 0203 	and.w	r2, r2, #3
 8001f2a:	0092      	lsls	r2, r2, #2
 8001f2c:	4093      	lsls	r3, r2
 8001f2e:	69ba      	ldr	r2, [r7, #24]
 8001f30:	4313      	orrs	r3, r2
 8001f32:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f34:	4935      	ldr	r1, [pc, #212]	; (800200c <HAL_GPIO_Init+0x310>)
 8001f36:	69fb      	ldr	r3, [r7, #28]
 8001f38:	089b      	lsrs	r3, r3, #2
 8001f3a:	3302      	adds	r3, #2
 8001f3c:	69ba      	ldr	r2, [r7, #24]
 8001f3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f42:	4b3b      	ldr	r3, [pc, #236]	; (8002030 <HAL_GPIO_Init+0x334>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f48:	693b      	ldr	r3, [r7, #16]
 8001f4a:	43db      	mvns	r3, r3
 8001f4c:	69ba      	ldr	r2, [r7, #24]
 8001f4e:	4013      	ands	r3, r2
 8001f50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d003      	beq.n	8001f66 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001f5e:	69ba      	ldr	r2, [r7, #24]
 8001f60:	693b      	ldr	r3, [r7, #16]
 8001f62:	4313      	orrs	r3, r2
 8001f64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f66:	4a32      	ldr	r2, [pc, #200]	; (8002030 <HAL_GPIO_Init+0x334>)
 8001f68:	69bb      	ldr	r3, [r7, #24]
 8001f6a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001f6c:	4b30      	ldr	r3, [pc, #192]	; (8002030 <HAL_GPIO_Init+0x334>)
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f72:	693b      	ldr	r3, [r7, #16]
 8001f74:	43db      	mvns	r3, r3
 8001f76:	69ba      	ldr	r2, [r7, #24]
 8001f78:	4013      	ands	r3, r2
 8001f7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d003      	beq.n	8001f90 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001f88:	69ba      	ldr	r2, [r7, #24]
 8001f8a:	693b      	ldr	r3, [r7, #16]
 8001f8c:	4313      	orrs	r3, r2
 8001f8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f90:	4a27      	ldr	r2, [pc, #156]	; (8002030 <HAL_GPIO_Init+0x334>)
 8001f92:	69bb      	ldr	r3, [r7, #24]
 8001f94:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f96:	4b26      	ldr	r3, [pc, #152]	; (8002030 <HAL_GPIO_Init+0x334>)
 8001f98:	689b      	ldr	r3, [r3, #8]
 8001f9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f9c:	693b      	ldr	r3, [r7, #16]
 8001f9e:	43db      	mvns	r3, r3
 8001fa0:	69ba      	ldr	r2, [r7, #24]
 8001fa2:	4013      	ands	r3, r2
 8001fa4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d003      	beq.n	8001fba <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001fb2:	69ba      	ldr	r2, [r7, #24]
 8001fb4:	693b      	ldr	r3, [r7, #16]
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001fba:	4a1d      	ldr	r2, [pc, #116]	; (8002030 <HAL_GPIO_Init+0x334>)
 8001fbc:	69bb      	ldr	r3, [r7, #24]
 8001fbe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001fc0:	4b1b      	ldr	r3, [pc, #108]	; (8002030 <HAL_GPIO_Init+0x334>)
 8001fc2:	68db      	ldr	r3, [r3, #12]
 8001fc4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fc6:	693b      	ldr	r3, [r7, #16]
 8001fc8:	43db      	mvns	r3, r3
 8001fca:	69ba      	ldr	r2, [r7, #24]
 8001fcc:	4013      	ands	r3, r2
 8001fce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d003      	beq.n	8001fe4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001fdc:	69ba      	ldr	r2, [r7, #24]
 8001fde:	693b      	ldr	r3, [r7, #16]
 8001fe0:	4313      	orrs	r3, r2
 8001fe2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001fe4:	4a12      	ldr	r2, [pc, #72]	; (8002030 <HAL_GPIO_Init+0x334>)
 8001fe6:	69bb      	ldr	r3, [r7, #24]
 8001fe8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fea:	69fb      	ldr	r3, [r7, #28]
 8001fec:	3301      	adds	r3, #1
 8001fee:	61fb      	str	r3, [r7, #28]
 8001ff0:	69fb      	ldr	r3, [r7, #28]
 8001ff2:	2b0f      	cmp	r3, #15
 8001ff4:	f67f ae90 	bls.w	8001d18 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ff8:	bf00      	nop
 8001ffa:	bf00      	nop
 8001ffc:	3724      	adds	r7, #36	; 0x24
 8001ffe:	46bd      	mov	sp, r7
 8002000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002004:	4770      	bx	lr
 8002006:	bf00      	nop
 8002008:	40023800 	.word	0x40023800
 800200c:	40013800 	.word	0x40013800
 8002010:	40020000 	.word	0x40020000
 8002014:	40020400 	.word	0x40020400
 8002018:	40020800 	.word	0x40020800
 800201c:	40020c00 	.word	0x40020c00
 8002020:	40021000 	.word	0x40021000
 8002024:	40021400 	.word	0x40021400
 8002028:	40021800 	.word	0x40021800
 800202c:	40021c00 	.word	0x40021c00
 8002030:	40013c00 	.word	0x40013c00

08002034 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002034:	b480      	push	{r7}
 8002036:	b083      	sub	sp, #12
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
 800203c:	460b      	mov	r3, r1
 800203e:	807b      	strh	r3, [r7, #2]
 8002040:	4613      	mov	r3, r2
 8002042:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002044:	787b      	ldrb	r3, [r7, #1]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d003      	beq.n	8002052 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800204a:	887a      	ldrh	r2, [r7, #2]
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002050:	e003      	b.n	800205a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002052:	887b      	ldrh	r3, [r7, #2]
 8002054:	041a      	lsls	r2, r3, #16
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	619a      	str	r2, [r3, #24]
}
 800205a:	bf00      	nop
 800205c:	370c      	adds	r7, #12
 800205e:	46bd      	mov	sp, r7
 8002060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002064:	4770      	bx	lr
	...

08002068 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b084      	sub	sp, #16
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d101      	bne.n	800207a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002076:	2301      	movs	r3, #1
 8002078:	e12b      	b.n	80022d2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002080:	b2db      	uxtb	r3, r3
 8002082:	2b00      	cmp	r3, #0
 8002084:	d106      	bne.n	8002094 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2200      	movs	r2, #0
 800208a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800208e:	6878      	ldr	r0, [r7, #4]
 8002090:	f7ff fabc 	bl	800160c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2224      	movs	r2, #36	; 0x24
 8002098:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	681a      	ldr	r2, [r3, #0]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f022 0201 	bic.w	r2, r2, #1
 80020aa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	681a      	ldr	r2, [r3, #0]
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80020ba:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	681a      	ldr	r2, [r3, #0]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80020ca:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80020cc:	f001 f864 	bl	8003198 <HAL_RCC_GetPCLK1Freq>
 80020d0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	4a81      	ldr	r2, [pc, #516]	; (80022dc <HAL_I2C_Init+0x274>)
 80020d8:	4293      	cmp	r3, r2
 80020da:	d807      	bhi.n	80020ec <HAL_I2C_Init+0x84>
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	4a80      	ldr	r2, [pc, #512]	; (80022e0 <HAL_I2C_Init+0x278>)
 80020e0:	4293      	cmp	r3, r2
 80020e2:	bf94      	ite	ls
 80020e4:	2301      	movls	r3, #1
 80020e6:	2300      	movhi	r3, #0
 80020e8:	b2db      	uxtb	r3, r3
 80020ea:	e006      	b.n	80020fa <HAL_I2C_Init+0x92>
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	4a7d      	ldr	r2, [pc, #500]	; (80022e4 <HAL_I2C_Init+0x27c>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	bf94      	ite	ls
 80020f4:	2301      	movls	r3, #1
 80020f6:	2300      	movhi	r3, #0
 80020f8:	b2db      	uxtb	r3, r3
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d001      	beq.n	8002102 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80020fe:	2301      	movs	r3, #1
 8002100:	e0e7      	b.n	80022d2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	4a78      	ldr	r2, [pc, #480]	; (80022e8 <HAL_I2C_Init+0x280>)
 8002106:	fba2 2303 	umull	r2, r3, r2, r3
 800210a:	0c9b      	lsrs	r3, r3, #18
 800210c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	68ba      	ldr	r2, [r7, #8]
 800211e:	430a      	orrs	r2, r1
 8002120:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	6a1b      	ldr	r3, [r3, #32]
 8002128:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	4a6a      	ldr	r2, [pc, #424]	; (80022dc <HAL_I2C_Init+0x274>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d802      	bhi.n	800213c <HAL_I2C_Init+0xd4>
 8002136:	68bb      	ldr	r3, [r7, #8]
 8002138:	3301      	adds	r3, #1
 800213a:	e009      	b.n	8002150 <HAL_I2C_Init+0xe8>
 800213c:	68bb      	ldr	r3, [r7, #8]
 800213e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002142:	fb02 f303 	mul.w	r3, r2, r3
 8002146:	4a69      	ldr	r2, [pc, #420]	; (80022ec <HAL_I2C_Init+0x284>)
 8002148:	fba2 2303 	umull	r2, r3, r2, r3
 800214c:	099b      	lsrs	r3, r3, #6
 800214e:	3301      	adds	r3, #1
 8002150:	687a      	ldr	r2, [r7, #4]
 8002152:	6812      	ldr	r2, [r2, #0]
 8002154:	430b      	orrs	r3, r1
 8002156:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	69db      	ldr	r3, [r3, #28]
 800215e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002162:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	495c      	ldr	r1, [pc, #368]	; (80022dc <HAL_I2C_Init+0x274>)
 800216c:	428b      	cmp	r3, r1
 800216e:	d819      	bhi.n	80021a4 <HAL_I2C_Init+0x13c>
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	1e59      	subs	r1, r3, #1
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	005b      	lsls	r3, r3, #1
 800217a:	fbb1 f3f3 	udiv	r3, r1, r3
 800217e:	1c59      	adds	r1, r3, #1
 8002180:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002184:	400b      	ands	r3, r1
 8002186:	2b00      	cmp	r3, #0
 8002188:	d00a      	beq.n	80021a0 <HAL_I2C_Init+0x138>
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	1e59      	subs	r1, r3, #1
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	005b      	lsls	r3, r3, #1
 8002194:	fbb1 f3f3 	udiv	r3, r1, r3
 8002198:	3301      	adds	r3, #1
 800219a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800219e:	e051      	b.n	8002244 <HAL_I2C_Init+0x1dc>
 80021a0:	2304      	movs	r3, #4
 80021a2:	e04f      	b.n	8002244 <HAL_I2C_Init+0x1dc>
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	689b      	ldr	r3, [r3, #8]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d111      	bne.n	80021d0 <HAL_I2C_Init+0x168>
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	1e58      	subs	r0, r3, #1
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6859      	ldr	r1, [r3, #4]
 80021b4:	460b      	mov	r3, r1
 80021b6:	005b      	lsls	r3, r3, #1
 80021b8:	440b      	add	r3, r1
 80021ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80021be:	3301      	adds	r3, #1
 80021c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	bf0c      	ite	eq
 80021c8:	2301      	moveq	r3, #1
 80021ca:	2300      	movne	r3, #0
 80021cc:	b2db      	uxtb	r3, r3
 80021ce:	e012      	b.n	80021f6 <HAL_I2C_Init+0x18e>
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	1e58      	subs	r0, r3, #1
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6859      	ldr	r1, [r3, #4]
 80021d8:	460b      	mov	r3, r1
 80021da:	009b      	lsls	r3, r3, #2
 80021dc:	440b      	add	r3, r1
 80021de:	0099      	lsls	r1, r3, #2
 80021e0:	440b      	add	r3, r1
 80021e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80021e6:	3301      	adds	r3, #1
 80021e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	bf0c      	ite	eq
 80021f0:	2301      	moveq	r3, #1
 80021f2:	2300      	movne	r3, #0
 80021f4:	b2db      	uxtb	r3, r3
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d001      	beq.n	80021fe <HAL_I2C_Init+0x196>
 80021fa:	2301      	movs	r3, #1
 80021fc:	e022      	b.n	8002244 <HAL_I2C_Init+0x1dc>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	689b      	ldr	r3, [r3, #8]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d10e      	bne.n	8002224 <HAL_I2C_Init+0x1bc>
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	1e58      	subs	r0, r3, #1
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6859      	ldr	r1, [r3, #4]
 800220e:	460b      	mov	r3, r1
 8002210:	005b      	lsls	r3, r3, #1
 8002212:	440b      	add	r3, r1
 8002214:	fbb0 f3f3 	udiv	r3, r0, r3
 8002218:	3301      	adds	r3, #1
 800221a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800221e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002222:	e00f      	b.n	8002244 <HAL_I2C_Init+0x1dc>
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	1e58      	subs	r0, r3, #1
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6859      	ldr	r1, [r3, #4]
 800222c:	460b      	mov	r3, r1
 800222e:	009b      	lsls	r3, r3, #2
 8002230:	440b      	add	r3, r1
 8002232:	0099      	lsls	r1, r3, #2
 8002234:	440b      	add	r3, r1
 8002236:	fbb0 f3f3 	udiv	r3, r0, r3
 800223a:	3301      	adds	r3, #1
 800223c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002240:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002244:	6879      	ldr	r1, [r7, #4]
 8002246:	6809      	ldr	r1, [r1, #0]
 8002248:	4313      	orrs	r3, r2
 800224a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	69da      	ldr	r2, [r3, #28]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6a1b      	ldr	r3, [r3, #32]
 800225e:	431a      	orrs	r2, r3
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	430a      	orrs	r2, r1
 8002266:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	689b      	ldr	r3, [r3, #8]
 800226e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002272:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002276:	687a      	ldr	r2, [r7, #4]
 8002278:	6911      	ldr	r1, [r2, #16]
 800227a:	687a      	ldr	r2, [r7, #4]
 800227c:	68d2      	ldr	r2, [r2, #12]
 800227e:	4311      	orrs	r1, r2
 8002280:	687a      	ldr	r2, [r7, #4]
 8002282:	6812      	ldr	r2, [r2, #0]
 8002284:	430b      	orrs	r3, r1
 8002286:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	68db      	ldr	r3, [r3, #12]
 800228e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	695a      	ldr	r2, [r3, #20]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	699b      	ldr	r3, [r3, #24]
 800229a:	431a      	orrs	r2, r3
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	430a      	orrs	r2, r1
 80022a2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	681a      	ldr	r2, [r3, #0]
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f042 0201 	orr.w	r2, r2, #1
 80022b2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2200      	movs	r2, #0
 80022b8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2220      	movs	r2, #32
 80022be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2200      	movs	r2, #0
 80022c6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2200      	movs	r2, #0
 80022cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80022d0:	2300      	movs	r3, #0
}
 80022d2:	4618      	mov	r0, r3
 80022d4:	3710      	adds	r7, #16
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}
 80022da:	bf00      	nop
 80022dc:	000186a0 	.word	0x000186a0
 80022e0:	001e847f 	.word	0x001e847f
 80022e4:	003d08ff 	.word	0x003d08ff
 80022e8:	431bde83 	.word	0x431bde83
 80022ec:	10624dd3 	.word	0x10624dd3

080022f0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b088      	sub	sp, #32
 80022f4:	af02      	add	r7, sp, #8
 80022f6:	60f8      	str	r0, [r7, #12]
 80022f8:	607a      	str	r2, [r7, #4]
 80022fa:	461a      	mov	r2, r3
 80022fc:	460b      	mov	r3, r1
 80022fe:	817b      	strh	r3, [r7, #10]
 8002300:	4613      	mov	r3, r2
 8002302:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002304:	f7ff fb26 	bl	8001954 <HAL_GetTick>
 8002308:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002310:	b2db      	uxtb	r3, r3
 8002312:	2b20      	cmp	r3, #32
 8002314:	f040 80e0 	bne.w	80024d8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002318:	697b      	ldr	r3, [r7, #20]
 800231a:	9300      	str	r3, [sp, #0]
 800231c:	2319      	movs	r3, #25
 800231e:	2201      	movs	r2, #1
 8002320:	4970      	ldr	r1, [pc, #448]	; (80024e4 <HAL_I2C_Master_Transmit+0x1f4>)
 8002322:	68f8      	ldr	r0, [r7, #12]
 8002324:	f000 f964 	bl	80025f0 <I2C_WaitOnFlagUntilTimeout>
 8002328:	4603      	mov	r3, r0
 800232a:	2b00      	cmp	r3, #0
 800232c:	d001      	beq.n	8002332 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800232e:	2302      	movs	r3, #2
 8002330:	e0d3      	b.n	80024da <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002338:	2b01      	cmp	r3, #1
 800233a:	d101      	bne.n	8002340 <HAL_I2C_Master_Transmit+0x50>
 800233c:	2302      	movs	r3, #2
 800233e:	e0cc      	b.n	80024da <HAL_I2C_Master_Transmit+0x1ea>
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	2201      	movs	r2, #1
 8002344:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f003 0301 	and.w	r3, r3, #1
 8002352:	2b01      	cmp	r3, #1
 8002354:	d007      	beq.n	8002366 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	681a      	ldr	r2, [r3, #0]
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f042 0201 	orr.w	r2, r2, #1
 8002364:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	681a      	ldr	r2, [r3, #0]
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002374:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	2221      	movs	r2, #33	; 0x21
 800237a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	2210      	movs	r2, #16
 8002382:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	2200      	movs	r2, #0
 800238a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	687a      	ldr	r2, [r7, #4]
 8002390:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	893a      	ldrh	r2, [r7, #8]
 8002396:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800239c:	b29a      	uxth	r2, r3
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	4a50      	ldr	r2, [pc, #320]	; (80024e8 <HAL_I2C_Master_Transmit+0x1f8>)
 80023a6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80023a8:	8979      	ldrh	r1, [r7, #10]
 80023aa:	697b      	ldr	r3, [r7, #20]
 80023ac:	6a3a      	ldr	r2, [r7, #32]
 80023ae:	68f8      	ldr	r0, [r7, #12]
 80023b0:	f000 f89c 	bl	80024ec <I2C_MasterRequestWrite>
 80023b4:	4603      	mov	r3, r0
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d001      	beq.n	80023be <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80023ba:	2301      	movs	r3, #1
 80023bc:	e08d      	b.n	80024da <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023be:	2300      	movs	r3, #0
 80023c0:	613b      	str	r3, [r7, #16]
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	695b      	ldr	r3, [r3, #20]
 80023c8:	613b      	str	r3, [r7, #16]
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	699b      	ldr	r3, [r3, #24]
 80023d0:	613b      	str	r3, [r7, #16]
 80023d2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80023d4:	e066      	b.n	80024a4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023d6:	697a      	ldr	r2, [r7, #20]
 80023d8:	6a39      	ldr	r1, [r7, #32]
 80023da:	68f8      	ldr	r0, [r7, #12]
 80023dc:	f000 f9de 	bl	800279c <I2C_WaitOnTXEFlagUntilTimeout>
 80023e0:	4603      	mov	r3, r0
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d00d      	beq.n	8002402 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ea:	2b04      	cmp	r3, #4
 80023ec:	d107      	bne.n	80023fe <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	681a      	ldr	r2, [r3, #0]
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023fc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
 8002400:	e06b      	b.n	80024da <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002406:	781a      	ldrb	r2, [r3, #0]
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002412:	1c5a      	adds	r2, r3, #1
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800241c:	b29b      	uxth	r3, r3
 800241e:	3b01      	subs	r3, #1
 8002420:	b29a      	uxth	r2, r3
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800242a:	3b01      	subs	r3, #1
 800242c:	b29a      	uxth	r2, r3
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	695b      	ldr	r3, [r3, #20]
 8002438:	f003 0304 	and.w	r3, r3, #4
 800243c:	2b04      	cmp	r3, #4
 800243e:	d11b      	bne.n	8002478 <HAL_I2C_Master_Transmit+0x188>
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002444:	2b00      	cmp	r3, #0
 8002446:	d017      	beq.n	8002478 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800244c:	781a      	ldrb	r2, [r3, #0]
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002458:	1c5a      	adds	r2, r3, #1
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002462:	b29b      	uxth	r3, r3
 8002464:	3b01      	subs	r3, #1
 8002466:	b29a      	uxth	r2, r3
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002470:	3b01      	subs	r3, #1
 8002472:	b29a      	uxth	r2, r3
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002478:	697a      	ldr	r2, [r7, #20]
 800247a:	6a39      	ldr	r1, [r7, #32]
 800247c:	68f8      	ldr	r0, [r7, #12]
 800247e:	f000 f9ce 	bl	800281e <I2C_WaitOnBTFFlagUntilTimeout>
 8002482:	4603      	mov	r3, r0
 8002484:	2b00      	cmp	r3, #0
 8002486:	d00d      	beq.n	80024a4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800248c:	2b04      	cmp	r3, #4
 800248e:	d107      	bne.n	80024a0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	681a      	ldr	r2, [r3, #0]
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800249e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80024a0:	2301      	movs	r3, #1
 80024a2:	e01a      	b.n	80024da <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d194      	bne.n	80023d6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	681a      	ldr	r2, [r3, #0]
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	2220      	movs	r2, #32
 80024c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	2200      	movs	r2, #0
 80024c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	2200      	movs	r2, #0
 80024d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80024d4:	2300      	movs	r3, #0
 80024d6:	e000      	b.n	80024da <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80024d8:	2302      	movs	r3, #2
  }
}
 80024da:	4618      	mov	r0, r3
 80024dc:	3718      	adds	r7, #24
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}
 80024e2:	bf00      	nop
 80024e4:	00100002 	.word	0x00100002
 80024e8:	ffff0000 	.word	0xffff0000

080024ec <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b088      	sub	sp, #32
 80024f0:	af02      	add	r7, sp, #8
 80024f2:	60f8      	str	r0, [r7, #12]
 80024f4:	607a      	str	r2, [r7, #4]
 80024f6:	603b      	str	r3, [r7, #0]
 80024f8:	460b      	mov	r3, r1
 80024fa:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002500:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	2b08      	cmp	r3, #8
 8002506:	d006      	beq.n	8002516 <I2C_MasterRequestWrite+0x2a>
 8002508:	697b      	ldr	r3, [r7, #20]
 800250a:	2b01      	cmp	r3, #1
 800250c:	d003      	beq.n	8002516 <I2C_MasterRequestWrite+0x2a>
 800250e:	697b      	ldr	r3, [r7, #20]
 8002510:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002514:	d108      	bne.n	8002528 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	681a      	ldr	r2, [r3, #0]
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002524:	601a      	str	r2, [r3, #0]
 8002526:	e00b      	b.n	8002540 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800252c:	2b12      	cmp	r3, #18
 800252e:	d107      	bne.n	8002540 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	681a      	ldr	r2, [r3, #0]
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800253e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	9300      	str	r3, [sp, #0]
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2200      	movs	r2, #0
 8002548:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800254c:	68f8      	ldr	r0, [r7, #12]
 800254e:	f000 f84f 	bl	80025f0 <I2C_WaitOnFlagUntilTimeout>
 8002552:	4603      	mov	r3, r0
 8002554:	2b00      	cmp	r3, #0
 8002556:	d00d      	beq.n	8002574 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002562:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002566:	d103      	bne.n	8002570 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800256e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002570:	2303      	movs	r3, #3
 8002572:	e035      	b.n	80025e0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	691b      	ldr	r3, [r3, #16]
 8002578:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800257c:	d108      	bne.n	8002590 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800257e:	897b      	ldrh	r3, [r7, #10]
 8002580:	b2db      	uxtb	r3, r3
 8002582:	461a      	mov	r2, r3
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800258c:	611a      	str	r2, [r3, #16]
 800258e:	e01b      	b.n	80025c8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002590:	897b      	ldrh	r3, [r7, #10]
 8002592:	11db      	asrs	r3, r3, #7
 8002594:	b2db      	uxtb	r3, r3
 8002596:	f003 0306 	and.w	r3, r3, #6
 800259a:	b2db      	uxtb	r3, r3
 800259c:	f063 030f 	orn	r3, r3, #15
 80025a0:	b2da      	uxtb	r2, r3
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	687a      	ldr	r2, [r7, #4]
 80025ac:	490e      	ldr	r1, [pc, #56]	; (80025e8 <I2C_MasterRequestWrite+0xfc>)
 80025ae:	68f8      	ldr	r0, [r7, #12]
 80025b0:	f000 f875 	bl	800269e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80025b4:	4603      	mov	r3, r0
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d001      	beq.n	80025be <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80025ba:	2301      	movs	r3, #1
 80025bc:	e010      	b.n	80025e0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80025be:	897b      	ldrh	r3, [r7, #10]
 80025c0:	b2da      	uxtb	r2, r3
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	687a      	ldr	r2, [r7, #4]
 80025cc:	4907      	ldr	r1, [pc, #28]	; (80025ec <I2C_MasterRequestWrite+0x100>)
 80025ce:	68f8      	ldr	r0, [r7, #12]
 80025d0:	f000 f865 	bl	800269e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80025d4:	4603      	mov	r3, r0
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d001      	beq.n	80025de <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80025da:	2301      	movs	r3, #1
 80025dc:	e000      	b.n	80025e0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80025de:	2300      	movs	r3, #0
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	3718      	adds	r7, #24
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}
 80025e8:	00010008 	.word	0x00010008
 80025ec:	00010002 	.word	0x00010002

080025f0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b084      	sub	sp, #16
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	60f8      	str	r0, [r7, #12]
 80025f8:	60b9      	str	r1, [r7, #8]
 80025fa:	603b      	str	r3, [r7, #0]
 80025fc:	4613      	mov	r3, r2
 80025fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002600:	e025      	b.n	800264e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002608:	d021      	beq.n	800264e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800260a:	f7ff f9a3 	bl	8001954 <HAL_GetTick>
 800260e:	4602      	mov	r2, r0
 8002610:	69bb      	ldr	r3, [r7, #24]
 8002612:	1ad3      	subs	r3, r2, r3
 8002614:	683a      	ldr	r2, [r7, #0]
 8002616:	429a      	cmp	r2, r3
 8002618:	d302      	bcc.n	8002620 <I2C_WaitOnFlagUntilTimeout+0x30>
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d116      	bne.n	800264e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	2200      	movs	r2, #0
 8002624:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	2220      	movs	r2, #32
 800262a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	2200      	movs	r2, #0
 8002632:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800263a:	f043 0220 	orr.w	r2, r3, #32
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	2200      	movs	r2, #0
 8002646:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800264a:	2301      	movs	r3, #1
 800264c:	e023      	b.n	8002696 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800264e:	68bb      	ldr	r3, [r7, #8]
 8002650:	0c1b      	lsrs	r3, r3, #16
 8002652:	b2db      	uxtb	r3, r3
 8002654:	2b01      	cmp	r3, #1
 8002656:	d10d      	bne.n	8002674 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	695b      	ldr	r3, [r3, #20]
 800265e:	43da      	mvns	r2, r3
 8002660:	68bb      	ldr	r3, [r7, #8]
 8002662:	4013      	ands	r3, r2
 8002664:	b29b      	uxth	r3, r3
 8002666:	2b00      	cmp	r3, #0
 8002668:	bf0c      	ite	eq
 800266a:	2301      	moveq	r3, #1
 800266c:	2300      	movne	r3, #0
 800266e:	b2db      	uxtb	r3, r3
 8002670:	461a      	mov	r2, r3
 8002672:	e00c      	b.n	800268e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	699b      	ldr	r3, [r3, #24]
 800267a:	43da      	mvns	r2, r3
 800267c:	68bb      	ldr	r3, [r7, #8]
 800267e:	4013      	ands	r3, r2
 8002680:	b29b      	uxth	r3, r3
 8002682:	2b00      	cmp	r3, #0
 8002684:	bf0c      	ite	eq
 8002686:	2301      	moveq	r3, #1
 8002688:	2300      	movne	r3, #0
 800268a:	b2db      	uxtb	r3, r3
 800268c:	461a      	mov	r2, r3
 800268e:	79fb      	ldrb	r3, [r7, #7]
 8002690:	429a      	cmp	r2, r3
 8002692:	d0b6      	beq.n	8002602 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002694:	2300      	movs	r3, #0
}
 8002696:	4618      	mov	r0, r3
 8002698:	3710      	adds	r7, #16
 800269a:	46bd      	mov	sp, r7
 800269c:	bd80      	pop	{r7, pc}

0800269e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800269e:	b580      	push	{r7, lr}
 80026a0:	b084      	sub	sp, #16
 80026a2:	af00      	add	r7, sp, #0
 80026a4:	60f8      	str	r0, [r7, #12]
 80026a6:	60b9      	str	r1, [r7, #8]
 80026a8:	607a      	str	r2, [r7, #4]
 80026aa:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80026ac:	e051      	b.n	8002752 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	695b      	ldr	r3, [r3, #20]
 80026b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026bc:	d123      	bne.n	8002706 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	681a      	ldr	r2, [r3, #0]
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026cc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80026d6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	2200      	movs	r2, #0
 80026dc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	2220      	movs	r2, #32
 80026e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	2200      	movs	r2, #0
 80026ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f2:	f043 0204 	orr.w	r2, r3, #4
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	2200      	movs	r2, #0
 80026fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002702:	2301      	movs	r3, #1
 8002704:	e046      	b.n	8002794 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800270c:	d021      	beq.n	8002752 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800270e:	f7ff f921 	bl	8001954 <HAL_GetTick>
 8002712:	4602      	mov	r2, r0
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	1ad3      	subs	r3, r2, r3
 8002718:	687a      	ldr	r2, [r7, #4]
 800271a:	429a      	cmp	r2, r3
 800271c:	d302      	bcc.n	8002724 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d116      	bne.n	8002752 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	2200      	movs	r2, #0
 8002728:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	2220      	movs	r2, #32
 800272e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	2200      	movs	r2, #0
 8002736:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800273e:	f043 0220 	orr.w	r2, r3, #32
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	2200      	movs	r2, #0
 800274a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800274e:	2301      	movs	r3, #1
 8002750:	e020      	b.n	8002794 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002752:	68bb      	ldr	r3, [r7, #8]
 8002754:	0c1b      	lsrs	r3, r3, #16
 8002756:	b2db      	uxtb	r3, r3
 8002758:	2b01      	cmp	r3, #1
 800275a:	d10c      	bne.n	8002776 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	695b      	ldr	r3, [r3, #20]
 8002762:	43da      	mvns	r2, r3
 8002764:	68bb      	ldr	r3, [r7, #8]
 8002766:	4013      	ands	r3, r2
 8002768:	b29b      	uxth	r3, r3
 800276a:	2b00      	cmp	r3, #0
 800276c:	bf14      	ite	ne
 800276e:	2301      	movne	r3, #1
 8002770:	2300      	moveq	r3, #0
 8002772:	b2db      	uxtb	r3, r3
 8002774:	e00b      	b.n	800278e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	699b      	ldr	r3, [r3, #24]
 800277c:	43da      	mvns	r2, r3
 800277e:	68bb      	ldr	r3, [r7, #8]
 8002780:	4013      	ands	r3, r2
 8002782:	b29b      	uxth	r3, r3
 8002784:	2b00      	cmp	r3, #0
 8002786:	bf14      	ite	ne
 8002788:	2301      	movne	r3, #1
 800278a:	2300      	moveq	r3, #0
 800278c:	b2db      	uxtb	r3, r3
 800278e:	2b00      	cmp	r3, #0
 8002790:	d18d      	bne.n	80026ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002792:	2300      	movs	r3, #0
}
 8002794:	4618      	mov	r0, r3
 8002796:	3710      	adds	r7, #16
 8002798:	46bd      	mov	sp, r7
 800279a:	bd80      	pop	{r7, pc}

0800279c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b084      	sub	sp, #16
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	60f8      	str	r0, [r7, #12]
 80027a4:	60b9      	str	r1, [r7, #8]
 80027a6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80027a8:	e02d      	b.n	8002806 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80027aa:	68f8      	ldr	r0, [r7, #12]
 80027ac:	f000 f878 	bl	80028a0 <I2C_IsAcknowledgeFailed>
 80027b0:	4603      	mov	r3, r0
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d001      	beq.n	80027ba <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80027b6:	2301      	movs	r3, #1
 80027b8:	e02d      	b.n	8002816 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027ba:	68bb      	ldr	r3, [r7, #8]
 80027bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80027c0:	d021      	beq.n	8002806 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027c2:	f7ff f8c7 	bl	8001954 <HAL_GetTick>
 80027c6:	4602      	mov	r2, r0
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	1ad3      	subs	r3, r2, r3
 80027cc:	68ba      	ldr	r2, [r7, #8]
 80027ce:	429a      	cmp	r2, r3
 80027d0:	d302      	bcc.n	80027d8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80027d2:	68bb      	ldr	r3, [r7, #8]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d116      	bne.n	8002806 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	2200      	movs	r2, #0
 80027dc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	2220      	movs	r2, #32
 80027e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	2200      	movs	r2, #0
 80027ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f2:	f043 0220 	orr.w	r2, r3, #32
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	2200      	movs	r2, #0
 80027fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002802:	2301      	movs	r3, #1
 8002804:	e007      	b.n	8002816 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	695b      	ldr	r3, [r3, #20]
 800280c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002810:	2b80      	cmp	r3, #128	; 0x80
 8002812:	d1ca      	bne.n	80027aa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002814:	2300      	movs	r3, #0
}
 8002816:	4618      	mov	r0, r3
 8002818:	3710      	adds	r7, #16
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}

0800281e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800281e:	b580      	push	{r7, lr}
 8002820:	b084      	sub	sp, #16
 8002822:	af00      	add	r7, sp, #0
 8002824:	60f8      	str	r0, [r7, #12]
 8002826:	60b9      	str	r1, [r7, #8]
 8002828:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800282a:	e02d      	b.n	8002888 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800282c:	68f8      	ldr	r0, [r7, #12]
 800282e:	f000 f837 	bl	80028a0 <I2C_IsAcknowledgeFailed>
 8002832:	4603      	mov	r3, r0
 8002834:	2b00      	cmp	r3, #0
 8002836:	d001      	beq.n	800283c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002838:	2301      	movs	r3, #1
 800283a:	e02d      	b.n	8002898 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800283c:	68bb      	ldr	r3, [r7, #8]
 800283e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002842:	d021      	beq.n	8002888 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002844:	f7ff f886 	bl	8001954 <HAL_GetTick>
 8002848:	4602      	mov	r2, r0
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	1ad3      	subs	r3, r2, r3
 800284e:	68ba      	ldr	r2, [r7, #8]
 8002850:	429a      	cmp	r2, r3
 8002852:	d302      	bcc.n	800285a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002854:	68bb      	ldr	r3, [r7, #8]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d116      	bne.n	8002888 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	2200      	movs	r2, #0
 800285e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	2220      	movs	r2, #32
 8002864:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	2200      	movs	r2, #0
 800286c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002874:	f043 0220 	orr.w	r2, r3, #32
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	2200      	movs	r2, #0
 8002880:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002884:	2301      	movs	r3, #1
 8002886:	e007      	b.n	8002898 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	695b      	ldr	r3, [r3, #20]
 800288e:	f003 0304 	and.w	r3, r3, #4
 8002892:	2b04      	cmp	r3, #4
 8002894:	d1ca      	bne.n	800282c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002896:	2300      	movs	r3, #0
}
 8002898:	4618      	mov	r0, r3
 800289a:	3710      	adds	r7, #16
 800289c:	46bd      	mov	sp, r7
 800289e:	bd80      	pop	{r7, pc}

080028a0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80028a0:	b480      	push	{r7}
 80028a2:	b083      	sub	sp, #12
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	695b      	ldr	r3, [r3, #20]
 80028ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028b6:	d11b      	bne.n	80028f0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80028c0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2200      	movs	r2, #0
 80028c6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2220      	movs	r2, #32
 80028cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2200      	movs	r2, #0
 80028d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028dc:	f043 0204 	orr.w	r2, r3, #4
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2200      	movs	r2, #0
 80028e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80028ec:	2301      	movs	r3, #1
 80028ee:	e000      	b.n	80028f2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80028f0:	2300      	movs	r3, #0
}
 80028f2:	4618      	mov	r0, r3
 80028f4:	370c      	adds	r7, #12
 80028f6:	46bd      	mov	sp, r7
 80028f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fc:	4770      	bx	lr
	...

08002900 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b086      	sub	sp, #24
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d101      	bne.n	8002912 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800290e:	2301      	movs	r3, #1
 8002910:	e264      	b.n	8002ddc <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f003 0301 	and.w	r3, r3, #1
 800291a:	2b00      	cmp	r3, #0
 800291c:	d075      	beq.n	8002a0a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800291e:	4ba3      	ldr	r3, [pc, #652]	; (8002bac <HAL_RCC_OscConfig+0x2ac>)
 8002920:	689b      	ldr	r3, [r3, #8]
 8002922:	f003 030c 	and.w	r3, r3, #12
 8002926:	2b04      	cmp	r3, #4
 8002928:	d00c      	beq.n	8002944 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800292a:	4ba0      	ldr	r3, [pc, #640]	; (8002bac <HAL_RCC_OscConfig+0x2ac>)
 800292c:	689b      	ldr	r3, [r3, #8]
 800292e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002932:	2b08      	cmp	r3, #8
 8002934:	d112      	bne.n	800295c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002936:	4b9d      	ldr	r3, [pc, #628]	; (8002bac <HAL_RCC_OscConfig+0x2ac>)
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800293e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002942:	d10b      	bne.n	800295c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002944:	4b99      	ldr	r3, [pc, #612]	; (8002bac <HAL_RCC_OscConfig+0x2ac>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800294c:	2b00      	cmp	r3, #0
 800294e:	d05b      	beq.n	8002a08 <HAL_RCC_OscConfig+0x108>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d157      	bne.n	8002a08 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002958:	2301      	movs	r3, #1
 800295a:	e23f      	b.n	8002ddc <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002964:	d106      	bne.n	8002974 <HAL_RCC_OscConfig+0x74>
 8002966:	4b91      	ldr	r3, [pc, #580]	; (8002bac <HAL_RCC_OscConfig+0x2ac>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4a90      	ldr	r2, [pc, #576]	; (8002bac <HAL_RCC_OscConfig+0x2ac>)
 800296c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002970:	6013      	str	r3, [r2, #0]
 8002972:	e01d      	b.n	80029b0 <HAL_RCC_OscConfig+0xb0>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800297c:	d10c      	bne.n	8002998 <HAL_RCC_OscConfig+0x98>
 800297e:	4b8b      	ldr	r3, [pc, #556]	; (8002bac <HAL_RCC_OscConfig+0x2ac>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4a8a      	ldr	r2, [pc, #552]	; (8002bac <HAL_RCC_OscConfig+0x2ac>)
 8002984:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002988:	6013      	str	r3, [r2, #0]
 800298a:	4b88      	ldr	r3, [pc, #544]	; (8002bac <HAL_RCC_OscConfig+0x2ac>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4a87      	ldr	r2, [pc, #540]	; (8002bac <HAL_RCC_OscConfig+0x2ac>)
 8002990:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002994:	6013      	str	r3, [r2, #0]
 8002996:	e00b      	b.n	80029b0 <HAL_RCC_OscConfig+0xb0>
 8002998:	4b84      	ldr	r3, [pc, #528]	; (8002bac <HAL_RCC_OscConfig+0x2ac>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a83      	ldr	r2, [pc, #524]	; (8002bac <HAL_RCC_OscConfig+0x2ac>)
 800299e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029a2:	6013      	str	r3, [r2, #0]
 80029a4:	4b81      	ldr	r3, [pc, #516]	; (8002bac <HAL_RCC_OscConfig+0x2ac>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4a80      	ldr	r2, [pc, #512]	; (8002bac <HAL_RCC_OscConfig+0x2ac>)
 80029aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d013      	beq.n	80029e0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029b8:	f7fe ffcc 	bl	8001954 <HAL_GetTick>
 80029bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029be:	e008      	b.n	80029d2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80029c0:	f7fe ffc8 	bl	8001954 <HAL_GetTick>
 80029c4:	4602      	mov	r2, r0
 80029c6:	693b      	ldr	r3, [r7, #16]
 80029c8:	1ad3      	subs	r3, r2, r3
 80029ca:	2b64      	cmp	r3, #100	; 0x64
 80029cc:	d901      	bls.n	80029d2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80029ce:	2303      	movs	r3, #3
 80029d0:	e204      	b.n	8002ddc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029d2:	4b76      	ldr	r3, [pc, #472]	; (8002bac <HAL_RCC_OscConfig+0x2ac>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d0f0      	beq.n	80029c0 <HAL_RCC_OscConfig+0xc0>
 80029de:	e014      	b.n	8002a0a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029e0:	f7fe ffb8 	bl	8001954 <HAL_GetTick>
 80029e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029e6:	e008      	b.n	80029fa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80029e8:	f7fe ffb4 	bl	8001954 <HAL_GetTick>
 80029ec:	4602      	mov	r2, r0
 80029ee:	693b      	ldr	r3, [r7, #16]
 80029f0:	1ad3      	subs	r3, r2, r3
 80029f2:	2b64      	cmp	r3, #100	; 0x64
 80029f4:	d901      	bls.n	80029fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80029f6:	2303      	movs	r3, #3
 80029f8:	e1f0      	b.n	8002ddc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029fa:	4b6c      	ldr	r3, [pc, #432]	; (8002bac <HAL_RCC_OscConfig+0x2ac>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d1f0      	bne.n	80029e8 <HAL_RCC_OscConfig+0xe8>
 8002a06:	e000      	b.n	8002a0a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f003 0302 	and.w	r3, r3, #2
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d063      	beq.n	8002ade <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002a16:	4b65      	ldr	r3, [pc, #404]	; (8002bac <HAL_RCC_OscConfig+0x2ac>)
 8002a18:	689b      	ldr	r3, [r3, #8]
 8002a1a:	f003 030c 	and.w	r3, r3, #12
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d00b      	beq.n	8002a3a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a22:	4b62      	ldr	r3, [pc, #392]	; (8002bac <HAL_RCC_OscConfig+0x2ac>)
 8002a24:	689b      	ldr	r3, [r3, #8]
 8002a26:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002a2a:	2b08      	cmp	r3, #8
 8002a2c:	d11c      	bne.n	8002a68 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a2e:	4b5f      	ldr	r3, [pc, #380]	; (8002bac <HAL_RCC_OscConfig+0x2ac>)
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d116      	bne.n	8002a68 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a3a:	4b5c      	ldr	r3, [pc, #368]	; (8002bac <HAL_RCC_OscConfig+0x2ac>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f003 0302 	and.w	r3, r3, #2
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d005      	beq.n	8002a52 <HAL_RCC_OscConfig+0x152>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	68db      	ldr	r3, [r3, #12]
 8002a4a:	2b01      	cmp	r3, #1
 8002a4c:	d001      	beq.n	8002a52 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	e1c4      	b.n	8002ddc <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a52:	4b56      	ldr	r3, [pc, #344]	; (8002bac <HAL_RCC_OscConfig+0x2ac>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	691b      	ldr	r3, [r3, #16]
 8002a5e:	00db      	lsls	r3, r3, #3
 8002a60:	4952      	ldr	r1, [pc, #328]	; (8002bac <HAL_RCC_OscConfig+0x2ac>)
 8002a62:	4313      	orrs	r3, r2
 8002a64:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a66:	e03a      	b.n	8002ade <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	68db      	ldr	r3, [r3, #12]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d020      	beq.n	8002ab2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a70:	4b4f      	ldr	r3, [pc, #316]	; (8002bb0 <HAL_RCC_OscConfig+0x2b0>)
 8002a72:	2201      	movs	r2, #1
 8002a74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a76:	f7fe ff6d 	bl	8001954 <HAL_GetTick>
 8002a7a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a7c:	e008      	b.n	8002a90 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a7e:	f7fe ff69 	bl	8001954 <HAL_GetTick>
 8002a82:	4602      	mov	r2, r0
 8002a84:	693b      	ldr	r3, [r7, #16]
 8002a86:	1ad3      	subs	r3, r2, r3
 8002a88:	2b02      	cmp	r3, #2
 8002a8a:	d901      	bls.n	8002a90 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002a8c:	2303      	movs	r3, #3
 8002a8e:	e1a5      	b.n	8002ddc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a90:	4b46      	ldr	r3, [pc, #280]	; (8002bac <HAL_RCC_OscConfig+0x2ac>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f003 0302 	and.w	r3, r3, #2
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d0f0      	beq.n	8002a7e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a9c:	4b43      	ldr	r3, [pc, #268]	; (8002bac <HAL_RCC_OscConfig+0x2ac>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	691b      	ldr	r3, [r3, #16]
 8002aa8:	00db      	lsls	r3, r3, #3
 8002aaa:	4940      	ldr	r1, [pc, #256]	; (8002bac <HAL_RCC_OscConfig+0x2ac>)
 8002aac:	4313      	orrs	r3, r2
 8002aae:	600b      	str	r3, [r1, #0]
 8002ab0:	e015      	b.n	8002ade <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ab2:	4b3f      	ldr	r3, [pc, #252]	; (8002bb0 <HAL_RCC_OscConfig+0x2b0>)
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ab8:	f7fe ff4c 	bl	8001954 <HAL_GetTick>
 8002abc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002abe:	e008      	b.n	8002ad2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ac0:	f7fe ff48 	bl	8001954 <HAL_GetTick>
 8002ac4:	4602      	mov	r2, r0
 8002ac6:	693b      	ldr	r3, [r7, #16]
 8002ac8:	1ad3      	subs	r3, r2, r3
 8002aca:	2b02      	cmp	r3, #2
 8002acc:	d901      	bls.n	8002ad2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002ace:	2303      	movs	r3, #3
 8002ad0:	e184      	b.n	8002ddc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ad2:	4b36      	ldr	r3, [pc, #216]	; (8002bac <HAL_RCC_OscConfig+0x2ac>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f003 0302 	and.w	r3, r3, #2
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d1f0      	bne.n	8002ac0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f003 0308 	and.w	r3, r3, #8
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d030      	beq.n	8002b4c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	695b      	ldr	r3, [r3, #20]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d016      	beq.n	8002b20 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002af2:	4b30      	ldr	r3, [pc, #192]	; (8002bb4 <HAL_RCC_OscConfig+0x2b4>)
 8002af4:	2201      	movs	r2, #1
 8002af6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002af8:	f7fe ff2c 	bl	8001954 <HAL_GetTick>
 8002afc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002afe:	e008      	b.n	8002b12 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b00:	f7fe ff28 	bl	8001954 <HAL_GetTick>
 8002b04:	4602      	mov	r2, r0
 8002b06:	693b      	ldr	r3, [r7, #16]
 8002b08:	1ad3      	subs	r3, r2, r3
 8002b0a:	2b02      	cmp	r3, #2
 8002b0c:	d901      	bls.n	8002b12 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002b0e:	2303      	movs	r3, #3
 8002b10:	e164      	b.n	8002ddc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b12:	4b26      	ldr	r3, [pc, #152]	; (8002bac <HAL_RCC_OscConfig+0x2ac>)
 8002b14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b16:	f003 0302 	and.w	r3, r3, #2
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d0f0      	beq.n	8002b00 <HAL_RCC_OscConfig+0x200>
 8002b1e:	e015      	b.n	8002b4c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b20:	4b24      	ldr	r3, [pc, #144]	; (8002bb4 <HAL_RCC_OscConfig+0x2b4>)
 8002b22:	2200      	movs	r2, #0
 8002b24:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b26:	f7fe ff15 	bl	8001954 <HAL_GetTick>
 8002b2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b2c:	e008      	b.n	8002b40 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b2e:	f7fe ff11 	bl	8001954 <HAL_GetTick>
 8002b32:	4602      	mov	r2, r0
 8002b34:	693b      	ldr	r3, [r7, #16]
 8002b36:	1ad3      	subs	r3, r2, r3
 8002b38:	2b02      	cmp	r3, #2
 8002b3a:	d901      	bls.n	8002b40 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002b3c:	2303      	movs	r3, #3
 8002b3e:	e14d      	b.n	8002ddc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b40:	4b1a      	ldr	r3, [pc, #104]	; (8002bac <HAL_RCC_OscConfig+0x2ac>)
 8002b42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b44:	f003 0302 	and.w	r3, r3, #2
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d1f0      	bne.n	8002b2e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f003 0304 	and.w	r3, r3, #4
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	f000 80a0 	beq.w	8002c9a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b5e:	4b13      	ldr	r3, [pc, #76]	; (8002bac <HAL_RCC_OscConfig+0x2ac>)
 8002b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d10f      	bne.n	8002b8a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	60bb      	str	r3, [r7, #8]
 8002b6e:	4b0f      	ldr	r3, [pc, #60]	; (8002bac <HAL_RCC_OscConfig+0x2ac>)
 8002b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b72:	4a0e      	ldr	r2, [pc, #56]	; (8002bac <HAL_RCC_OscConfig+0x2ac>)
 8002b74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b78:	6413      	str	r3, [r2, #64]	; 0x40
 8002b7a:	4b0c      	ldr	r3, [pc, #48]	; (8002bac <HAL_RCC_OscConfig+0x2ac>)
 8002b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b82:	60bb      	str	r3, [r7, #8]
 8002b84:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b86:	2301      	movs	r3, #1
 8002b88:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b8a:	4b0b      	ldr	r3, [pc, #44]	; (8002bb8 <HAL_RCC_OscConfig+0x2b8>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d121      	bne.n	8002bda <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b96:	4b08      	ldr	r3, [pc, #32]	; (8002bb8 <HAL_RCC_OscConfig+0x2b8>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4a07      	ldr	r2, [pc, #28]	; (8002bb8 <HAL_RCC_OscConfig+0x2b8>)
 8002b9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ba0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ba2:	f7fe fed7 	bl	8001954 <HAL_GetTick>
 8002ba6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ba8:	e011      	b.n	8002bce <HAL_RCC_OscConfig+0x2ce>
 8002baa:	bf00      	nop
 8002bac:	40023800 	.word	0x40023800
 8002bb0:	42470000 	.word	0x42470000
 8002bb4:	42470e80 	.word	0x42470e80
 8002bb8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bbc:	f7fe feca 	bl	8001954 <HAL_GetTick>
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	693b      	ldr	r3, [r7, #16]
 8002bc4:	1ad3      	subs	r3, r2, r3
 8002bc6:	2b02      	cmp	r3, #2
 8002bc8:	d901      	bls.n	8002bce <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002bca:	2303      	movs	r3, #3
 8002bcc:	e106      	b.n	8002ddc <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bce:	4b85      	ldr	r3, [pc, #532]	; (8002de4 <HAL_RCC_OscConfig+0x4e4>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d0f0      	beq.n	8002bbc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	689b      	ldr	r3, [r3, #8]
 8002bde:	2b01      	cmp	r3, #1
 8002be0:	d106      	bne.n	8002bf0 <HAL_RCC_OscConfig+0x2f0>
 8002be2:	4b81      	ldr	r3, [pc, #516]	; (8002de8 <HAL_RCC_OscConfig+0x4e8>)
 8002be4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002be6:	4a80      	ldr	r2, [pc, #512]	; (8002de8 <HAL_RCC_OscConfig+0x4e8>)
 8002be8:	f043 0301 	orr.w	r3, r3, #1
 8002bec:	6713      	str	r3, [r2, #112]	; 0x70
 8002bee:	e01c      	b.n	8002c2a <HAL_RCC_OscConfig+0x32a>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	689b      	ldr	r3, [r3, #8]
 8002bf4:	2b05      	cmp	r3, #5
 8002bf6:	d10c      	bne.n	8002c12 <HAL_RCC_OscConfig+0x312>
 8002bf8:	4b7b      	ldr	r3, [pc, #492]	; (8002de8 <HAL_RCC_OscConfig+0x4e8>)
 8002bfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bfc:	4a7a      	ldr	r2, [pc, #488]	; (8002de8 <HAL_RCC_OscConfig+0x4e8>)
 8002bfe:	f043 0304 	orr.w	r3, r3, #4
 8002c02:	6713      	str	r3, [r2, #112]	; 0x70
 8002c04:	4b78      	ldr	r3, [pc, #480]	; (8002de8 <HAL_RCC_OscConfig+0x4e8>)
 8002c06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c08:	4a77      	ldr	r2, [pc, #476]	; (8002de8 <HAL_RCC_OscConfig+0x4e8>)
 8002c0a:	f043 0301 	orr.w	r3, r3, #1
 8002c0e:	6713      	str	r3, [r2, #112]	; 0x70
 8002c10:	e00b      	b.n	8002c2a <HAL_RCC_OscConfig+0x32a>
 8002c12:	4b75      	ldr	r3, [pc, #468]	; (8002de8 <HAL_RCC_OscConfig+0x4e8>)
 8002c14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c16:	4a74      	ldr	r2, [pc, #464]	; (8002de8 <HAL_RCC_OscConfig+0x4e8>)
 8002c18:	f023 0301 	bic.w	r3, r3, #1
 8002c1c:	6713      	str	r3, [r2, #112]	; 0x70
 8002c1e:	4b72      	ldr	r3, [pc, #456]	; (8002de8 <HAL_RCC_OscConfig+0x4e8>)
 8002c20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c22:	4a71      	ldr	r2, [pc, #452]	; (8002de8 <HAL_RCC_OscConfig+0x4e8>)
 8002c24:	f023 0304 	bic.w	r3, r3, #4
 8002c28:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	689b      	ldr	r3, [r3, #8]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d015      	beq.n	8002c5e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c32:	f7fe fe8f 	bl	8001954 <HAL_GetTick>
 8002c36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c38:	e00a      	b.n	8002c50 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c3a:	f7fe fe8b 	bl	8001954 <HAL_GetTick>
 8002c3e:	4602      	mov	r2, r0
 8002c40:	693b      	ldr	r3, [r7, #16]
 8002c42:	1ad3      	subs	r3, r2, r3
 8002c44:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d901      	bls.n	8002c50 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002c4c:	2303      	movs	r3, #3
 8002c4e:	e0c5      	b.n	8002ddc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c50:	4b65      	ldr	r3, [pc, #404]	; (8002de8 <HAL_RCC_OscConfig+0x4e8>)
 8002c52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c54:	f003 0302 	and.w	r3, r3, #2
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d0ee      	beq.n	8002c3a <HAL_RCC_OscConfig+0x33a>
 8002c5c:	e014      	b.n	8002c88 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c5e:	f7fe fe79 	bl	8001954 <HAL_GetTick>
 8002c62:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c64:	e00a      	b.n	8002c7c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c66:	f7fe fe75 	bl	8001954 <HAL_GetTick>
 8002c6a:	4602      	mov	r2, r0
 8002c6c:	693b      	ldr	r3, [r7, #16]
 8002c6e:	1ad3      	subs	r3, r2, r3
 8002c70:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d901      	bls.n	8002c7c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002c78:	2303      	movs	r3, #3
 8002c7a:	e0af      	b.n	8002ddc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c7c:	4b5a      	ldr	r3, [pc, #360]	; (8002de8 <HAL_RCC_OscConfig+0x4e8>)
 8002c7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c80:	f003 0302 	and.w	r3, r3, #2
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d1ee      	bne.n	8002c66 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002c88:	7dfb      	ldrb	r3, [r7, #23]
 8002c8a:	2b01      	cmp	r3, #1
 8002c8c:	d105      	bne.n	8002c9a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c8e:	4b56      	ldr	r3, [pc, #344]	; (8002de8 <HAL_RCC_OscConfig+0x4e8>)
 8002c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c92:	4a55      	ldr	r2, [pc, #340]	; (8002de8 <HAL_RCC_OscConfig+0x4e8>)
 8002c94:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c98:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	699b      	ldr	r3, [r3, #24]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	f000 809b 	beq.w	8002dda <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002ca4:	4b50      	ldr	r3, [pc, #320]	; (8002de8 <HAL_RCC_OscConfig+0x4e8>)
 8002ca6:	689b      	ldr	r3, [r3, #8]
 8002ca8:	f003 030c 	and.w	r3, r3, #12
 8002cac:	2b08      	cmp	r3, #8
 8002cae:	d05c      	beq.n	8002d6a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	699b      	ldr	r3, [r3, #24]
 8002cb4:	2b02      	cmp	r3, #2
 8002cb6:	d141      	bne.n	8002d3c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cb8:	4b4c      	ldr	r3, [pc, #304]	; (8002dec <HAL_RCC_OscConfig+0x4ec>)
 8002cba:	2200      	movs	r2, #0
 8002cbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cbe:	f7fe fe49 	bl	8001954 <HAL_GetTick>
 8002cc2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cc4:	e008      	b.n	8002cd8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cc6:	f7fe fe45 	bl	8001954 <HAL_GetTick>
 8002cca:	4602      	mov	r2, r0
 8002ccc:	693b      	ldr	r3, [r7, #16]
 8002cce:	1ad3      	subs	r3, r2, r3
 8002cd0:	2b02      	cmp	r3, #2
 8002cd2:	d901      	bls.n	8002cd8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002cd4:	2303      	movs	r3, #3
 8002cd6:	e081      	b.n	8002ddc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cd8:	4b43      	ldr	r3, [pc, #268]	; (8002de8 <HAL_RCC_OscConfig+0x4e8>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d1f0      	bne.n	8002cc6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	69da      	ldr	r2, [r3, #28]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6a1b      	ldr	r3, [r3, #32]
 8002cec:	431a      	orrs	r2, r3
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf2:	019b      	lsls	r3, r3, #6
 8002cf4:	431a      	orrs	r2, r3
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cfa:	085b      	lsrs	r3, r3, #1
 8002cfc:	3b01      	subs	r3, #1
 8002cfe:	041b      	lsls	r3, r3, #16
 8002d00:	431a      	orrs	r2, r3
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d06:	061b      	lsls	r3, r3, #24
 8002d08:	4937      	ldr	r1, [pc, #220]	; (8002de8 <HAL_RCC_OscConfig+0x4e8>)
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d0e:	4b37      	ldr	r3, [pc, #220]	; (8002dec <HAL_RCC_OscConfig+0x4ec>)
 8002d10:	2201      	movs	r2, #1
 8002d12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d14:	f7fe fe1e 	bl	8001954 <HAL_GetTick>
 8002d18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d1a:	e008      	b.n	8002d2e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d1c:	f7fe fe1a 	bl	8001954 <HAL_GetTick>
 8002d20:	4602      	mov	r2, r0
 8002d22:	693b      	ldr	r3, [r7, #16]
 8002d24:	1ad3      	subs	r3, r2, r3
 8002d26:	2b02      	cmp	r3, #2
 8002d28:	d901      	bls.n	8002d2e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002d2a:	2303      	movs	r3, #3
 8002d2c:	e056      	b.n	8002ddc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d2e:	4b2e      	ldr	r3, [pc, #184]	; (8002de8 <HAL_RCC_OscConfig+0x4e8>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d0f0      	beq.n	8002d1c <HAL_RCC_OscConfig+0x41c>
 8002d3a:	e04e      	b.n	8002dda <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d3c:	4b2b      	ldr	r3, [pc, #172]	; (8002dec <HAL_RCC_OscConfig+0x4ec>)
 8002d3e:	2200      	movs	r2, #0
 8002d40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d42:	f7fe fe07 	bl	8001954 <HAL_GetTick>
 8002d46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d48:	e008      	b.n	8002d5c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d4a:	f7fe fe03 	bl	8001954 <HAL_GetTick>
 8002d4e:	4602      	mov	r2, r0
 8002d50:	693b      	ldr	r3, [r7, #16]
 8002d52:	1ad3      	subs	r3, r2, r3
 8002d54:	2b02      	cmp	r3, #2
 8002d56:	d901      	bls.n	8002d5c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002d58:	2303      	movs	r3, #3
 8002d5a:	e03f      	b.n	8002ddc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d5c:	4b22      	ldr	r3, [pc, #136]	; (8002de8 <HAL_RCC_OscConfig+0x4e8>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d1f0      	bne.n	8002d4a <HAL_RCC_OscConfig+0x44a>
 8002d68:	e037      	b.n	8002dda <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	699b      	ldr	r3, [r3, #24]
 8002d6e:	2b01      	cmp	r3, #1
 8002d70:	d101      	bne.n	8002d76 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002d72:	2301      	movs	r3, #1
 8002d74:	e032      	b.n	8002ddc <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002d76:	4b1c      	ldr	r3, [pc, #112]	; (8002de8 <HAL_RCC_OscConfig+0x4e8>)
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	699b      	ldr	r3, [r3, #24]
 8002d80:	2b01      	cmp	r3, #1
 8002d82:	d028      	beq.n	8002dd6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d8e:	429a      	cmp	r2, r3
 8002d90:	d121      	bne.n	8002dd6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d9c:	429a      	cmp	r2, r3
 8002d9e:	d11a      	bne.n	8002dd6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002da0:	68fa      	ldr	r2, [r7, #12]
 8002da2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002da6:	4013      	ands	r3, r2
 8002da8:	687a      	ldr	r2, [r7, #4]
 8002daa:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002dac:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d111      	bne.n	8002dd6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dbc:	085b      	lsrs	r3, r3, #1
 8002dbe:	3b01      	subs	r3, #1
 8002dc0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002dc2:	429a      	cmp	r2, r3
 8002dc4:	d107      	bne.n	8002dd6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dd0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002dd2:	429a      	cmp	r2, r3
 8002dd4:	d001      	beq.n	8002dda <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	e000      	b.n	8002ddc <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002dda:	2300      	movs	r3, #0
}
 8002ddc:	4618      	mov	r0, r3
 8002dde:	3718      	adds	r7, #24
 8002de0:	46bd      	mov	sp, r7
 8002de2:	bd80      	pop	{r7, pc}
 8002de4:	40007000 	.word	0x40007000
 8002de8:	40023800 	.word	0x40023800
 8002dec:	42470060 	.word	0x42470060

08002df0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b084      	sub	sp, #16
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
 8002df8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d101      	bne.n	8002e04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e00:	2301      	movs	r3, #1
 8002e02:	e0cc      	b.n	8002f9e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e04:	4b68      	ldr	r3, [pc, #416]	; (8002fa8 <HAL_RCC_ClockConfig+0x1b8>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f003 0307 	and.w	r3, r3, #7
 8002e0c:	683a      	ldr	r2, [r7, #0]
 8002e0e:	429a      	cmp	r2, r3
 8002e10:	d90c      	bls.n	8002e2c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e12:	4b65      	ldr	r3, [pc, #404]	; (8002fa8 <HAL_RCC_ClockConfig+0x1b8>)
 8002e14:	683a      	ldr	r2, [r7, #0]
 8002e16:	b2d2      	uxtb	r2, r2
 8002e18:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e1a:	4b63      	ldr	r3, [pc, #396]	; (8002fa8 <HAL_RCC_ClockConfig+0x1b8>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f003 0307 	and.w	r3, r3, #7
 8002e22:	683a      	ldr	r2, [r7, #0]
 8002e24:	429a      	cmp	r2, r3
 8002e26:	d001      	beq.n	8002e2c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	e0b8      	b.n	8002f9e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f003 0302 	and.w	r3, r3, #2
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d020      	beq.n	8002e7a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f003 0304 	and.w	r3, r3, #4
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d005      	beq.n	8002e50 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e44:	4b59      	ldr	r3, [pc, #356]	; (8002fac <HAL_RCC_ClockConfig+0x1bc>)
 8002e46:	689b      	ldr	r3, [r3, #8]
 8002e48:	4a58      	ldr	r2, [pc, #352]	; (8002fac <HAL_RCC_ClockConfig+0x1bc>)
 8002e4a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002e4e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f003 0308 	and.w	r3, r3, #8
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d005      	beq.n	8002e68 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e5c:	4b53      	ldr	r3, [pc, #332]	; (8002fac <HAL_RCC_ClockConfig+0x1bc>)
 8002e5e:	689b      	ldr	r3, [r3, #8]
 8002e60:	4a52      	ldr	r2, [pc, #328]	; (8002fac <HAL_RCC_ClockConfig+0x1bc>)
 8002e62:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002e66:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e68:	4b50      	ldr	r3, [pc, #320]	; (8002fac <HAL_RCC_ClockConfig+0x1bc>)
 8002e6a:	689b      	ldr	r3, [r3, #8]
 8002e6c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	689b      	ldr	r3, [r3, #8]
 8002e74:	494d      	ldr	r1, [pc, #308]	; (8002fac <HAL_RCC_ClockConfig+0x1bc>)
 8002e76:	4313      	orrs	r3, r2
 8002e78:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f003 0301 	and.w	r3, r3, #1
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d044      	beq.n	8002f10 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	2b01      	cmp	r3, #1
 8002e8c:	d107      	bne.n	8002e9e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e8e:	4b47      	ldr	r3, [pc, #284]	; (8002fac <HAL_RCC_ClockConfig+0x1bc>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d119      	bne.n	8002ece <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	e07f      	b.n	8002f9e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	2b02      	cmp	r3, #2
 8002ea4:	d003      	beq.n	8002eae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002eaa:	2b03      	cmp	r3, #3
 8002eac:	d107      	bne.n	8002ebe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002eae:	4b3f      	ldr	r3, [pc, #252]	; (8002fac <HAL_RCC_ClockConfig+0x1bc>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d109      	bne.n	8002ece <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	e06f      	b.n	8002f9e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ebe:	4b3b      	ldr	r3, [pc, #236]	; (8002fac <HAL_RCC_ClockConfig+0x1bc>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f003 0302 	and.w	r3, r3, #2
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d101      	bne.n	8002ece <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	e067      	b.n	8002f9e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ece:	4b37      	ldr	r3, [pc, #220]	; (8002fac <HAL_RCC_ClockConfig+0x1bc>)
 8002ed0:	689b      	ldr	r3, [r3, #8]
 8002ed2:	f023 0203 	bic.w	r2, r3, #3
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	4934      	ldr	r1, [pc, #208]	; (8002fac <HAL_RCC_ClockConfig+0x1bc>)
 8002edc:	4313      	orrs	r3, r2
 8002ede:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ee0:	f7fe fd38 	bl	8001954 <HAL_GetTick>
 8002ee4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ee6:	e00a      	b.n	8002efe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ee8:	f7fe fd34 	bl	8001954 <HAL_GetTick>
 8002eec:	4602      	mov	r2, r0
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	1ad3      	subs	r3, r2, r3
 8002ef2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d901      	bls.n	8002efe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002efa:	2303      	movs	r3, #3
 8002efc:	e04f      	b.n	8002f9e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002efe:	4b2b      	ldr	r3, [pc, #172]	; (8002fac <HAL_RCC_ClockConfig+0x1bc>)
 8002f00:	689b      	ldr	r3, [r3, #8]
 8002f02:	f003 020c 	and.w	r2, r3, #12
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	009b      	lsls	r3, r3, #2
 8002f0c:	429a      	cmp	r2, r3
 8002f0e:	d1eb      	bne.n	8002ee8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f10:	4b25      	ldr	r3, [pc, #148]	; (8002fa8 <HAL_RCC_ClockConfig+0x1b8>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f003 0307 	and.w	r3, r3, #7
 8002f18:	683a      	ldr	r2, [r7, #0]
 8002f1a:	429a      	cmp	r2, r3
 8002f1c:	d20c      	bcs.n	8002f38 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f1e:	4b22      	ldr	r3, [pc, #136]	; (8002fa8 <HAL_RCC_ClockConfig+0x1b8>)
 8002f20:	683a      	ldr	r2, [r7, #0]
 8002f22:	b2d2      	uxtb	r2, r2
 8002f24:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f26:	4b20      	ldr	r3, [pc, #128]	; (8002fa8 <HAL_RCC_ClockConfig+0x1b8>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f003 0307 	and.w	r3, r3, #7
 8002f2e:	683a      	ldr	r2, [r7, #0]
 8002f30:	429a      	cmp	r2, r3
 8002f32:	d001      	beq.n	8002f38 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002f34:	2301      	movs	r3, #1
 8002f36:	e032      	b.n	8002f9e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f003 0304 	and.w	r3, r3, #4
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d008      	beq.n	8002f56 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f44:	4b19      	ldr	r3, [pc, #100]	; (8002fac <HAL_RCC_ClockConfig+0x1bc>)
 8002f46:	689b      	ldr	r3, [r3, #8]
 8002f48:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	68db      	ldr	r3, [r3, #12]
 8002f50:	4916      	ldr	r1, [pc, #88]	; (8002fac <HAL_RCC_ClockConfig+0x1bc>)
 8002f52:	4313      	orrs	r3, r2
 8002f54:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f003 0308 	and.w	r3, r3, #8
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d009      	beq.n	8002f76 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f62:	4b12      	ldr	r3, [pc, #72]	; (8002fac <HAL_RCC_ClockConfig+0x1bc>)
 8002f64:	689b      	ldr	r3, [r3, #8]
 8002f66:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	691b      	ldr	r3, [r3, #16]
 8002f6e:	00db      	lsls	r3, r3, #3
 8002f70:	490e      	ldr	r1, [pc, #56]	; (8002fac <HAL_RCC_ClockConfig+0x1bc>)
 8002f72:	4313      	orrs	r3, r2
 8002f74:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002f76:	f000 f821 	bl	8002fbc <HAL_RCC_GetSysClockFreq>
 8002f7a:	4602      	mov	r2, r0
 8002f7c:	4b0b      	ldr	r3, [pc, #44]	; (8002fac <HAL_RCC_ClockConfig+0x1bc>)
 8002f7e:	689b      	ldr	r3, [r3, #8]
 8002f80:	091b      	lsrs	r3, r3, #4
 8002f82:	f003 030f 	and.w	r3, r3, #15
 8002f86:	490a      	ldr	r1, [pc, #40]	; (8002fb0 <HAL_RCC_ClockConfig+0x1c0>)
 8002f88:	5ccb      	ldrb	r3, [r1, r3]
 8002f8a:	fa22 f303 	lsr.w	r3, r2, r3
 8002f8e:	4a09      	ldr	r2, [pc, #36]	; (8002fb4 <HAL_RCC_ClockConfig+0x1c4>)
 8002f90:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002f92:	4b09      	ldr	r3, [pc, #36]	; (8002fb8 <HAL_RCC_ClockConfig+0x1c8>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4618      	mov	r0, r3
 8002f98:	f7fe fc98 	bl	80018cc <HAL_InitTick>

  return HAL_OK;
 8002f9c:	2300      	movs	r3, #0
}
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	3710      	adds	r7, #16
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd80      	pop	{r7, pc}
 8002fa6:	bf00      	nop
 8002fa8:	40023c00 	.word	0x40023c00
 8002fac:	40023800 	.word	0x40023800
 8002fb0:	08004cd4 	.word	0x08004cd4
 8002fb4:	20000004 	.word	0x20000004
 8002fb8:	20000008 	.word	0x20000008

08002fbc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002fbc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002fc0:	b084      	sub	sp, #16
 8002fc2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	607b      	str	r3, [r7, #4]
 8002fc8:	2300      	movs	r3, #0
 8002fca:	60fb      	str	r3, [r7, #12]
 8002fcc:	2300      	movs	r3, #0
 8002fce:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002fd4:	4b67      	ldr	r3, [pc, #412]	; (8003174 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002fd6:	689b      	ldr	r3, [r3, #8]
 8002fd8:	f003 030c 	and.w	r3, r3, #12
 8002fdc:	2b08      	cmp	r3, #8
 8002fde:	d00d      	beq.n	8002ffc <HAL_RCC_GetSysClockFreq+0x40>
 8002fe0:	2b08      	cmp	r3, #8
 8002fe2:	f200 80bd 	bhi.w	8003160 <HAL_RCC_GetSysClockFreq+0x1a4>
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d002      	beq.n	8002ff0 <HAL_RCC_GetSysClockFreq+0x34>
 8002fea:	2b04      	cmp	r3, #4
 8002fec:	d003      	beq.n	8002ff6 <HAL_RCC_GetSysClockFreq+0x3a>
 8002fee:	e0b7      	b.n	8003160 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ff0:	4b61      	ldr	r3, [pc, #388]	; (8003178 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002ff2:	60bb      	str	r3, [r7, #8]
       break;
 8002ff4:	e0b7      	b.n	8003166 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002ff6:	4b61      	ldr	r3, [pc, #388]	; (800317c <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002ff8:	60bb      	str	r3, [r7, #8]
      break;
 8002ffa:	e0b4      	b.n	8003166 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ffc:	4b5d      	ldr	r3, [pc, #372]	; (8003174 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003004:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003006:	4b5b      	ldr	r3, [pc, #364]	; (8003174 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800300e:	2b00      	cmp	r3, #0
 8003010:	d04d      	beq.n	80030ae <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003012:	4b58      	ldr	r3, [pc, #352]	; (8003174 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	099b      	lsrs	r3, r3, #6
 8003018:	461a      	mov	r2, r3
 800301a:	f04f 0300 	mov.w	r3, #0
 800301e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003022:	f04f 0100 	mov.w	r1, #0
 8003026:	ea02 0800 	and.w	r8, r2, r0
 800302a:	ea03 0901 	and.w	r9, r3, r1
 800302e:	4640      	mov	r0, r8
 8003030:	4649      	mov	r1, r9
 8003032:	f04f 0200 	mov.w	r2, #0
 8003036:	f04f 0300 	mov.w	r3, #0
 800303a:	014b      	lsls	r3, r1, #5
 800303c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003040:	0142      	lsls	r2, r0, #5
 8003042:	4610      	mov	r0, r2
 8003044:	4619      	mov	r1, r3
 8003046:	ebb0 0008 	subs.w	r0, r0, r8
 800304a:	eb61 0109 	sbc.w	r1, r1, r9
 800304e:	f04f 0200 	mov.w	r2, #0
 8003052:	f04f 0300 	mov.w	r3, #0
 8003056:	018b      	lsls	r3, r1, #6
 8003058:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800305c:	0182      	lsls	r2, r0, #6
 800305e:	1a12      	subs	r2, r2, r0
 8003060:	eb63 0301 	sbc.w	r3, r3, r1
 8003064:	f04f 0000 	mov.w	r0, #0
 8003068:	f04f 0100 	mov.w	r1, #0
 800306c:	00d9      	lsls	r1, r3, #3
 800306e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003072:	00d0      	lsls	r0, r2, #3
 8003074:	4602      	mov	r2, r0
 8003076:	460b      	mov	r3, r1
 8003078:	eb12 0208 	adds.w	r2, r2, r8
 800307c:	eb43 0309 	adc.w	r3, r3, r9
 8003080:	f04f 0000 	mov.w	r0, #0
 8003084:	f04f 0100 	mov.w	r1, #0
 8003088:	0259      	lsls	r1, r3, #9
 800308a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800308e:	0250      	lsls	r0, r2, #9
 8003090:	4602      	mov	r2, r0
 8003092:	460b      	mov	r3, r1
 8003094:	4610      	mov	r0, r2
 8003096:	4619      	mov	r1, r3
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	461a      	mov	r2, r3
 800309c:	f04f 0300 	mov.w	r3, #0
 80030a0:	f7fd fcdc 	bl	8000a5c <__aeabi_uldivmod>
 80030a4:	4602      	mov	r2, r0
 80030a6:	460b      	mov	r3, r1
 80030a8:	4613      	mov	r3, r2
 80030aa:	60fb      	str	r3, [r7, #12]
 80030ac:	e04a      	b.n	8003144 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030ae:	4b31      	ldr	r3, [pc, #196]	; (8003174 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	099b      	lsrs	r3, r3, #6
 80030b4:	461a      	mov	r2, r3
 80030b6:	f04f 0300 	mov.w	r3, #0
 80030ba:	f240 10ff 	movw	r0, #511	; 0x1ff
 80030be:	f04f 0100 	mov.w	r1, #0
 80030c2:	ea02 0400 	and.w	r4, r2, r0
 80030c6:	ea03 0501 	and.w	r5, r3, r1
 80030ca:	4620      	mov	r0, r4
 80030cc:	4629      	mov	r1, r5
 80030ce:	f04f 0200 	mov.w	r2, #0
 80030d2:	f04f 0300 	mov.w	r3, #0
 80030d6:	014b      	lsls	r3, r1, #5
 80030d8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80030dc:	0142      	lsls	r2, r0, #5
 80030de:	4610      	mov	r0, r2
 80030e0:	4619      	mov	r1, r3
 80030e2:	1b00      	subs	r0, r0, r4
 80030e4:	eb61 0105 	sbc.w	r1, r1, r5
 80030e8:	f04f 0200 	mov.w	r2, #0
 80030ec:	f04f 0300 	mov.w	r3, #0
 80030f0:	018b      	lsls	r3, r1, #6
 80030f2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80030f6:	0182      	lsls	r2, r0, #6
 80030f8:	1a12      	subs	r2, r2, r0
 80030fa:	eb63 0301 	sbc.w	r3, r3, r1
 80030fe:	f04f 0000 	mov.w	r0, #0
 8003102:	f04f 0100 	mov.w	r1, #0
 8003106:	00d9      	lsls	r1, r3, #3
 8003108:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800310c:	00d0      	lsls	r0, r2, #3
 800310e:	4602      	mov	r2, r0
 8003110:	460b      	mov	r3, r1
 8003112:	1912      	adds	r2, r2, r4
 8003114:	eb45 0303 	adc.w	r3, r5, r3
 8003118:	f04f 0000 	mov.w	r0, #0
 800311c:	f04f 0100 	mov.w	r1, #0
 8003120:	0299      	lsls	r1, r3, #10
 8003122:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003126:	0290      	lsls	r0, r2, #10
 8003128:	4602      	mov	r2, r0
 800312a:	460b      	mov	r3, r1
 800312c:	4610      	mov	r0, r2
 800312e:	4619      	mov	r1, r3
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	461a      	mov	r2, r3
 8003134:	f04f 0300 	mov.w	r3, #0
 8003138:	f7fd fc90 	bl	8000a5c <__aeabi_uldivmod>
 800313c:	4602      	mov	r2, r0
 800313e:	460b      	mov	r3, r1
 8003140:	4613      	mov	r3, r2
 8003142:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003144:	4b0b      	ldr	r3, [pc, #44]	; (8003174 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	0c1b      	lsrs	r3, r3, #16
 800314a:	f003 0303 	and.w	r3, r3, #3
 800314e:	3301      	adds	r3, #1
 8003150:	005b      	lsls	r3, r3, #1
 8003152:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003154:	68fa      	ldr	r2, [r7, #12]
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	fbb2 f3f3 	udiv	r3, r2, r3
 800315c:	60bb      	str	r3, [r7, #8]
      break;
 800315e:	e002      	b.n	8003166 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003160:	4b05      	ldr	r3, [pc, #20]	; (8003178 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003162:	60bb      	str	r3, [r7, #8]
      break;
 8003164:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003166:	68bb      	ldr	r3, [r7, #8]
}
 8003168:	4618      	mov	r0, r3
 800316a:	3710      	adds	r7, #16
 800316c:	46bd      	mov	sp, r7
 800316e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003172:	bf00      	nop
 8003174:	40023800 	.word	0x40023800
 8003178:	00f42400 	.word	0x00f42400
 800317c:	007a1200 	.word	0x007a1200

08003180 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003180:	b480      	push	{r7}
 8003182:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003184:	4b03      	ldr	r3, [pc, #12]	; (8003194 <HAL_RCC_GetHCLKFreq+0x14>)
 8003186:	681b      	ldr	r3, [r3, #0]
}
 8003188:	4618      	mov	r0, r3
 800318a:	46bd      	mov	sp, r7
 800318c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003190:	4770      	bx	lr
 8003192:	bf00      	nop
 8003194:	20000004 	.word	0x20000004

08003198 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800319c:	f7ff fff0 	bl	8003180 <HAL_RCC_GetHCLKFreq>
 80031a0:	4602      	mov	r2, r0
 80031a2:	4b05      	ldr	r3, [pc, #20]	; (80031b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80031a4:	689b      	ldr	r3, [r3, #8]
 80031a6:	0a9b      	lsrs	r3, r3, #10
 80031a8:	f003 0307 	and.w	r3, r3, #7
 80031ac:	4903      	ldr	r1, [pc, #12]	; (80031bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80031ae:	5ccb      	ldrb	r3, [r1, r3]
 80031b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031b4:	4618      	mov	r0, r3
 80031b6:	bd80      	pop	{r7, pc}
 80031b8:	40023800 	.word	0x40023800
 80031bc:	08004ce4 	.word	0x08004ce4

080031c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80031c4:	f7ff ffdc 	bl	8003180 <HAL_RCC_GetHCLKFreq>
 80031c8:	4602      	mov	r2, r0
 80031ca:	4b05      	ldr	r3, [pc, #20]	; (80031e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80031cc:	689b      	ldr	r3, [r3, #8]
 80031ce:	0b5b      	lsrs	r3, r3, #13
 80031d0:	f003 0307 	and.w	r3, r3, #7
 80031d4:	4903      	ldr	r1, [pc, #12]	; (80031e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80031d6:	5ccb      	ldrb	r3, [r1, r3]
 80031d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031dc:	4618      	mov	r0, r3
 80031de:	bd80      	pop	{r7, pc}
 80031e0:	40023800 	.word	0x40023800
 80031e4:	08004ce4 	.word	0x08004ce4

080031e8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b082      	sub	sp, #8
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d101      	bne.n	80031fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80031f6:	2301      	movs	r3, #1
 80031f8:	e03f      	b.n	800327a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003200:	b2db      	uxtb	r3, r3
 8003202:	2b00      	cmp	r3, #0
 8003204:	d106      	bne.n	8003214 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2200      	movs	r2, #0
 800320a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800320e:	6878      	ldr	r0, [r7, #4]
 8003210:	f7fe fa44 	bl	800169c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2224      	movs	r2, #36	; 0x24
 8003218:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	68da      	ldr	r2, [r3, #12]
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800322a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800322c:	6878      	ldr	r0, [r7, #4]
 800322e:	f000 fe7d 	bl	8003f2c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	691a      	ldr	r2, [r3, #16]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003240:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	695a      	ldr	r2, [r3, #20]
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003250:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	68da      	ldr	r2, [r3, #12]
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003260:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2200      	movs	r2, #0
 8003266:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2220      	movs	r2, #32
 800326c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2220      	movs	r2, #32
 8003274:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003278:	2300      	movs	r3, #0
}
 800327a:	4618      	mov	r0, r3
 800327c:	3708      	adds	r7, #8
 800327e:	46bd      	mov	sp, r7
 8003280:	bd80      	pop	{r7, pc}

08003282 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003282:	b580      	push	{r7, lr}
 8003284:	b08a      	sub	sp, #40	; 0x28
 8003286:	af02      	add	r7, sp, #8
 8003288:	60f8      	str	r0, [r7, #12]
 800328a:	60b9      	str	r1, [r7, #8]
 800328c:	603b      	str	r3, [r7, #0]
 800328e:	4613      	mov	r3, r2
 8003290:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003292:	2300      	movs	r3, #0
 8003294:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800329c:	b2db      	uxtb	r3, r3
 800329e:	2b20      	cmp	r3, #32
 80032a0:	d17c      	bne.n	800339c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80032a2:	68bb      	ldr	r3, [r7, #8]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d002      	beq.n	80032ae <HAL_UART_Transmit+0x2c>
 80032a8:	88fb      	ldrh	r3, [r7, #6]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d101      	bne.n	80032b2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80032ae:	2301      	movs	r3, #1
 80032b0:	e075      	b.n	800339e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032b8:	2b01      	cmp	r3, #1
 80032ba:	d101      	bne.n	80032c0 <HAL_UART_Transmit+0x3e>
 80032bc:	2302      	movs	r3, #2
 80032be:	e06e      	b.n	800339e <HAL_UART_Transmit+0x11c>
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	2201      	movs	r2, #1
 80032c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	2200      	movs	r2, #0
 80032cc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	2221      	movs	r2, #33	; 0x21
 80032d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80032d6:	f7fe fb3d 	bl	8001954 <HAL_GetTick>
 80032da:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	88fa      	ldrh	r2, [r7, #6]
 80032e0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	88fa      	ldrh	r2, [r7, #6]
 80032e6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	689b      	ldr	r3, [r3, #8]
 80032ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032f0:	d108      	bne.n	8003304 <HAL_UART_Transmit+0x82>
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	691b      	ldr	r3, [r3, #16]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d104      	bne.n	8003304 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80032fa:	2300      	movs	r3, #0
 80032fc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80032fe:	68bb      	ldr	r3, [r7, #8]
 8003300:	61bb      	str	r3, [r7, #24]
 8003302:	e003      	b.n	800330c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003304:	68bb      	ldr	r3, [r7, #8]
 8003306:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003308:	2300      	movs	r3, #0
 800330a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	2200      	movs	r2, #0
 8003310:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003314:	e02a      	b.n	800336c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	9300      	str	r3, [sp, #0]
 800331a:	697b      	ldr	r3, [r7, #20]
 800331c:	2200      	movs	r2, #0
 800331e:	2180      	movs	r1, #128	; 0x80
 8003320:	68f8      	ldr	r0, [r7, #12]
 8003322:	f000 fbc1 	bl	8003aa8 <UART_WaitOnFlagUntilTimeout>
 8003326:	4603      	mov	r3, r0
 8003328:	2b00      	cmp	r3, #0
 800332a:	d001      	beq.n	8003330 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800332c:	2303      	movs	r3, #3
 800332e:	e036      	b.n	800339e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003330:	69fb      	ldr	r3, [r7, #28]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d10b      	bne.n	800334e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003336:	69bb      	ldr	r3, [r7, #24]
 8003338:	881b      	ldrh	r3, [r3, #0]
 800333a:	461a      	mov	r2, r3
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003344:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003346:	69bb      	ldr	r3, [r7, #24]
 8003348:	3302      	adds	r3, #2
 800334a:	61bb      	str	r3, [r7, #24]
 800334c:	e007      	b.n	800335e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800334e:	69fb      	ldr	r3, [r7, #28]
 8003350:	781a      	ldrb	r2, [r3, #0]
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003358:	69fb      	ldr	r3, [r7, #28]
 800335a:	3301      	adds	r3, #1
 800335c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003362:	b29b      	uxth	r3, r3
 8003364:	3b01      	subs	r3, #1
 8003366:	b29a      	uxth	r2, r3
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003370:	b29b      	uxth	r3, r3
 8003372:	2b00      	cmp	r3, #0
 8003374:	d1cf      	bne.n	8003316 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	9300      	str	r3, [sp, #0]
 800337a:	697b      	ldr	r3, [r7, #20]
 800337c:	2200      	movs	r2, #0
 800337e:	2140      	movs	r1, #64	; 0x40
 8003380:	68f8      	ldr	r0, [r7, #12]
 8003382:	f000 fb91 	bl	8003aa8 <UART_WaitOnFlagUntilTimeout>
 8003386:	4603      	mov	r3, r0
 8003388:	2b00      	cmp	r3, #0
 800338a:	d001      	beq.n	8003390 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800338c:	2303      	movs	r3, #3
 800338e:	e006      	b.n	800339e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	2220      	movs	r2, #32
 8003394:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003398:	2300      	movs	r3, #0
 800339a:	e000      	b.n	800339e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800339c:	2302      	movs	r3, #2
  }
}
 800339e:	4618      	mov	r0, r3
 80033a0:	3720      	adds	r7, #32
 80033a2:	46bd      	mov	sp, r7
 80033a4:	bd80      	pop	{r7, pc}

080033a6 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033a6:	b580      	push	{r7, lr}
 80033a8:	b08a      	sub	sp, #40	; 0x28
 80033aa:	af02      	add	r7, sp, #8
 80033ac:	60f8      	str	r0, [r7, #12]
 80033ae:	60b9      	str	r1, [r7, #8]
 80033b0:	603b      	str	r3, [r7, #0]
 80033b2:	4613      	mov	r3, r2
 80033b4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80033b6:	2300      	movs	r3, #0
 80033b8:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80033c0:	b2db      	uxtb	r3, r3
 80033c2:	2b20      	cmp	r3, #32
 80033c4:	f040 808c 	bne.w	80034e0 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 80033c8:	68bb      	ldr	r3, [r7, #8]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d002      	beq.n	80033d4 <HAL_UART_Receive+0x2e>
 80033ce:	88fb      	ldrh	r3, [r7, #6]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d101      	bne.n	80033d8 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80033d4:	2301      	movs	r3, #1
 80033d6:	e084      	b.n	80034e2 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033de:	2b01      	cmp	r3, #1
 80033e0:	d101      	bne.n	80033e6 <HAL_UART_Receive+0x40>
 80033e2:	2302      	movs	r3, #2
 80033e4:	e07d      	b.n	80034e2 <HAL_UART_Receive+0x13c>
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	2201      	movs	r2, #1
 80033ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	2200      	movs	r2, #0
 80033f2:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	2222      	movs	r2, #34	; 0x22
 80033f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	2200      	movs	r2, #0
 8003400:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003402:	f7fe faa7 	bl	8001954 <HAL_GetTick>
 8003406:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	88fa      	ldrh	r2, [r7, #6]
 800340c:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	88fa      	ldrh	r2, [r7, #6]
 8003412:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	689b      	ldr	r3, [r3, #8]
 8003418:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800341c:	d108      	bne.n	8003430 <HAL_UART_Receive+0x8a>
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	691b      	ldr	r3, [r3, #16]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d104      	bne.n	8003430 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8003426:	2300      	movs	r3, #0
 8003428:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800342a:	68bb      	ldr	r3, [r7, #8]
 800342c:	61bb      	str	r3, [r7, #24]
 800342e:	e003      	b.n	8003438 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8003430:	68bb      	ldr	r3, [r7, #8]
 8003432:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003434:	2300      	movs	r3, #0
 8003436:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	2200      	movs	r2, #0
 800343c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003440:	e043      	b.n	80034ca <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	9300      	str	r3, [sp, #0]
 8003446:	697b      	ldr	r3, [r7, #20]
 8003448:	2200      	movs	r2, #0
 800344a:	2120      	movs	r1, #32
 800344c:	68f8      	ldr	r0, [r7, #12]
 800344e:	f000 fb2b 	bl	8003aa8 <UART_WaitOnFlagUntilTimeout>
 8003452:	4603      	mov	r3, r0
 8003454:	2b00      	cmp	r3, #0
 8003456:	d001      	beq.n	800345c <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8003458:	2303      	movs	r3, #3
 800345a:	e042      	b.n	80034e2 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 800345c:	69fb      	ldr	r3, [r7, #28]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d10c      	bne.n	800347c <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	b29b      	uxth	r3, r3
 800346a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800346e:	b29a      	uxth	r2, r3
 8003470:	69bb      	ldr	r3, [r7, #24]
 8003472:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003474:	69bb      	ldr	r3, [r7, #24]
 8003476:	3302      	adds	r3, #2
 8003478:	61bb      	str	r3, [r7, #24]
 800347a:	e01f      	b.n	80034bc <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	689b      	ldr	r3, [r3, #8]
 8003480:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003484:	d007      	beq.n	8003496 <HAL_UART_Receive+0xf0>
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	689b      	ldr	r3, [r3, #8]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d10a      	bne.n	80034a4 <HAL_UART_Receive+0xfe>
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	691b      	ldr	r3, [r3, #16]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d106      	bne.n	80034a4 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	b2da      	uxtb	r2, r3
 800349e:	69fb      	ldr	r3, [r7, #28]
 80034a0:	701a      	strb	r2, [r3, #0]
 80034a2:	e008      	b.n	80034b6 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	b2db      	uxtb	r3, r3
 80034ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80034b0:	b2da      	uxtb	r2, r3
 80034b2:	69fb      	ldr	r3, [r7, #28]
 80034b4:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80034b6:	69fb      	ldr	r3, [r7, #28]
 80034b8:	3301      	adds	r3, #1
 80034ba:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80034c0:	b29b      	uxth	r3, r3
 80034c2:	3b01      	subs	r3, #1
 80034c4:	b29a      	uxth	r2, r3
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80034ce:	b29b      	uxth	r3, r3
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d1b6      	bne.n	8003442 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	2220      	movs	r2, #32
 80034d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 80034dc:	2300      	movs	r3, #0
 80034de:	e000      	b.n	80034e2 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 80034e0:	2302      	movs	r3, #2
  }
}
 80034e2:	4618      	mov	r0, r3
 80034e4:	3720      	adds	r7, #32
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bd80      	pop	{r7, pc}

080034ea <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80034ea:	b580      	push	{r7, lr}
 80034ec:	b084      	sub	sp, #16
 80034ee:	af00      	add	r7, sp, #0
 80034f0:	60f8      	str	r0, [r7, #12]
 80034f2:	60b9      	str	r1, [r7, #8]
 80034f4:	4613      	mov	r3, r2
 80034f6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80034fe:	b2db      	uxtb	r3, r3
 8003500:	2b20      	cmp	r3, #32
 8003502:	d11d      	bne.n	8003540 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003504:	68bb      	ldr	r3, [r7, #8]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d002      	beq.n	8003510 <HAL_UART_Receive_IT+0x26>
 800350a:	88fb      	ldrh	r3, [r7, #6]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d101      	bne.n	8003514 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003510:	2301      	movs	r3, #1
 8003512:	e016      	b.n	8003542 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800351a:	2b01      	cmp	r3, #1
 800351c:	d101      	bne.n	8003522 <HAL_UART_Receive_IT+0x38>
 800351e:	2302      	movs	r3, #2
 8003520:	e00f      	b.n	8003542 <HAL_UART_Receive_IT+0x58>
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	2201      	movs	r2, #1
 8003526:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	2200      	movs	r2, #0
 800352e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003530:	88fb      	ldrh	r3, [r7, #6]
 8003532:	461a      	mov	r2, r3
 8003534:	68b9      	ldr	r1, [r7, #8]
 8003536:	68f8      	ldr	r0, [r7, #12]
 8003538:	f000 fb24 	bl	8003b84 <UART_Start_Receive_IT>
 800353c:	4603      	mov	r3, r0
 800353e:	e000      	b.n	8003542 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003540:	2302      	movs	r3, #2
  }
}
 8003542:	4618      	mov	r0, r3
 8003544:	3710      	adds	r7, #16
 8003546:	46bd      	mov	sp, r7
 8003548:	bd80      	pop	{r7, pc}
	...

0800354c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b0ba      	sub	sp, #232	; 0xe8
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	68db      	ldr	r3, [r3, #12]
 8003564:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	695b      	ldr	r3, [r3, #20]
 800356e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003572:	2300      	movs	r3, #0
 8003574:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003578:	2300      	movs	r3, #0
 800357a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800357e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003582:	f003 030f 	and.w	r3, r3, #15
 8003586:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800358a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800358e:	2b00      	cmp	r3, #0
 8003590:	d10f      	bne.n	80035b2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003592:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003596:	f003 0320 	and.w	r3, r3, #32
 800359a:	2b00      	cmp	r3, #0
 800359c:	d009      	beq.n	80035b2 <HAL_UART_IRQHandler+0x66>
 800359e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80035a2:	f003 0320 	and.w	r3, r3, #32
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d003      	beq.n	80035b2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80035aa:	6878      	ldr	r0, [r7, #4]
 80035ac:	f000 fc03 	bl	8003db6 <UART_Receive_IT>
      return;
 80035b0:	e256      	b.n	8003a60 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80035b2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	f000 80de 	beq.w	8003778 <HAL_UART_IRQHandler+0x22c>
 80035bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80035c0:	f003 0301 	and.w	r3, r3, #1
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d106      	bne.n	80035d6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80035c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80035cc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	f000 80d1 	beq.w	8003778 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80035d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035da:	f003 0301 	and.w	r3, r3, #1
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d00b      	beq.n	80035fa <HAL_UART_IRQHandler+0xae>
 80035e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80035e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d005      	beq.n	80035fa <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035f2:	f043 0201 	orr.w	r2, r3, #1
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80035fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035fe:	f003 0304 	and.w	r3, r3, #4
 8003602:	2b00      	cmp	r3, #0
 8003604:	d00b      	beq.n	800361e <HAL_UART_IRQHandler+0xd2>
 8003606:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800360a:	f003 0301 	and.w	r3, r3, #1
 800360e:	2b00      	cmp	r3, #0
 8003610:	d005      	beq.n	800361e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003616:	f043 0202 	orr.w	r2, r3, #2
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800361e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003622:	f003 0302 	and.w	r3, r3, #2
 8003626:	2b00      	cmp	r3, #0
 8003628:	d00b      	beq.n	8003642 <HAL_UART_IRQHandler+0xf6>
 800362a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800362e:	f003 0301 	and.w	r3, r3, #1
 8003632:	2b00      	cmp	r3, #0
 8003634:	d005      	beq.n	8003642 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800363a:	f043 0204 	orr.w	r2, r3, #4
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003642:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003646:	f003 0308 	and.w	r3, r3, #8
 800364a:	2b00      	cmp	r3, #0
 800364c:	d011      	beq.n	8003672 <HAL_UART_IRQHandler+0x126>
 800364e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003652:	f003 0320 	and.w	r3, r3, #32
 8003656:	2b00      	cmp	r3, #0
 8003658:	d105      	bne.n	8003666 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800365a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800365e:	f003 0301 	and.w	r3, r3, #1
 8003662:	2b00      	cmp	r3, #0
 8003664:	d005      	beq.n	8003672 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800366a:	f043 0208 	orr.w	r2, r3, #8
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003676:	2b00      	cmp	r3, #0
 8003678:	f000 81ed 	beq.w	8003a56 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800367c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003680:	f003 0320 	and.w	r3, r3, #32
 8003684:	2b00      	cmp	r3, #0
 8003686:	d008      	beq.n	800369a <HAL_UART_IRQHandler+0x14e>
 8003688:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800368c:	f003 0320 	and.w	r3, r3, #32
 8003690:	2b00      	cmp	r3, #0
 8003692:	d002      	beq.n	800369a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003694:	6878      	ldr	r0, [r7, #4]
 8003696:	f000 fb8e 	bl	8003db6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	695b      	ldr	r3, [r3, #20]
 80036a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036a4:	2b40      	cmp	r3, #64	; 0x40
 80036a6:	bf0c      	ite	eq
 80036a8:	2301      	moveq	r3, #1
 80036aa:	2300      	movne	r3, #0
 80036ac:	b2db      	uxtb	r3, r3
 80036ae:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b6:	f003 0308 	and.w	r3, r3, #8
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d103      	bne.n	80036c6 <HAL_UART_IRQHandler+0x17a>
 80036be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d04f      	beq.n	8003766 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80036c6:	6878      	ldr	r0, [r7, #4]
 80036c8:	f000 fa96 	bl	8003bf8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	695b      	ldr	r3, [r3, #20]
 80036d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036d6:	2b40      	cmp	r3, #64	; 0x40
 80036d8:	d141      	bne.n	800375e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	3314      	adds	r3, #20
 80036e0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036e4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80036e8:	e853 3f00 	ldrex	r3, [r3]
 80036ec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80036f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80036f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80036f8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	3314      	adds	r3, #20
 8003702:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003706:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800370a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800370e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003712:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003716:	e841 2300 	strex	r3, r2, [r1]
 800371a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800371e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003722:	2b00      	cmp	r3, #0
 8003724:	d1d9      	bne.n	80036da <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800372a:	2b00      	cmp	r3, #0
 800372c:	d013      	beq.n	8003756 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003732:	4a7d      	ldr	r2, [pc, #500]	; (8003928 <HAL_UART_IRQHandler+0x3dc>)
 8003734:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800373a:	4618      	mov	r0, r3
 800373c:	f7fe fabb 	bl	8001cb6 <HAL_DMA_Abort_IT>
 8003740:	4603      	mov	r3, r0
 8003742:	2b00      	cmp	r3, #0
 8003744:	d016      	beq.n	8003774 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800374a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800374c:	687a      	ldr	r2, [r7, #4]
 800374e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003750:	4610      	mov	r0, r2
 8003752:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003754:	e00e      	b.n	8003774 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003756:	6878      	ldr	r0, [r7, #4]
 8003758:	f000 f990 	bl	8003a7c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800375c:	e00a      	b.n	8003774 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800375e:	6878      	ldr	r0, [r7, #4]
 8003760:	f000 f98c 	bl	8003a7c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003764:	e006      	b.n	8003774 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003766:	6878      	ldr	r0, [r7, #4]
 8003768:	f000 f988 	bl	8003a7c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2200      	movs	r2, #0
 8003770:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003772:	e170      	b.n	8003a56 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003774:	bf00      	nop
    return;
 8003776:	e16e      	b.n	8003a56 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800377c:	2b01      	cmp	r3, #1
 800377e:	f040 814a 	bne.w	8003a16 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003782:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003786:	f003 0310 	and.w	r3, r3, #16
 800378a:	2b00      	cmp	r3, #0
 800378c:	f000 8143 	beq.w	8003a16 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003790:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003794:	f003 0310 	and.w	r3, r3, #16
 8003798:	2b00      	cmp	r3, #0
 800379a:	f000 813c 	beq.w	8003a16 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800379e:	2300      	movs	r3, #0
 80037a0:	60bb      	str	r3, [r7, #8]
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	60bb      	str	r3, [r7, #8]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	60bb      	str	r3, [r7, #8]
 80037b2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	695b      	ldr	r3, [r3, #20]
 80037ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037be:	2b40      	cmp	r3, #64	; 0x40
 80037c0:	f040 80b4 	bne.w	800392c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80037d0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	f000 8140 	beq.w	8003a5a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80037de:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80037e2:	429a      	cmp	r2, r3
 80037e4:	f080 8139 	bcs.w	8003a5a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80037ee:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037f4:	69db      	ldr	r3, [r3, #28]
 80037f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037fa:	f000 8088 	beq.w	800390e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	330c      	adds	r3, #12
 8003804:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003808:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800380c:	e853 3f00 	ldrex	r3, [r3]
 8003810:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003814:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003818:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800381c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	330c      	adds	r3, #12
 8003826:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800382a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800382e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003832:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003836:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800383a:	e841 2300 	strex	r3, r2, [r1]
 800383e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003842:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003846:	2b00      	cmp	r3, #0
 8003848:	d1d9      	bne.n	80037fe <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	3314      	adds	r3, #20
 8003850:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003852:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003854:	e853 3f00 	ldrex	r3, [r3]
 8003858:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800385a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800385c:	f023 0301 	bic.w	r3, r3, #1
 8003860:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	3314      	adds	r3, #20
 800386a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800386e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003872:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003874:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003876:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800387a:	e841 2300 	strex	r3, r2, [r1]
 800387e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003880:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003882:	2b00      	cmp	r3, #0
 8003884:	d1e1      	bne.n	800384a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	3314      	adds	r3, #20
 800388c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800388e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003890:	e853 3f00 	ldrex	r3, [r3]
 8003894:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003896:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003898:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800389c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	3314      	adds	r3, #20
 80038a6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80038aa:	66fa      	str	r2, [r7, #108]	; 0x6c
 80038ac:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038ae:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80038b0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80038b2:	e841 2300 	strex	r3, r2, [r1]
 80038b6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80038b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d1e3      	bne.n	8003886 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2220      	movs	r2, #32
 80038c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2200      	movs	r2, #0
 80038ca:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	330c      	adds	r3, #12
 80038d2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038d6:	e853 3f00 	ldrex	r3, [r3]
 80038da:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80038dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80038de:	f023 0310 	bic.w	r3, r3, #16
 80038e2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	330c      	adds	r3, #12
 80038ec:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80038f0:	65ba      	str	r2, [r7, #88]	; 0x58
 80038f2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038f4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80038f6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80038f8:	e841 2300 	strex	r3, r2, [r1]
 80038fc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80038fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003900:	2b00      	cmp	r3, #0
 8003902:	d1e3      	bne.n	80038cc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003908:	4618      	mov	r0, r3
 800390a:	f7fe f964 	bl	8001bd6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003916:	b29b      	uxth	r3, r3
 8003918:	1ad3      	subs	r3, r2, r3
 800391a:	b29b      	uxth	r3, r3
 800391c:	4619      	mov	r1, r3
 800391e:	6878      	ldr	r0, [r7, #4]
 8003920:	f000 f8b6 	bl	8003a90 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003924:	e099      	b.n	8003a5a <HAL_UART_IRQHandler+0x50e>
 8003926:	bf00      	nop
 8003928:	08003cbf 	.word	0x08003cbf
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003934:	b29b      	uxth	r3, r3
 8003936:	1ad3      	subs	r3, r2, r3
 8003938:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003940:	b29b      	uxth	r3, r3
 8003942:	2b00      	cmp	r3, #0
 8003944:	f000 808b 	beq.w	8003a5e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003948:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800394c:	2b00      	cmp	r3, #0
 800394e:	f000 8086 	beq.w	8003a5e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	330c      	adds	r3, #12
 8003958:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800395a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800395c:	e853 3f00 	ldrex	r3, [r3]
 8003960:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003962:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003964:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003968:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	330c      	adds	r3, #12
 8003972:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003976:	647a      	str	r2, [r7, #68]	; 0x44
 8003978:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800397a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800397c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800397e:	e841 2300 	strex	r3, r2, [r1]
 8003982:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003984:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003986:	2b00      	cmp	r3, #0
 8003988:	d1e3      	bne.n	8003952 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	3314      	adds	r3, #20
 8003990:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003994:	e853 3f00 	ldrex	r3, [r3]
 8003998:	623b      	str	r3, [r7, #32]
   return(result);
 800399a:	6a3b      	ldr	r3, [r7, #32]
 800399c:	f023 0301 	bic.w	r3, r3, #1
 80039a0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	3314      	adds	r3, #20
 80039aa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80039ae:	633a      	str	r2, [r7, #48]	; 0x30
 80039b0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039b2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80039b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80039b6:	e841 2300 	strex	r3, r2, [r1]
 80039ba:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80039bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d1e3      	bne.n	800398a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2220      	movs	r2, #32
 80039c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2200      	movs	r2, #0
 80039ce:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	330c      	adds	r3, #12
 80039d6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039d8:	693b      	ldr	r3, [r7, #16]
 80039da:	e853 3f00 	ldrex	r3, [r3]
 80039de:	60fb      	str	r3, [r7, #12]
   return(result);
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	f023 0310 	bic.w	r3, r3, #16
 80039e6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	330c      	adds	r3, #12
 80039f0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80039f4:	61fa      	str	r2, [r7, #28]
 80039f6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039f8:	69b9      	ldr	r1, [r7, #24]
 80039fa:	69fa      	ldr	r2, [r7, #28]
 80039fc:	e841 2300 	strex	r3, r2, [r1]
 8003a00:	617b      	str	r3, [r7, #20]
   return(result);
 8003a02:	697b      	ldr	r3, [r7, #20]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d1e3      	bne.n	80039d0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003a08:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003a0c:	4619      	mov	r1, r3
 8003a0e:	6878      	ldr	r0, [r7, #4]
 8003a10:	f000 f83e 	bl	8003a90 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003a14:	e023      	b.n	8003a5e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003a16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d009      	beq.n	8003a36 <HAL_UART_IRQHandler+0x4ea>
 8003a22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d003      	beq.n	8003a36 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003a2e:	6878      	ldr	r0, [r7, #4]
 8003a30:	f000 f959 	bl	8003ce6 <UART_Transmit_IT>
    return;
 8003a34:	e014      	b.n	8003a60 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003a36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d00e      	beq.n	8003a60 <HAL_UART_IRQHandler+0x514>
 8003a42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d008      	beq.n	8003a60 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8003a4e:	6878      	ldr	r0, [r7, #4]
 8003a50:	f000 f999 	bl	8003d86 <UART_EndTransmit_IT>
    return;
 8003a54:	e004      	b.n	8003a60 <HAL_UART_IRQHandler+0x514>
    return;
 8003a56:	bf00      	nop
 8003a58:	e002      	b.n	8003a60 <HAL_UART_IRQHandler+0x514>
      return;
 8003a5a:	bf00      	nop
 8003a5c:	e000      	b.n	8003a60 <HAL_UART_IRQHandler+0x514>
      return;
 8003a5e:	bf00      	nop
  }
}
 8003a60:	37e8      	adds	r7, #232	; 0xe8
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bd80      	pop	{r7, pc}
 8003a66:	bf00      	nop

08003a68 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003a68:	b480      	push	{r7}
 8003a6a:	b083      	sub	sp, #12
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003a70:	bf00      	nop
 8003a72:	370c      	adds	r7, #12
 8003a74:	46bd      	mov	sp, r7
 8003a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7a:	4770      	bx	lr

08003a7c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	b083      	sub	sp, #12
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003a84:	bf00      	nop
 8003a86:	370c      	adds	r7, #12
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8e:	4770      	bx	lr

08003a90 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003a90:	b480      	push	{r7}
 8003a92:	b083      	sub	sp, #12
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
 8003a98:	460b      	mov	r3, r1
 8003a9a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003a9c:	bf00      	nop
 8003a9e:	370c      	adds	r7, #12
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa6:	4770      	bx	lr

08003aa8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b090      	sub	sp, #64	; 0x40
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	60f8      	str	r0, [r7, #12]
 8003ab0:	60b9      	str	r1, [r7, #8]
 8003ab2:	603b      	str	r3, [r7, #0]
 8003ab4:	4613      	mov	r3, r2
 8003ab6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ab8:	e050      	b.n	8003b5c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003aba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003abc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003ac0:	d04c      	beq.n	8003b5c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003ac2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d007      	beq.n	8003ad8 <UART_WaitOnFlagUntilTimeout+0x30>
 8003ac8:	f7fd ff44 	bl	8001954 <HAL_GetTick>
 8003acc:	4602      	mov	r2, r0
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	1ad3      	subs	r3, r2, r3
 8003ad2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003ad4:	429a      	cmp	r2, r3
 8003ad6:	d241      	bcs.n	8003b5c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	330c      	adds	r3, #12
 8003ade:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ae2:	e853 3f00 	ldrex	r3, [r3]
 8003ae6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aea:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003aee:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	330c      	adds	r3, #12
 8003af6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003af8:	637a      	str	r2, [r7, #52]	; 0x34
 8003afa:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003afc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003afe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003b00:	e841 2300 	strex	r3, r2, [r1]
 8003b04:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003b06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d1e5      	bne.n	8003ad8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	3314      	adds	r3, #20
 8003b12:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b14:	697b      	ldr	r3, [r7, #20]
 8003b16:	e853 3f00 	ldrex	r3, [r3]
 8003b1a:	613b      	str	r3, [r7, #16]
   return(result);
 8003b1c:	693b      	ldr	r3, [r7, #16]
 8003b1e:	f023 0301 	bic.w	r3, r3, #1
 8003b22:	63bb      	str	r3, [r7, #56]	; 0x38
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	3314      	adds	r3, #20
 8003b2a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003b2c:	623a      	str	r2, [r7, #32]
 8003b2e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b30:	69f9      	ldr	r1, [r7, #28]
 8003b32:	6a3a      	ldr	r2, [r7, #32]
 8003b34:	e841 2300 	strex	r3, r2, [r1]
 8003b38:	61bb      	str	r3, [r7, #24]
   return(result);
 8003b3a:	69bb      	ldr	r3, [r7, #24]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d1e5      	bne.n	8003b0c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	2220      	movs	r2, #32
 8003b44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	2220      	movs	r2, #32
 8003b4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	2200      	movs	r2, #0
 8003b54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003b58:	2303      	movs	r3, #3
 8003b5a:	e00f      	b.n	8003b7c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	681a      	ldr	r2, [r3, #0]
 8003b62:	68bb      	ldr	r3, [r7, #8]
 8003b64:	4013      	ands	r3, r2
 8003b66:	68ba      	ldr	r2, [r7, #8]
 8003b68:	429a      	cmp	r2, r3
 8003b6a:	bf0c      	ite	eq
 8003b6c:	2301      	moveq	r3, #1
 8003b6e:	2300      	movne	r3, #0
 8003b70:	b2db      	uxtb	r3, r3
 8003b72:	461a      	mov	r2, r3
 8003b74:	79fb      	ldrb	r3, [r7, #7]
 8003b76:	429a      	cmp	r2, r3
 8003b78:	d09f      	beq.n	8003aba <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003b7a:	2300      	movs	r3, #0
}
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	3740      	adds	r7, #64	; 0x40
 8003b80:	46bd      	mov	sp, r7
 8003b82:	bd80      	pop	{r7, pc}

08003b84 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003b84:	b480      	push	{r7}
 8003b86:	b085      	sub	sp, #20
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	60f8      	str	r0, [r7, #12]
 8003b8c:	60b9      	str	r1, [r7, #8]
 8003b8e:	4613      	mov	r3, r2
 8003b90:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	68ba      	ldr	r2, [r7, #8]
 8003b96:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	88fa      	ldrh	r2, [r7, #6]
 8003b9c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	88fa      	ldrh	r2, [r7, #6]
 8003ba2:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	2222      	movs	r2, #34	; 0x22
 8003bae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	68da      	ldr	r2, [r3, #12]
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003bc8:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	695a      	ldr	r2, [r3, #20]
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f042 0201 	orr.w	r2, r2, #1
 8003bd8:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	68da      	ldr	r2, [r3, #12]
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f042 0220 	orr.w	r2, r2, #32
 8003be8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003bea:	2300      	movs	r3, #0
}
 8003bec:	4618      	mov	r0, r3
 8003bee:	3714      	adds	r7, #20
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf6:	4770      	bx	lr

08003bf8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	b095      	sub	sp, #84	; 0x54
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	330c      	adds	r3, #12
 8003c06:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c0a:	e853 3f00 	ldrex	r3, [r3]
 8003c0e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003c10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c12:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003c16:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	330c      	adds	r3, #12
 8003c1e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003c20:	643a      	str	r2, [r7, #64]	; 0x40
 8003c22:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c24:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003c26:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003c28:	e841 2300 	strex	r3, r2, [r1]
 8003c2c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003c2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d1e5      	bne.n	8003c00 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	3314      	adds	r3, #20
 8003c3a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c3c:	6a3b      	ldr	r3, [r7, #32]
 8003c3e:	e853 3f00 	ldrex	r3, [r3]
 8003c42:	61fb      	str	r3, [r7, #28]
   return(result);
 8003c44:	69fb      	ldr	r3, [r7, #28]
 8003c46:	f023 0301 	bic.w	r3, r3, #1
 8003c4a:	64bb      	str	r3, [r7, #72]	; 0x48
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	3314      	adds	r3, #20
 8003c52:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003c54:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003c56:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c58:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003c5a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c5c:	e841 2300 	strex	r3, r2, [r1]
 8003c60:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d1e5      	bne.n	8003c34 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c6c:	2b01      	cmp	r3, #1
 8003c6e:	d119      	bne.n	8003ca4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	330c      	adds	r3, #12
 8003c76:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	e853 3f00 	ldrex	r3, [r3]
 8003c7e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003c80:	68bb      	ldr	r3, [r7, #8]
 8003c82:	f023 0310 	bic.w	r3, r3, #16
 8003c86:	647b      	str	r3, [r7, #68]	; 0x44
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	330c      	adds	r3, #12
 8003c8e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003c90:	61ba      	str	r2, [r7, #24]
 8003c92:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c94:	6979      	ldr	r1, [r7, #20]
 8003c96:	69ba      	ldr	r2, [r7, #24]
 8003c98:	e841 2300 	strex	r3, r2, [r1]
 8003c9c:	613b      	str	r3, [r7, #16]
   return(result);
 8003c9e:	693b      	ldr	r3, [r7, #16]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d1e5      	bne.n	8003c70 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2220      	movs	r2, #32
 8003ca8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2200      	movs	r2, #0
 8003cb0:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003cb2:	bf00      	nop
 8003cb4:	3754      	adds	r7, #84	; 0x54
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbc:	4770      	bx	lr

08003cbe <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003cbe:	b580      	push	{r7, lr}
 8003cc0:	b084      	sub	sp, #16
 8003cc2:	af00      	add	r7, sp, #0
 8003cc4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cca:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003cd8:	68f8      	ldr	r0, [r7, #12]
 8003cda:	f7ff fecf 	bl	8003a7c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003cde:	bf00      	nop
 8003ce0:	3710      	adds	r7, #16
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	bd80      	pop	{r7, pc}

08003ce6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003ce6:	b480      	push	{r7}
 8003ce8:	b085      	sub	sp, #20
 8003cea:	af00      	add	r7, sp, #0
 8003cec:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cf4:	b2db      	uxtb	r3, r3
 8003cf6:	2b21      	cmp	r3, #33	; 0x21
 8003cf8:	d13e      	bne.n	8003d78 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	689b      	ldr	r3, [r3, #8]
 8003cfe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d02:	d114      	bne.n	8003d2e <UART_Transmit_IT+0x48>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	691b      	ldr	r3, [r3, #16]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d110      	bne.n	8003d2e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6a1b      	ldr	r3, [r3, #32]
 8003d10:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	881b      	ldrh	r3, [r3, #0]
 8003d16:	461a      	mov	r2, r3
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d20:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6a1b      	ldr	r3, [r3, #32]
 8003d26:	1c9a      	adds	r2, r3, #2
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	621a      	str	r2, [r3, #32]
 8003d2c:	e008      	b.n	8003d40 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6a1b      	ldr	r3, [r3, #32]
 8003d32:	1c59      	adds	r1, r3, #1
 8003d34:	687a      	ldr	r2, [r7, #4]
 8003d36:	6211      	str	r1, [r2, #32]
 8003d38:	781a      	ldrb	r2, [r3, #0]
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003d44:	b29b      	uxth	r3, r3
 8003d46:	3b01      	subs	r3, #1
 8003d48:	b29b      	uxth	r3, r3
 8003d4a:	687a      	ldr	r2, [r7, #4]
 8003d4c:	4619      	mov	r1, r3
 8003d4e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d10f      	bne.n	8003d74 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	68da      	ldr	r2, [r3, #12]
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003d62:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	68da      	ldr	r2, [r3, #12]
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d72:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003d74:	2300      	movs	r3, #0
 8003d76:	e000      	b.n	8003d7a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003d78:	2302      	movs	r3, #2
  }
}
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	3714      	adds	r7, #20
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d84:	4770      	bx	lr

08003d86 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003d86:	b580      	push	{r7, lr}
 8003d88:	b082      	sub	sp, #8
 8003d8a:	af00      	add	r7, sp, #0
 8003d8c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	68da      	ldr	r2, [r3, #12]
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d9c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2220      	movs	r2, #32
 8003da2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003da6:	6878      	ldr	r0, [r7, #4]
 8003da8:	f7ff fe5e 	bl	8003a68 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003dac:	2300      	movs	r3, #0
}
 8003dae:	4618      	mov	r0, r3
 8003db0:	3708      	adds	r7, #8
 8003db2:	46bd      	mov	sp, r7
 8003db4:	bd80      	pop	{r7, pc}

08003db6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003db6:	b580      	push	{r7, lr}
 8003db8:	b08c      	sub	sp, #48	; 0x30
 8003dba:	af00      	add	r7, sp, #0
 8003dbc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003dc4:	b2db      	uxtb	r3, r3
 8003dc6:	2b22      	cmp	r3, #34	; 0x22
 8003dc8:	f040 80ab 	bne.w	8003f22 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	689b      	ldr	r3, [r3, #8]
 8003dd0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dd4:	d117      	bne.n	8003e06 <UART_Receive_IT+0x50>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	691b      	ldr	r3, [r3, #16]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d113      	bne.n	8003e06 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003dde:	2300      	movs	r3, #0
 8003de0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003de6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	685b      	ldr	r3, [r3, #4]
 8003dee:	b29b      	uxth	r3, r3
 8003df0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003df4:	b29a      	uxth	r2, r3
 8003df6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003df8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dfe:	1c9a      	adds	r2, r3, #2
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	629a      	str	r2, [r3, #40]	; 0x28
 8003e04:	e026      	b.n	8003e54 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e0a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	689b      	ldr	r3, [r3, #8]
 8003e14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e18:	d007      	beq.n	8003e2a <UART_Receive_IT+0x74>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	689b      	ldr	r3, [r3, #8]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d10a      	bne.n	8003e38 <UART_Receive_IT+0x82>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	691b      	ldr	r3, [r3, #16]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d106      	bne.n	8003e38 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	b2da      	uxtb	r2, r3
 8003e32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e34:	701a      	strb	r2, [r3, #0]
 8003e36:	e008      	b.n	8003e4a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	b2db      	uxtb	r3, r3
 8003e40:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003e44:	b2da      	uxtb	r2, r3
 8003e46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e48:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e4e:	1c5a      	adds	r2, r3, #1
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003e58:	b29b      	uxth	r3, r3
 8003e5a:	3b01      	subs	r3, #1
 8003e5c:	b29b      	uxth	r3, r3
 8003e5e:	687a      	ldr	r2, [r7, #4]
 8003e60:	4619      	mov	r1, r3
 8003e62:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d15a      	bne.n	8003f1e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	68da      	ldr	r2, [r3, #12]
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f022 0220 	bic.w	r2, r2, #32
 8003e76:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	68da      	ldr	r2, [r3, #12]
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003e86:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	695a      	ldr	r2, [r3, #20]
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f022 0201 	bic.w	r2, r2, #1
 8003e96:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2220      	movs	r2, #32
 8003e9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ea4:	2b01      	cmp	r3, #1
 8003ea6:	d135      	bne.n	8003f14 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2200      	movs	r2, #0
 8003eac:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	330c      	adds	r3, #12
 8003eb4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eb6:	697b      	ldr	r3, [r7, #20]
 8003eb8:	e853 3f00 	ldrex	r3, [r3]
 8003ebc:	613b      	str	r3, [r7, #16]
   return(result);
 8003ebe:	693b      	ldr	r3, [r7, #16]
 8003ec0:	f023 0310 	bic.w	r3, r3, #16
 8003ec4:	627b      	str	r3, [r7, #36]	; 0x24
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	330c      	adds	r3, #12
 8003ecc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ece:	623a      	str	r2, [r7, #32]
 8003ed0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ed2:	69f9      	ldr	r1, [r7, #28]
 8003ed4:	6a3a      	ldr	r2, [r7, #32]
 8003ed6:	e841 2300 	strex	r3, r2, [r1]
 8003eda:	61bb      	str	r3, [r7, #24]
   return(result);
 8003edc:	69bb      	ldr	r3, [r7, #24]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d1e5      	bne.n	8003eae <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f003 0310 	and.w	r3, r3, #16
 8003eec:	2b10      	cmp	r3, #16
 8003eee:	d10a      	bne.n	8003f06 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	60fb      	str	r3, [r7, #12]
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	60fb      	str	r3, [r7, #12]
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	60fb      	str	r3, [r7, #12]
 8003f04:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003f0a:	4619      	mov	r1, r3
 8003f0c:	6878      	ldr	r0, [r7, #4]
 8003f0e:	f7ff fdbf 	bl	8003a90 <HAL_UARTEx_RxEventCallback>
 8003f12:	e002      	b.n	8003f1a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003f14:	6878      	ldr	r0, [r7, #4]
 8003f16:	f7fd fae1 	bl	80014dc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	e002      	b.n	8003f24 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8003f1e:	2300      	movs	r3, #0
 8003f20:	e000      	b.n	8003f24 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8003f22:	2302      	movs	r3, #2
  }
}
 8003f24:	4618      	mov	r0, r3
 8003f26:	3730      	adds	r7, #48	; 0x30
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	bd80      	pop	{r7, pc}

08003f2c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f30:	b09f      	sub	sp, #124	; 0x7c
 8003f32:	af00      	add	r7, sp, #0
 8003f34:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	691b      	ldr	r3, [r3, #16]
 8003f3c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003f40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f42:	68d9      	ldr	r1, [r3, #12]
 8003f44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f46:	681a      	ldr	r2, [r3, #0]
 8003f48:	ea40 0301 	orr.w	r3, r0, r1
 8003f4c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003f4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f50:	689a      	ldr	r2, [r3, #8]
 8003f52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f54:	691b      	ldr	r3, [r3, #16]
 8003f56:	431a      	orrs	r2, r3
 8003f58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f5a:	695b      	ldr	r3, [r3, #20]
 8003f5c:	431a      	orrs	r2, r3
 8003f5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f60:	69db      	ldr	r3, [r3, #28]
 8003f62:	4313      	orrs	r3, r2
 8003f64:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8003f66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	68db      	ldr	r3, [r3, #12]
 8003f6c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003f70:	f021 010c 	bic.w	r1, r1, #12
 8003f74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f76:	681a      	ldr	r2, [r3, #0]
 8003f78:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003f7a:	430b      	orrs	r3, r1
 8003f7c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003f7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	695b      	ldr	r3, [r3, #20]
 8003f84:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003f88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f8a:	6999      	ldr	r1, [r3, #24]
 8003f8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f8e:	681a      	ldr	r2, [r3, #0]
 8003f90:	ea40 0301 	orr.w	r3, r0, r1
 8003f94:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003f96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f98:	681a      	ldr	r2, [r3, #0]
 8003f9a:	4bc5      	ldr	r3, [pc, #788]	; (80042b0 <UART_SetConfig+0x384>)
 8003f9c:	429a      	cmp	r2, r3
 8003f9e:	d004      	beq.n	8003faa <UART_SetConfig+0x7e>
 8003fa0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fa2:	681a      	ldr	r2, [r3, #0]
 8003fa4:	4bc3      	ldr	r3, [pc, #780]	; (80042b4 <UART_SetConfig+0x388>)
 8003fa6:	429a      	cmp	r2, r3
 8003fa8:	d103      	bne.n	8003fb2 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003faa:	f7ff f909 	bl	80031c0 <HAL_RCC_GetPCLK2Freq>
 8003fae:	6778      	str	r0, [r7, #116]	; 0x74
 8003fb0:	e002      	b.n	8003fb8 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003fb2:	f7ff f8f1 	bl	8003198 <HAL_RCC_GetPCLK1Freq>
 8003fb6:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003fb8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fba:	69db      	ldr	r3, [r3, #28]
 8003fbc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003fc0:	f040 80b6 	bne.w	8004130 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003fc4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003fc6:	461c      	mov	r4, r3
 8003fc8:	f04f 0500 	mov.w	r5, #0
 8003fcc:	4622      	mov	r2, r4
 8003fce:	462b      	mov	r3, r5
 8003fd0:	1891      	adds	r1, r2, r2
 8003fd2:	6439      	str	r1, [r7, #64]	; 0x40
 8003fd4:	415b      	adcs	r3, r3
 8003fd6:	647b      	str	r3, [r7, #68]	; 0x44
 8003fd8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003fdc:	1912      	adds	r2, r2, r4
 8003fde:	eb45 0303 	adc.w	r3, r5, r3
 8003fe2:	f04f 0000 	mov.w	r0, #0
 8003fe6:	f04f 0100 	mov.w	r1, #0
 8003fea:	00d9      	lsls	r1, r3, #3
 8003fec:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003ff0:	00d0      	lsls	r0, r2, #3
 8003ff2:	4602      	mov	r2, r0
 8003ff4:	460b      	mov	r3, r1
 8003ff6:	1911      	adds	r1, r2, r4
 8003ff8:	6639      	str	r1, [r7, #96]	; 0x60
 8003ffa:	416b      	adcs	r3, r5
 8003ffc:	667b      	str	r3, [r7, #100]	; 0x64
 8003ffe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	461a      	mov	r2, r3
 8004004:	f04f 0300 	mov.w	r3, #0
 8004008:	1891      	adds	r1, r2, r2
 800400a:	63b9      	str	r1, [r7, #56]	; 0x38
 800400c:	415b      	adcs	r3, r3
 800400e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004010:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004014:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8004018:	f7fc fd20 	bl	8000a5c <__aeabi_uldivmod>
 800401c:	4602      	mov	r2, r0
 800401e:	460b      	mov	r3, r1
 8004020:	4ba5      	ldr	r3, [pc, #660]	; (80042b8 <UART_SetConfig+0x38c>)
 8004022:	fba3 2302 	umull	r2, r3, r3, r2
 8004026:	095b      	lsrs	r3, r3, #5
 8004028:	011e      	lsls	r6, r3, #4
 800402a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800402c:	461c      	mov	r4, r3
 800402e:	f04f 0500 	mov.w	r5, #0
 8004032:	4622      	mov	r2, r4
 8004034:	462b      	mov	r3, r5
 8004036:	1891      	adds	r1, r2, r2
 8004038:	6339      	str	r1, [r7, #48]	; 0x30
 800403a:	415b      	adcs	r3, r3
 800403c:	637b      	str	r3, [r7, #52]	; 0x34
 800403e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004042:	1912      	adds	r2, r2, r4
 8004044:	eb45 0303 	adc.w	r3, r5, r3
 8004048:	f04f 0000 	mov.w	r0, #0
 800404c:	f04f 0100 	mov.w	r1, #0
 8004050:	00d9      	lsls	r1, r3, #3
 8004052:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004056:	00d0      	lsls	r0, r2, #3
 8004058:	4602      	mov	r2, r0
 800405a:	460b      	mov	r3, r1
 800405c:	1911      	adds	r1, r2, r4
 800405e:	65b9      	str	r1, [r7, #88]	; 0x58
 8004060:	416b      	adcs	r3, r5
 8004062:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004064:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004066:	685b      	ldr	r3, [r3, #4]
 8004068:	461a      	mov	r2, r3
 800406a:	f04f 0300 	mov.w	r3, #0
 800406e:	1891      	adds	r1, r2, r2
 8004070:	62b9      	str	r1, [r7, #40]	; 0x28
 8004072:	415b      	adcs	r3, r3
 8004074:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004076:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800407a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800407e:	f7fc fced 	bl	8000a5c <__aeabi_uldivmod>
 8004082:	4602      	mov	r2, r0
 8004084:	460b      	mov	r3, r1
 8004086:	4b8c      	ldr	r3, [pc, #560]	; (80042b8 <UART_SetConfig+0x38c>)
 8004088:	fba3 1302 	umull	r1, r3, r3, r2
 800408c:	095b      	lsrs	r3, r3, #5
 800408e:	2164      	movs	r1, #100	; 0x64
 8004090:	fb01 f303 	mul.w	r3, r1, r3
 8004094:	1ad3      	subs	r3, r2, r3
 8004096:	00db      	lsls	r3, r3, #3
 8004098:	3332      	adds	r3, #50	; 0x32
 800409a:	4a87      	ldr	r2, [pc, #540]	; (80042b8 <UART_SetConfig+0x38c>)
 800409c:	fba2 2303 	umull	r2, r3, r2, r3
 80040a0:	095b      	lsrs	r3, r3, #5
 80040a2:	005b      	lsls	r3, r3, #1
 80040a4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80040a8:	441e      	add	r6, r3
 80040aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80040ac:	4618      	mov	r0, r3
 80040ae:	f04f 0100 	mov.w	r1, #0
 80040b2:	4602      	mov	r2, r0
 80040b4:	460b      	mov	r3, r1
 80040b6:	1894      	adds	r4, r2, r2
 80040b8:	623c      	str	r4, [r7, #32]
 80040ba:	415b      	adcs	r3, r3
 80040bc:	627b      	str	r3, [r7, #36]	; 0x24
 80040be:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80040c2:	1812      	adds	r2, r2, r0
 80040c4:	eb41 0303 	adc.w	r3, r1, r3
 80040c8:	f04f 0400 	mov.w	r4, #0
 80040cc:	f04f 0500 	mov.w	r5, #0
 80040d0:	00dd      	lsls	r5, r3, #3
 80040d2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80040d6:	00d4      	lsls	r4, r2, #3
 80040d8:	4622      	mov	r2, r4
 80040da:	462b      	mov	r3, r5
 80040dc:	1814      	adds	r4, r2, r0
 80040de:	653c      	str	r4, [r7, #80]	; 0x50
 80040e0:	414b      	adcs	r3, r1
 80040e2:	657b      	str	r3, [r7, #84]	; 0x54
 80040e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040e6:	685b      	ldr	r3, [r3, #4]
 80040e8:	461a      	mov	r2, r3
 80040ea:	f04f 0300 	mov.w	r3, #0
 80040ee:	1891      	adds	r1, r2, r2
 80040f0:	61b9      	str	r1, [r7, #24]
 80040f2:	415b      	adcs	r3, r3
 80040f4:	61fb      	str	r3, [r7, #28]
 80040f6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80040fa:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80040fe:	f7fc fcad 	bl	8000a5c <__aeabi_uldivmod>
 8004102:	4602      	mov	r2, r0
 8004104:	460b      	mov	r3, r1
 8004106:	4b6c      	ldr	r3, [pc, #432]	; (80042b8 <UART_SetConfig+0x38c>)
 8004108:	fba3 1302 	umull	r1, r3, r3, r2
 800410c:	095b      	lsrs	r3, r3, #5
 800410e:	2164      	movs	r1, #100	; 0x64
 8004110:	fb01 f303 	mul.w	r3, r1, r3
 8004114:	1ad3      	subs	r3, r2, r3
 8004116:	00db      	lsls	r3, r3, #3
 8004118:	3332      	adds	r3, #50	; 0x32
 800411a:	4a67      	ldr	r2, [pc, #412]	; (80042b8 <UART_SetConfig+0x38c>)
 800411c:	fba2 2303 	umull	r2, r3, r2, r3
 8004120:	095b      	lsrs	r3, r3, #5
 8004122:	f003 0207 	and.w	r2, r3, #7
 8004126:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4432      	add	r2, r6
 800412c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800412e:	e0b9      	b.n	80042a4 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004130:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004132:	461c      	mov	r4, r3
 8004134:	f04f 0500 	mov.w	r5, #0
 8004138:	4622      	mov	r2, r4
 800413a:	462b      	mov	r3, r5
 800413c:	1891      	adds	r1, r2, r2
 800413e:	6139      	str	r1, [r7, #16]
 8004140:	415b      	adcs	r3, r3
 8004142:	617b      	str	r3, [r7, #20]
 8004144:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004148:	1912      	adds	r2, r2, r4
 800414a:	eb45 0303 	adc.w	r3, r5, r3
 800414e:	f04f 0000 	mov.w	r0, #0
 8004152:	f04f 0100 	mov.w	r1, #0
 8004156:	00d9      	lsls	r1, r3, #3
 8004158:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800415c:	00d0      	lsls	r0, r2, #3
 800415e:	4602      	mov	r2, r0
 8004160:	460b      	mov	r3, r1
 8004162:	eb12 0804 	adds.w	r8, r2, r4
 8004166:	eb43 0905 	adc.w	r9, r3, r5
 800416a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800416c:	685b      	ldr	r3, [r3, #4]
 800416e:	4618      	mov	r0, r3
 8004170:	f04f 0100 	mov.w	r1, #0
 8004174:	f04f 0200 	mov.w	r2, #0
 8004178:	f04f 0300 	mov.w	r3, #0
 800417c:	008b      	lsls	r3, r1, #2
 800417e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004182:	0082      	lsls	r2, r0, #2
 8004184:	4640      	mov	r0, r8
 8004186:	4649      	mov	r1, r9
 8004188:	f7fc fc68 	bl	8000a5c <__aeabi_uldivmod>
 800418c:	4602      	mov	r2, r0
 800418e:	460b      	mov	r3, r1
 8004190:	4b49      	ldr	r3, [pc, #292]	; (80042b8 <UART_SetConfig+0x38c>)
 8004192:	fba3 2302 	umull	r2, r3, r3, r2
 8004196:	095b      	lsrs	r3, r3, #5
 8004198:	011e      	lsls	r6, r3, #4
 800419a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800419c:	4618      	mov	r0, r3
 800419e:	f04f 0100 	mov.w	r1, #0
 80041a2:	4602      	mov	r2, r0
 80041a4:	460b      	mov	r3, r1
 80041a6:	1894      	adds	r4, r2, r2
 80041a8:	60bc      	str	r4, [r7, #8]
 80041aa:	415b      	adcs	r3, r3
 80041ac:	60fb      	str	r3, [r7, #12]
 80041ae:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80041b2:	1812      	adds	r2, r2, r0
 80041b4:	eb41 0303 	adc.w	r3, r1, r3
 80041b8:	f04f 0400 	mov.w	r4, #0
 80041bc:	f04f 0500 	mov.w	r5, #0
 80041c0:	00dd      	lsls	r5, r3, #3
 80041c2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80041c6:	00d4      	lsls	r4, r2, #3
 80041c8:	4622      	mov	r2, r4
 80041ca:	462b      	mov	r3, r5
 80041cc:	1814      	adds	r4, r2, r0
 80041ce:	64bc      	str	r4, [r7, #72]	; 0x48
 80041d0:	414b      	adcs	r3, r1
 80041d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80041d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	4618      	mov	r0, r3
 80041da:	f04f 0100 	mov.w	r1, #0
 80041de:	f04f 0200 	mov.w	r2, #0
 80041e2:	f04f 0300 	mov.w	r3, #0
 80041e6:	008b      	lsls	r3, r1, #2
 80041e8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80041ec:	0082      	lsls	r2, r0, #2
 80041ee:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80041f2:	f7fc fc33 	bl	8000a5c <__aeabi_uldivmod>
 80041f6:	4602      	mov	r2, r0
 80041f8:	460b      	mov	r3, r1
 80041fa:	4b2f      	ldr	r3, [pc, #188]	; (80042b8 <UART_SetConfig+0x38c>)
 80041fc:	fba3 1302 	umull	r1, r3, r3, r2
 8004200:	095b      	lsrs	r3, r3, #5
 8004202:	2164      	movs	r1, #100	; 0x64
 8004204:	fb01 f303 	mul.w	r3, r1, r3
 8004208:	1ad3      	subs	r3, r2, r3
 800420a:	011b      	lsls	r3, r3, #4
 800420c:	3332      	adds	r3, #50	; 0x32
 800420e:	4a2a      	ldr	r2, [pc, #168]	; (80042b8 <UART_SetConfig+0x38c>)
 8004210:	fba2 2303 	umull	r2, r3, r2, r3
 8004214:	095b      	lsrs	r3, r3, #5
 8004216:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800421a:	441e      	add	r6, r3
 800421c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800421e:	4618      	mov	r0, r3
 8004220:	f04f 0100 	mov.w	r1, #0
 8004224:	4602      	mov	r2, r0
 8004226:	460b      	mov	r3, r1
 8004228:	1894      	adds	r4, r2, r2
 800422a:	603c      	str	r4, [r7, #0]
 800422c:	415b      	adcs	r3, r3
 800422e:	607b      	str	r3, [r7, #4]
 8004230:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004234:	1812      	adds	r2, r2, r0
 8004236:	eb41 0303 	adc.w	r3, r1, r3
 800423a:	f04f 0400 	mov.w	r4, #0
 800423e:	f04f 0500 	mov.w	r5, #0
 8004242:	00dd      	lsls	r5, r3, #3
 8004244:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004248:	00d4      	lsls	r4, r2, #3
 800424a:	4622      	mov	r2, r4
 800424c:	462b      	mov	r3, r5
 800424e:	eb12 0a00 	adds.w	sl, r2, r0
 8004252:	eb43 0b01 	adc.w	fp, r3, r1
 8004256:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004258:	685b      	ldr	r3, [r3, #4]
 800425a:	4618      	mov	r0, r3
 800425c:	f04f 0100 	mov.w	r1, #0
 8004260:	f04f 0200 	mov.w	r2, #0
 8004264:	f04f 0300 	mov.w	r3, #0
 8004268:	008b      	lsls	r3, r1, #2
 800426a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800426e:	0082      	lsls	r2, r0, #2
 8004270:	4650      	mov	r0, sl
 8004272:	4659      	mov	r1, fp
 8004274:	f7fc fbf2 	bl	8000a5c <__aeabi_uldivmod>
 8004278:	4602      	mov	r2, r0
 800427a:	460b      	mov	r3, r1
 800427c:	4b0e      	ldr	r3, [pc, #56]	; (80042b8 <UART_SetConfig+0x38c>)
 800427e:	fba3 1302 	umull	r1, r3, r3, r2
 8004282:	095b      	lsrs	r3, r3, #5
 8004284:	2164      	movs	r1, #100	; 0x64
 8004286:	fb01 f303 	mul.w	r3, r1, r3
 800428a:	1ad3      	subs	r3, r2, r3
 800428c:	011b      	lsls	r3, r3, #4
 800428e:	3332      	adds	r3, #50	; 0x32
 8004290:	4a09      	ldr	r2, [pc, #36]	; (80042b8 <UART_SetConfig+0x38c>)
 8004292:	fba2 2303 	umull	r2, r3, r2, r3
 8004296:	095b      	lsrs	r3, r3, #5
 8004298:	f003 020f 	and.w	r2, r3, #15
 800429c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	4432      	add	r2, r6
 80042a2:	609a      	str	r2, [r3, #8]
}
 80042a4:	bf00      	nop
 80042a6:	377c      	adds	r7, #124	; 0x7c
 80042a8:	46bd      	mov	sp, r7
 80042aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80042ae:	bf00      	nop
 80042b0:	40011000 	.word	0x40011000
 80042b4:	40011400 	.word	0x40011400
 80042b8:	51eb851f 	.word	0x51eb851f

080042bc <__errno>:
 80042bc:	4b01      	ldr	r3, [pc, #4]	; (80042c4 <__errno+0x8>)
 80042be:	6818      	ldr	r0, [r3, #0]
 80042c0:	4770      	bx	lr
 80042c2:	bf00      	nop
 80042c4:	20000010 	.word	0x20000010

080042c8 <__libc_init_array>:
 80042c8:	b570      	push	{r4, r5, r6, lr}
 80042ca:	4d0d      	ldr	r5, [pc, #52]	; (8004300 <__libc_init_array+0x38>)
 80042cc:	4c0d      	ldr	r4, [pc, #52]	; (8004304 <__libc_init_array+0x3c>)
 80042ce:	1b64      	subs	r4, r4, r5
 80042d0:	10a4      	asrs	r4, r4, #2
 80042d2:	2600      	movs	r6, #0
 80042d4:	42a6      	cmp	r6, r4
 80042d6:	d109      	bne.n	80042ec <__libc_init_array+0x24>
 80042d8:	4d0b      	ldr	r5, [pc, #44]	; (8004308 <__libc_init_array+0x40>)
 80042da:	4c0c      	ldr	r4, [pc, #48]	; (800430c <__libc_init_array+0x44>)
 80042dc:	f000 fc94 	bl	8004c08 <_init>
 80042e0:	1b64      	subs	r4, r4, r5
 80042e2:	10a4      	asrs	r4, r4, #2
 80042e4:	2600      	movs	r6, #0
 80042e6:	42a6      	cmp	r6, r4
 80042e8:	d105      	bne.n	80042f6 <__libc_init_array+0x2e>
 80042ea:	bd70      	pop	{r4, r5, r6, pc}
 80042ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80042f0:	4798      	blx	r3
 80042f2:	3601      	adds	r6, #1
 80042f4:	e7ee      	b.n	80042d4 <__libc_init_array+0xc>
 80042f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80042fa:	4798      	blx	r3
 80042fc:	3601      	adds	r6, #1
 80042fe:	e7f2      	b.n	80042e6 <__libc_init_array+0x1e>
 8004300:	08004d28 	.word	0x08004d28
 8004304:	08004d28 	.word	0x08004d28
 8004308:	08004d28 	.word	0x08004d28
 800430c:	08004d2c 	.word	0x08004d2c

08004310 <memset>:
 8004310:	4402      	add	r2, r0
 8004312:	4603      	mov	r3, r0
 8004314:	4293      	cmp	r3, r2
 8004316:	d100      	bne.n	800431a <memset+0xa>
 8004318:	4770      	bx	lr
 800431a:	f803 1b01 	strb.w	r1, [r3], #1
 800431e:	e7f9      	b.n	8004314 <memset+0x4>

08004320 <siprintf>:
 8004320:	b40e      	push	{r1, r2, r3}
 8004322:	b500      	push	{lr}
 8004324:	b09c      	sub	sp, #112	; 0x70
 8004326:	ab1d      	add	r3, sp, #116	; 0x74
 8004328:	9002      	str	r0, [sp, #8]
 800432a:	9006      	str	r0, [sp, #24]
 800432c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004330:	4809      	ldr	r0, [pc, #36]	; (8004358 <siprintf+0x38>)
 8004332:	9107      	str	r1, [sp, #28]
 8004334:	9104      	str	r1, [sp, #16]
 8004336:	4909      	ldr	r1, [pc, #36]	; (800435c <siprintf+0x3c>)
 8004338:	f853 2b04 	ldr.w	r2, [r3], #4
 800433c:	9105      	str	r1, [sp, #20]
 800433e:	6800      	ldr	r0, [r0, #0]
 8004340:	9301      	str	r3, [sp, #4]
 8004342:	a902      	add	r1, sp, #8
 8004344:	f000 f868 	bl	8004418 <_svfiprintf_r>
 8004348:	9b02      	ldr	r3, [sp, #8]
 800434a:	2200      	movs	r2, #0
 800434c:	701a      	strb	r2, [r3, #0]
 800434e:	b01c      	add	sp, #112	; 0x70
 8004350:	f85d eb04 	ldr.w	lr, [sp], #4
 8004354:	b003      	add	sp, #12
 8004356:	4770      	bx	lr
 8004358:	20000010 	.word	0x20000010
 800435c:	ffff0208 	.word	0xffff0208

08004360 <__ssputs_r>:
 8004360:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004364:	688e      	ldr	r6, [r1, #8]
 8004366:	429e      	cmp	r6, r3
 8004368:	4682      	mov	sl, r0
 800436a:	460c      	mov	r4, r1
 800436c:	4690      	mov	r8, r2
 800436e:	461f      	mov	r7, r3
 8004370:	d838      	bhi.n	80043e4 <__ssputs_r+0x84>
 8004372:	898a      	ldrh	r2, [r1, #12]
 8004374:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004378:	d032      	beq.n	80043e0 <__ssputs_r+0x80>
 800437a:	6825      	ldr	r5, [r4, #0]
 800437c:	6909      	ldr	r1, [r1, #16]
 800437e:	eba5 0901 	sub.w	r9, r5, r1
 8004382:	6965      	ldr	r5, [r4, #20]
 8004384:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004388:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800438c:	3301      	adds	r3, #1
 800438e:	444b      	add	r3, r9
 8004390:	106d      	asrs	r5, r5, #1
 8004392:	429d      	cmp	r5, r3
 8004394:	bf38      	it	cc
 8004396:	461d      	movcc	r5, r3
 8004398:	0553      	lsls	r3, r2, #21
 800439a:	d531      	bpl.n	8004400 <__ssputs_r+0xa0>
 800439c:	4629      	mov	r1, r5
 800439e:	f000 fb47 	bl	8004a30 <_malloc_r>
 80043a2:	4606      	mov	r6, r0
 80043a4:	b950      	cbnz	r0, 80043bc <__ssputs_r+0x5c>
 80043a6:	230c      	movs	r3, #12
 80043a8:	f8ca 3000 	str.w	r3, [sl]
 80043ac:	89a3      	ldrh	r3, [r4, #12]
 80043ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80043b2:	81a3      	strh	r3, [r4, #12]
 80043b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80043b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80043bc:	6921      	ldr	r1, [r4, #16]
 80043be:	464a      	mov	r2, r9
 80043c0:	f000 fabe 	bl	8004940 <memcpy>
 80043c4:	89a3      	ldrh	r3, [r4, #12]
 80043c6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80043ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043ce:	81a3      	strh	r3, [r4, #12]
 80043d0:	6126      	str	r6, [r4, #16]
 80043d2:	6165      	str	r5, [r4, #20]
 80043d4:	444e      	add	r6, r9
 80043d6:	eba5 0509 	sub.w	r5, r5, r9
 80043da:	6026      	str	r6, [r4, #0]
 80043dc:	60a5      	str	r5, [r4, #8]
 80043de:	463e      	mov	r6, r7
 80043e0:	42be      	cmp	r6, r7
 80043e2:	d900      	bls.n	80043e6 <__ssputs_r+0x86>
 80043e4:	463e      	mov	r6, r7
 80043e6:	4632      	mov	r2, r6
 80043e8:	6820      	ldr	r0, [r4, #0]
 80043ea:	4641      	mov	r1, r8
 80043ec:	f000 fab6 	bl	800495c <memmove>
 80043f0:	68a3      	ldr	r3, [r4, #8]
 80043f2:	6822      	ldr	r2, [r4, #0]
 80043f4:	1b9b      	subs	r3, r3, r6
 80043f6:	4432      	add	r2, r6
 80043f8:	60a3      	str	r3, [r4, #8]
 80043fa:	6022      	str	r2, [r4, #0]
 80043fc:	2000      	movs	r0, #0
 80043fe:	e7db      	b.n	80043b8 <__ssputs_r+0x58>
 8004400:	462a      	mov	r2, r5
 8004402:	f000 fb6f 	bl	8004ae4 <_realloc_r>
 8004406:	4606      	mov	r6, r0
 8004408:	2800      	cmp	r0, #0
 800440a:	d1e1      	bne.n	80043d0 <__ssputs_r+0x70>
 800440c:	6921      	ldr	r1, [r4, #16]
 800440e:	4650      	mov	r0, sl
 8004410:	f000 fabe 	bl	8004990 <_free_r>
 8004414:	e7c7      	b.n	80043a6 <__ssputs_r+0x46>
	...

08004418 <_svfiprintf_r>:
 8004418:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800441c:	4698      	mov	r8, r3
 800441e:	898b      	ldrh	r3, [r1, #12]
 8004420:	061b      	lsls	r3, r3, #24
 8004422:	b09d      	sub	sp, #116	; 0x74
 8004424:	4607      	mov	r7, r0
 8004426:	460d      	mov	r5, r1
 8004428:	4614      	mov	r4, r2
 800442a:	d50e      	bpl.n	800444a <_svfiprintf_r+0x32>
 800442c:	690b      	ldr	r3, [r1, #16]
 800442e:	b963      	cbnz	r3, 800444a <_svfiprintf_r+0x32>
 8004430:	2140      	movs	r1, #64	; 0x40
 8004432:	f000 fafd 	bl	8004a30 <_malloc_r>
 8004436:	6028      	str	r0, [r5, #0]
 8004438:	6128      	str	r0, [r5, #16]
 800443a:	b920      	cbnz	r0, 8004446 <_svfiprintf_r+0x2e>
 800443c:	230c      	movs	r3, #12
 800443e:	603b      	str	r3, [r7, #0]
 8004440:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004444:	e0d1      	b.n	80045ea <_svfiprintf_r+0x1d2>
 8004446:	2340      	movs	r3, #64	; 0x40
 8004448:	616b      	str	r3, [r5, #20]
 800444a:	2300      	movs	r3, #0
 800444c:	9309      	str	r3, [sp, #36]	; 0x24
 800444e:	2320      	movs	r3, #32
 8004450:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004454:	f8cd 800c 	str.w	r8, [sp, #12]
 8004458:	2330      	movs	r3, #48	; 0x30
 800445a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004604 <_svfiprintf_r+0x1ec>
 800445e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004462:	f04f 0901 	mov.w	r9, #1
 8004466:	4623      	mov	r3, r4
 8004468:	469a      	mov	sl, r3
 800446a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800446e:	b10a      	cbz	r2, 8004474 <_svfiprintf_r+0x5c>
 8004470:	2a25      	cmp	r2, #37	; 0x25
 8004472:	d1f9      	bne.n	8004468 <_svfiprintf_r+0x50>
 8004474:	ebba 0b04 	subs.w	fp, sl, r4
 8004478:	d00b      	beq.n	8004492 <_svfiprintf_r+0x7a>
 800447a:	465b      	mov	r3, fp
 800447c:	4622      	mov	r2, r4
 800447e:	4629      	mov	r1, r5
 8004480:	4638      	mov	r0, r7
 8004482:	f7ff ff6d 	bl	8004360 <__ssputs_r>
 8004486:	3001      	adds	r0, #1
 8004488:	f000 80aa 	beq.w	80045e0 <_svfiprintf_r+0x1c8>
 800448c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800448e:	445a      	add	r2, fp
 8004490:	9209      	str	r2, [sp, #36]	; 0x24
 8004492:	f89a 3000 	ldrb.w	r3, [sl]
 8004496:	2b00      	cmp	r3, #0
 8004498:	f000 80a2 	beq.w	80045e0 <_svfiprintf_r+0x1c8>
 800449c:	2300      	movs	r3, #0
 800449e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80044a2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80044a6:	f10a 0a01 	add.w	sl, sl, #1
 80044aa:	9304      	str	r3, [sp, #16]
 80044ac:	9307      	str	r3, [sp, #28]
 80044ae:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80044b2:	931a      	str	r3, [sp, #104]	; 0x68
 80044b4:	4654      	mov	r4, sl
 80044b6:	2205      	movs	r2, #5
 80044b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80044bc:	4851      	ldr	r0, [pc, #324]	; (8004604 <_svfiprintf_r+0x1ec>)
 80044be:	f7fb fe8f 	bl	80001e0 <memchr>
 80044c2:	9a04      	ldr	r2, [sp, #16]
 80044c4:	b9d8      	cbnz	r0, 80044fe <_svfiprintf_r+0xe6>
 80044c6:	06d0      	lsls	r0, r2, #27
 80044c8:	bf44      	itt	mi
 80044ca:	2320      	movmi	r3, #32
 80044cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80044d0:	0711      	lsls	r1, r2, #28
 80044d2:	bf44      	itt	mi
 80044d4:	232b      	movmi	r3, #43	; 0x2b
 80044d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80044da:	f89a 3000 	ldrb.w	r3, [sl]
 80044de:	2b2a      	cmp	r3, #42	; 0x2a
 80044e0:	d015      	beq.n	800450e <_svfiprintf_r+0xf6>
 80044e2:	9a07      	ldr	r2, [sp, #28]
 80044e4:	4654      	mov	r4, sl
 80044e6:	2000      	movs	r0, #0
 80044e8:	f04f 0c0a 	mov.w	ip, #10
 80044ec:	4621      	mov	r1, r4
 80044ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 80044f2:	3b30      	subs	r3, #48	; 0x30
 80044f4:	2b09      	cmp	r3, #9
 80044f6:	d94e      	bls.n	8004596 <_svfiprintf_r+0x17e>
 80044f8:	b1b0      	cbz	r0, 8004528 <_svfiprintf_r+0x110>
 80044fa:	9207      	str	r2, [sp, #28]
 80044fc:	e014      	b.n	8004528 <_svfiprintf_r+0x110>
 80044fe:	eba0 0308 	sub.w	r3, r0, r8
 8004502:	fa09 f303 	lsl.w	r3, r9, r3
 8004506:	4313      	orrs	r3, r2
 8004508:	9304      	str	r3, [sp, #16]
 800450a:	46a2      	mov	sl, r4
 800450c:	e7d2      	b.n	80044b4 <_svfiprintf_r+0x9c>
 800450e:	9b03      	ldr	r3, [sp, #12]
 8004510:	1d19      	adds	r1, r3, #4
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	9103      	str	r1, [sp, #12]
 8004516:	2b00      	cmp	r3, #0
 8004518:	bfbb      	ittet	lt
 800451a:	425b      	neglt	r3, r3
 800451c:	f042 0202 	orrlt.w	r2, r2, #2
 8004520:	9307      	strge	r3, [sp, #28]
 8004522:	9307      	strlt	r3, [sp, #28]
 8004524:	bfb8      	it	lt
 8004526:	9204      	strlt	r2, [sp, #16]
 8004528:	7823      	ldrb	r3, [r4, #0]
 800452a:	2b2e      	cmp	r3, #46	; 0x2e
 800452c:	d10c      	bne.n	8004548 <_svfiprintf_r+0x130>
 800452e:	7863      	ldrb	r3, [r4, #1]
 8004530:	2b2a      	cmp	r3, #42	; 0x2a
 8004532:	d135      	bne.n	80045a0 <_svfiprintf_r+0x188>
 8004534:	9b03      	ldr	r3, [sp, #12]
 8004536:	1d1a      	adds	r2, r3, #4
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	9203      	str	r2, [sp, #12]
 800453c:	2b00      	cmp	r3, #0
 800453e:	bfb8      	it	lt
 8004540:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8004544:	3402      	adds	r4, #2
 8004546:	9305      	str	r3, [sp, #20]
 8004548:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004614 <_svfiprintf_r+0x1fc>
 800454c:	7821      	ldrb	r1, [r4, #0]
 800454e:	2203      	movs	r2, #3
 8004550:	4650      	mov	r0, sl
 8004552:	f7fb fe45 	bl	80001e0 <memchr>
 8004556:	b140      	cbz	r0, 800456a <_svfiprintf_r+0x152>
 8004558:	2340      	movs	r3, #64	; 0x40
 800455a:	eba0 000a 	sub.w	r0, r0, sl
 800455e:	fa03 f000 	lsl.w	r0, r3, r0
 8004562:	9b04      	ldr	r3, [sp, #16]
 8004564:	4303      	orrs	r3, r0
 8004566:	3401      	adds	r4, #1
 8004568:	9304      	str	r3, [sp, #16]
 800456a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800456e:	4826      	ldr	r0, [pc, #152]	; (8004608 <_svfiprintf_r+0x1f0>)
 8004570:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004574:	2206      	movs	r2, #6
 8004576:	f7fb fe33 	bl	80001e0 <memchr>
 800457a:	2800      	cmp	r0, #0
 800457c:	d038      	beq.n	80045f0 <_svfiprintf_r+0x1d8>
 800457e:	4b23      	ldr	r3, [pc, #140]	; (800460c <_svfiprintf_r+0x1f4>)
 8004580:	bb1b      	cbnz	r3, 80045ca <_svfiprintf_r+0x1b2>
 8004582:	9b03      	ldr	r3, [sp, #12]
 8004584:	3307      	adds	r3, #7
 8004586:	f023 0307 	bic.w	r3, r3, #7
 800458a:	3308      	adds	r3, #8
 800458c:	9303      	str	r3, [sp, #12]
 800458e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004590:	4433      	add	r3, r6
 8004592:	9309      	str	r3, [sp, #36]	; 0x24
 8004594:	e767      	b.n	8004466 <_svfiprintf_r+0x4e>
 8004596:	fb0c 3202 	mla	r2, ip, r2, r3
 800459a:	460c      	mov	r4, r1
 800459c:	2001      	movs	r0, #1
 800459e:	e7a5      	b.n	80044ec <_svfiprintf_r+0xd4>
 80045a0:	2300      	movs	r3, #0
 80045a2:	3401      	adds	r4, #1
 80045a4:	9305      	str	r3, [sp, #20]
 80045a6:	4619      	mov	r1, r3
 80045a8:	f04f 0c0a 	mov.w	ip, #10
 80045ac:	4620      	mov	r0, r4
 80045ae:	f810 2b01 	ldrb.w	r2, [r0], #1
 80045b2:	3a30      	subs	r2, #48	; 0x30
 80045b4:	2a09      	cmp	r2, #9
 80045b6:	d903      	bls.n	80045c0 <_svfiprintf_r+0x1a8>
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d0c5      	beq.n	8004548 <_svfiprintf_r+0x130>
 80045bc:	9105      	str	r1, [sp, #20]
 80045be:	e7c3      	b.n	8004548 <_svfiprintf_r+0x130>
 80045c0:	fb0c 2101 	mla	r1, ip, r1, r2
 80045c4:	4604      	mov	r4, r0
 80045c6:	2301      	movs	r3, #1
 80045c8:	e7f0      	b.n	80045ac <_svfiprintf_r+0x194>
 80045ca:	ab03      	add	r3, sp, #12
 80045cc:	9300      	str	r3, [sp, #0]
 80045ce:	462a      	mov	r2, r5
 80045d0:	4b0f      	ldr	r3, [pc, #60]	; (8004610 <_svfiprintf_r+0x1f8>)
 80045d2:	a904      	add	r1, sp, #16
 80045d4:	4638      	mov	r0, r7
 80045d6:	f3af 8000 	nop.w
 80045da:	1c42      	adds	r2, r0, #1
 80045dc:	4606      	mov	r6, r0
 80045de:	d1d6      	bne.n	800458e <_svfiprintf_r+0x176>
 80045e0:	89ab      	ldrh	r3, [r5, #12]
 80045e2:	065b      	lsls	r3, r3, #25
 80045e4:	f53f af2c 	bmi.w	8004440 <_svfiprintf_r+0x28>
 80045e8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80045ea:	b01d      	add	sp, #116	; 0x74
 80045ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80045f0:	ab03      	add	r3, sp, #12
 80045f2:	9300      	str	r3, [sp, #0]
 80045f4:	462a      	mov	r2, r5
 80045f6:	4b06      	ldr	r3, [pc, #24]	; (8004610 <_svfiprintf_r+0x1f8>)
 80045f8:	a904      	add	r1, sp, #16
 80045fa:	4638      	mov	r0, r7
 80045fc:	f000 f87a 	bl	80046f4 <_printf_i>
 8004600:	e7eb      	b.n	80045da <_svfiprintf_r+0x1c2>
 8004602:	bf00      	nop
 8004604:	08004cec 	.word	0x08004cec
 8004608:	08004cf6 	.word	0x08004cf6
 800460c:	00000000 	.word	0x00000000
 8004610:	08004361 	.word	0x08004361
 8004614:	08004cf2 	.word	0x08004cf2

08004618 <_printf_common>:
 8004618:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800461c:	4616      	mov	r6, r2
 800461e:	4699      	mov	r9, r3
 8004620:	688a      	ldr	r2, [r1, #8]
 8004622:	690b      	ldr	r3, [r1, #16]
 8004624:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004628:	4293      	cmp	r3, r2
 800462a:	bfb8      	it	lt
 800462c:	4613      	movlt	r3, r2
 800462e:	6033      	str	r3, [r6, #0]
 8004630:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004634:	4607      	mov	r7, r0
 8004636:	460c      	mov	r4, r1
 8004638:	b10a      	cbz	r2, 800463e <_printf_common+0x26>
 800463a:	3301      	adds	r3, #1
 800463c:	6033      	str	r3, [r6, #0]
 800463e:	6823      	ldr	r3, [r4, #0]
 8004640:	0699      	lsls	r1, r3, #26
 8004642:	bf42      	ittt	mi
 8004644:	6833      	ldrmi	r3, [r6, #0]
 8004646:	3302      	addmi	r3, #2
 8004648:	6033      	strmi	r3, [r6, #0]
 800464a:	6825      	ldr	r5, [r4, #0]
 800464c:	f015 0506 	ands.w	r5, r5, #6
 8004650:	d106      	bne.n	8004660 <_printf_common+0x48>
 8004652:	f104 0a19 	add.w	sl, r4, #25
 8004656:	68e3      	ldr	r3, [r4, #12]
 8004658:	6832      	ldr	r2, [r6, #0]
 800465a:	1a9b      	subs	r3, r3, r2
 800465c:	42ab      	cmp	r3, r5
 800465e:	dc26      	bgt.n	80046ae <_printf_common+0x96>
 8004660:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004664:	1e13      	subs	r3, r2, #0
 8004666:	6822      	ldr	r2, [r4, #0]
 8004668:	bf18      	it	ne
 800466a:	2301      	movne	r3, #1
 800466c:	0692      	lsls	r2, r2, #26
 800466e:	d42b      	bmi.n	80046c8 <_printf_common+0xb0>
 8004670:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004674:	4649      	mov	r1, r9
 8004676:	4638      	mov	r0, r7
 8004678:	47c0      	blx	r8
 800467a:	3001      	adds	r0, #1
 800467c:	d01e      	beq.n	80046bc <_printf_common+0xa4>
 800467e:	6823      	ldr	r3, [r4, #0]
 8004680:	68e5      	ldr	r5, [r4, #12]
 8004682:	6832      	ldr	r2, [r6, #0]
 8004684:	f003 0306 	and.w	r3, r3, #6
 8004688:	2b04      	cmp	r3, #4
 800468a:	bf08      	it	eq
 800468c:	1aad      	subeq	r5, r5, r2
 800468e:	68a3      	ldr	r3, [r4, #8]
 8004690:	6922      	ldr	r2, [r4, #16]
 8004692:	bf0c      	ite	eq
 8004694:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004698:	2500      	movne	r5, #0
 800469a:	4293      	cmp	r3, r2
 800469c:	bfc4      	itt	gt
 800469e:	1a9b      	subgt	r3, r3, r2
 80046a0:	18ed      	addgt	r5, r5, r3
 80046a2:	2600      	movs	r6, #0
 80046a4:	341a      	adds	r4, #26
 80046a6:	42b5      	cmp	r5, r6
 80046a8:	d11a      	bne.n	80046e0 <_printf_common+0xc8>
 80046aa:	2000      	movs	r0, #0
 80046ac:	e008      	b.n	80046c0 <_printf_common+0xa8>
 80046ae:	2301      	movs	r3, #1
 80046b0:	4652      	mov	r2, sl
 80046b2:	4649      	mov	r1, r9
 80046b4:	4638      	mov	r0, r7
 80046b6:	47c0      	blx	r8
 80046b8:	3001      	adds	r0, #1
 80046ba:	d103      	bne.n	80046c4 <_printf_common+0xac>
 80046bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80046c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046c4:	3501      	adds	r5, #1
 80046c6:	e7c6      	b.n	8004656 <_printf_common+0x3e>
 80046c8:	18e1      	adds	r1, r4, r3
 80046ca:	1c5a      	adds	r2, r3, #1
 80046cc:	2030      	movs	r0, #48	; 0x30
 80046ce:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80046d2:	4422      	add	r2, r4
 80046d4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80046d8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80046dc:	3302      	adds	r3, #2
 80046de:	e7c7      	b.n	8004670 <_printf_common+0x58>
 80046e0:	2301      	movs	r3, #1
 80046e2:	4622      	mov	r2, r4
 80046e4:	4649      	mov	r1, r9
 80046e6:	4638      	mov	r0, r7
 80046e8:	47c0      	blx	r8
 80046ea:	3001      	adds	r0, #1
 80046ec:	d0e6      	beq.n	80046bc <_printf_common+0xa4>
 80046ee:	3601      	adds	r6, #1
 80046f0:	e7d9      	b.n	80046a6 <_printf_common+0x8e>
	...

080046f4 <_printf_i>:
 80046f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80046f8:	460c      	mov	r4, r1
 80046fa:	4691      	mov	r9, r2
 80046fc:	7e27      	ldrb	r7, [r4, #24]
 80046fe:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004700:	2f78      	cmp	r7, #120	; 0x78
 8004702:	4680      	mov	r8, r0
 8004704:	469a      	mov	sl, r3
 8004706:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800470a:	d807      	bhi.n	800471c <_printf_i+0x28>
 800470c:	2f62      	cmp	r7, #98	; 0x62
 800470e:	d80a      	bhi.n	8004726 <_printf_i+0x32>
 8004710:	2f00      	cmp	r7, #0
 8004712:	f000 80d8 	beq.w	80048c6 <_printf_i+0x1d2>
 8004716:	2f58      	cmp	r7, #88	; 0x58
 8004718:	f000 80a3 	beq.w	8004862 <_printf_i+0x16e>
 800471c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004720:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004724:	e03a      	b.n	800479c <_printf_i+0xa8>
 8004726:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800472a:	2b15      	cmp	r3, #21
 800472c:	d8f6      	bhi.n	800471c <_printf_i+0x28>
 800472e:	a001      	add	r0, pc, #4	; (adr r0, 8004734 <_printf_i+0x40>)
 8004730:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004734:	0800478d 	.word	0x0800478d
 8004738:	080047a1 	.word	0x080047a1
 800473c:	0800471d 	.word	0x0800471d
 8004740:	0800471d 	.word	0x0800471d
 8004744:	0800471d 	.word	0x0800471d
 8004748:	0800471d 	.word	0x0800471d
 800474c:	080047a1 	.word	0x080047a1
 8004750:	0800471d 	.word	0x0800471d
 8004754:	0800471d 	.word	0x0800471d
 8004758:	0800471d 	.word	0x0800471d
 800475c:	0800471d 	.word	0x0800471d
 8004760:	080048ad 	.word	0x080048ad
 8004764:	080047d1 	.word	0x080047d1
 8004768:	0800488f 	.word	0x0800488f
 800476c:	0800471d 	.word	0x0800471d
 8004770:	0800471d 	.word	0x0800471d
 8004774:	080048cf 	.word	0x080048cf
 8004778:	0800471d 	.word	0x0800471d
 800477c:	080047d1 	.word	0x080047d1
 8004780:	0800471d 	.word	0x0800471d
 8004784:	0800471d 	.word	0x0800471d
 8004788:	08004897 	.word	0x08004897
 800478c:	680b      	ldr	r3, [r1, #0]
 800478e:	1d1a      	adds	r2, r3, #4
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	600a      	str	r2, [r1, #0]
 8004794:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004798:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800479c:	2301      	movs	r3, #1
 800479e:	e0a3      	b.n	80048e8 <_printf_i+0x1f4>
 80047a0:	6825      	ldr	r5, [r4, #0]
 80047a2:	6808      	ldr	r0, [r1, #0]
 80047a4:	062e      	lsls	r6, r5, #24
 80047a6:	f100 0304 	add.w	r3, r0, #4
 80047aa:	d50a      	bpl.n	80047c2 <_printf_i+0xce>
 80047ac:	6805      	ldr	r5, [r0, #0]
 80047ae:	600b      	str	r3, [r1, #0]
 80047b0:	2d00      	cmp	r5, #0
 80047b2:	da03      	bge.n	80047bc <_printf_i+0xc8>
 80047b4:	232d      	movs	r3, #45	; 0x2d
 80047b6:	426d      	negs	r5, r5
 80047b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80047bc:	485e      	ldr	r0, [pc, #376]	; (8004938 <_printf_i+0x244>)
 80047be:	230a      	movs	r3, #10
 80047c0:	e019      	b.n	80047f6 <_printf_i+0x102>
 80047c2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80047c6:	6805      	ldr	r5, [r0, #0]
 80047c8:	600b      	str	r3, [r1, #0]
 80047ca:	bf18      	it	ne
 80047cc:	b22d      	sxthne	r5, r5
 80047ce:	e7ef      	b.n	80047b0 <_printf_i+0xbc>
 80047d0:	680b      	ldr	r3, [r1, #0]
 80047d2:	6825      	ldr	r5, [r4, #0]
 80047d4:	1d18      	adds	r0, r3, #4
 80047d6:	6008      	str	r0, [r1, #0]
 80047d8:	0628      	lsls	r0, r5, #24
 80047da:	d501      	bpl.n	80047e0 <_printf_i+0xec>
 80047dc:	681d      	ldr	r5, [r3, #0]
 80047de:	e002      	b.n	80047e6 <_printf_i+0xf2>
 80047e0:	0669      	lsls	r1, r5, #25
 80047e2:	d5fb      	bpl.n	80047dc <_printf_i+0xe8>
 80047e4:	881d      	ldrh	r5, [r3, #0]
 80047e6:	4854      	ldr	r0, [pc, #336]	; (8004938 <_printf_i+0x244>)
 80047e8:	2f6f      	cmp	r7, #111	; 0x6f
 80047ea:	bf0c      	ite	eq
 80047ec:	2308      	moveq	r3, #8
 80047ee:	230a      	movne	r3, #10
 80047f0:	2100      	movs	r1, #0
 80047f2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80047f6:	6866      	ldr	r6, [r4, #4]
 80047f8:	60a6      	str	r6, [r4, #8]
 80047fa:	2e00      	cmp	r6, #0
 80047fc:	bfa2      	ittt	ge
 80047fe:	6821      	ldrge	r1, [r4, #0]
 8004800:	f021 0104 	bicge.w	r1, r1, #4
 8004804:	6021      	strge	r1, [r4, #0]
 8004806:	b90d      	cbnz	r5, 800480c <_printf_i+0x118>
 8004808:	2e00      	cmp	r6, #0
 800480a:	d04d      	beq.n	80048a8 <_printf_i+0x1b4>
 800480c:	4616      	mov	r6, r2
 800480e:	fbb5 f1f3 	udiv	r1, r5, r3
 8004812:	fb03 5711 	mls	r7, r3, r1, r5
 8004816:	5dc7      	ldrb	r7, [r0, r7]
 8004818:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800481c:	462f      	mov	r7, r5
 800481e:	42bb      	cmp	r3, r7
 8004820:	460d      	mov	r5, r1
 8004822:	d9f4      	bls.n	800480e <_printf_i+0x11a>
 8004824:	2b08      	cmp	r3, #8
 8004826:	d10b      	bne.n	8004840 <_printf_i+0x14c>
 8004828:	6823      	ldr	r3, [r4, #0]
 800482a:	07df      	lsls	r7, r3, #31
 800482c:	d508      	bpl.n	8004840 <_printf_i+0x14c>
 800482e:	6923      	ldr	r3, [r4, #16]
 8004830:	6861      	ldr	r1, [r4, #4]
 8004832:	4299      	cmp	r1, r3
 8004834:	bfde      	ittt	le
 8004836:	2330      	movle	r3, #48	; 0x30
 8004838:	f806 3c01 	strble.w	r3, [r6, #-1]
 800483c:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8004840:	1b92      	subs	r2, r2, r6
 8004842:	6122      	str	r2, [r4, #16]
 8004844:	f8cd a000 	str.w	sl, [sp]
 8004848:	464b      	mov	r3, r9
 800484a:	aa03      	add	r2, sp, #12
 800484c:	4621      	mov	r1, r4
 800484e:	4640      	mov	r0, r8
 8004850:	f7ff fee2 	bl	8004618 <_printf_common>
 8004854:	3001      	adds	r0, #1
 8004856:	d14c      	bne.n	80048f2 <_printf_i+0x1fe>
 8004858:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800485c:	b004      	add	sp, #16
 800485e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004862:	4835      	ldr	r0, [pc, #212]	; (8004938 <_printf_i+0x244>)
 8004864:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004868:	6823      	ldr	r3, [r4, #0]
 800486a:	680e      	ldr	r6, [r1, #0]
 800486c:	061f      	lsls	r7, r3, #24
 800486e:	f856 5b04 	ldr.w	r5, [r6], #4
 8004872:	600e      	str	r6, [r1, #0]
 8004874:	d514      	bpl.n	80048a0 <_printf_i+0x1ac>
 8004876:	07d9      	lsls	r1, r3, #31
 8004878:	bf44      	itt	mi
 800487a:	f043 0320 	orrmi.w	r3, r3, #32
 800487e:	6023      	strmi	r3, [r4, #0]
 8004880:	b91d      	cbnz	r5, 800488a <_printf_i+0x196>
 8004882:	6823      	ldr	r3, [r4, #0]
 8004884:	f023 0320 	bic.w	r3, r3, #32
 8004888:	6023      	str	r3, [r4, #0]
 800488a:	2310      	movs	r3, #16
 800488c:	e7b0      	b.n	80047f0 <_printf_i+0xfc>
 800488e:	6823      	ldr	r3, [r4, #0]
 8004890:	f043 0320 	orr.w	r3, r3, #32
 8004894:	6023      	str	r3, [r4, #0]
 8004896:	2378      	movs	r3, #120	; 0x78
 8004898:	4828      	ldr	r0, [pc, #160]	; (800493c <_printf_i+0x248>)
 800489a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800489e:	e7e3      	b.n	8004868 <_printf_i+0x174>
 80048a0:	065e      	lsls	r6, r3, #25
 80048a2:	bf48      	it	mi
 80048a4:	b2ad      	uxthmi	r5, r5
 80048a6:	e7e6      	b.n	8004876 <_printf_i+0x182>
 80048a8:	4616      	mov	r6, r2
 80048aa:	e7bb      	b.n	8004824 <_printf_i+0x130>
 80048ac:	680b      	ldr	r3, [r1, #0]
 80048ae:	6826      	ldr	r6, [r4, #0]
 80048b0:	6960      	ldr	r0, [r4, #20]
 80048b2:	1d1d      	adds	r5, r3, #4
 80048b4:	600d      	str	r5, [r1, #0]
 80048b6:	0635      	lsls	r5, r6, #24
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	d501      	bpl.n	80048c0 <_printf_i+0x1cc>
 80048bc:	6018      	str	r0, [r3, #0]
 80048be:	e002      	b.n	80048c6 <_printf_i+0x1d2>
 80048c0:	0671      	lsls	r1, r6, #25
 80048c2:	d5fb      	bpl.n	80048bc <_printf_i+0x1c8>
 80048c4:	8018      	strh	r0, [r3, #0]
 80048c6:	2300      	movs	r3, #0
 80048c8:	6123      	str	r3, [r4, #16]
 80048ca:	4616      	mov	r6, r2
 80048cc:	e7ba      	b.n	8004844 <_printf_i+0x150>
 80048ce:	680b      	ldr	r3, [r1, #0]
 80048d0:	1d1a      	adds	r2, r3, #4
 80048d2:	600a      	str	r2, [r1, #0]
 80048d4:	681e      	ldr	r6, [r3, #0]
 80048d6:	6862      	ldr	r2, [r4, #4]
 80048d8:	2100      	movs	r1, #0
 80048da:	4630      	mov	r0, r6
 80048dc:	f7fb fc80 	bl	80001e0 <memchr>
 80048e0:	b108      	cbz	r0, 80048e6 <_printf_i+0x1f2>
 80048e2:	1b80      	subs	r0, r0, r6
 80048e4:	6060      	str	r0, [r4, #4]
 80048e6:	6863      	ldr	r3, [r4, #4]
 80048e8:	6123      	str	r3, [r4, #16]
 80048ea:	2300      	movs	r3, #0
 80048ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80048f0:	e7a8      	b.n	8004844 <_printf_i+0x150>
 80048f2:	6923      	ldr	r3, [r4, #16]
 80048f4:	4632      	mov	r2, r6
 80048f6:	4649      	mov	r1, r9
 80048f8:	4640      	mov	r0, r8
 80048fa:	47d0      	blx	sl
 80048fc:	3001      	adds	r0, #1
 80048fe:	d0ab      	beq.n	8004858 <_printf_i+0x164>
 8004900:	6823      	ldr	r3, [r4, #0]
 8004902:	079b      	lsls	r3, r3, #30
 8004904:	d413      	bmi.n	800492e <_printf_i+0x23a>
 8004906:	68e0      	ldr	r0, [r4, #12]
 8004908:	9b03      	ldr	r3, [sp, #12]
 800490a:	4298      	cmp	r0, r3
 800490c:	bfb8      	it	lt
 800490e:	4618      	movlt	r0, r3
 8004910:	e7a4      	b.n	800485c <_printf_i+0x168>
 8004912:	2301      	movs	r3, #1
 8004914:	4632      	mov	r2, r6
 8004916:	4649      	mov	r1, r9
 8004918:	4640      	mov	r0, r8
 800491a:	47d0      	blx	sl
 800491c:	3001      	adds	r0, #1
 800491e:	d09b      	beq.n	8004858 <_printf_i+0x164>
 8004920:	3501      	adds	r5, #1
 8004922:	68e3      	ldr	r3, [r4, #12]
 8004924:	9903      	ldr	r1, [sp, #12]
 8004926:	1a5b      	subs	r3, r3, r1
 8004928:	42ab      	cmp	r3, r5
 800492a:	dcf2      	bgt.n	8004912 <_printf_i+0x21e>
 800492c:	e7eb      	b.n	8004906 <_printf_i+0x212>
 800492e:	2500      	movs	r5, #0
 8004930:	f104 0619 	add.w	r6, r4, #25
 8004934:	e7f5      	b.n	8004922 <_printf_i+0x22e>
 8004936:	bf00      	nop
 8004938:	08004cfd 	.word	0x08004cfd
 800493c:	08004d0e 	.word	0x08004d0e

08004940 <memcpy>:
 8004940:	440a      	add	r2, r1
 8004942:	4291      	cmp	r1, r2
 8004944:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8004948:	d100      	bne.n	800494c <memcpy+0xc>
 800494a:	4770      	bx	lr
 800494c:	b510      	push	{r4, lr}
 800494e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004952:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004956:	4291      	cmp	r1, r2
 8004958:	d1f9      	bne.n	800494e <memcpy+0xe>
 800495a:	bd10      	pop	{r4, pc}

0800495c <memmove>:
 800495c:	4288      	cmp	r0, r1
 800495e:	b510      	push	{r4, lr}
 8004960:	eb01 0402 	add.w	r4, r1, r2
 8004964:	d902      	bls.n	800496c <memmove+0x10>
 8004966:	4284      	cmp	r4, r0
 8004968:	4623      	mov	r3, r4
 800496a:	d807      	bhi.n	800497c <memmove+0x20>
 800496c:	1e43      	subs	r3, r0, #1
 800496e:	42a1      	cmp	r1, r4
 8004970:	d008      	beq.n	8004984 <memmove+0x28>
 8004972:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004976:	f803 2f01 	strb.w	r2, [r3, #1]!
 800497a:	e7f8      	b.n	800496e <memmove+0x12>
 800497c:	4402      	add	r2, r0
 800497e:	4601      	mov	r1, r0
 8004980:	428a      	cmp	r2, r1
 8004982:	d100      	bne.n	8004986 <memmove+0x2a>
 8004984:	bd10      	pop	{r4, pc}
 8004986:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800498a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800498e:	e7f7      	b.n	8004980 <memmove+0x24>

08004990 <_free_r>:
 8004990:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004992:	2900      	cmp	r1, #0
 8004994:	d048      	beq.n	8004a28 <_free_r+0x98>
 8004996:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800499a:	9001      	str	r0, [sp, #4]
 800499c:	2b00      	cmp	r3, #0
 800499e:	f1a1 0404 	sub.w	r4, r1, #4
 80049a2:	bfb8      	it	lt
 80049a4:	18e4      	addlt	r4, r4, r3
 80049a6:	f000 f8d3 	bl	8004b50 <__malloc_lock>
 80049aa:	4a20      	ldr	r2, [pc, #128]	; (8004a2c <_free_r+0x9c>)
 80049ac:	9801      	ldr	r0, [sp, #4]
 80049ae:	6813      	ldr	r3, [r2, #0]
 80049b0:	4615      	mov	r5, r2
 80049b2:	b933      	cbnz	r3, 80049c2 <_free_r+0x32>
 80049b4:	6063      	str	r3, [r4, #4]
 80049b6:	6014      	str	r4, [r2, #0]
 80049b8:	b003      	add	sp, #12
 80049ba:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80049be:	f000 b8cd 	b.w	8004b5c <__malloc_unlock>
 80049c2:	42a3      	cmp	r3, r4
 80049c4:	d90b      	bls.n	80049de <_free_r+0x4e>
 80049c6:	6821      	ldr	r1, [r4, #0]
 80049c8:	1862      	adds	r2, r4, r1
 80049ca:	4293      	cmp	r3, r2
 80049cc:	bf04      	itt	eq
 80049ce:	681a      	ldreq	r2, [r3, #0]
 80049d0:	685b      	ldreq	r3, [r3, #4]
 80049d2:	6063      	str	r3, [r4, #4]
 80049d4:	bf04      	itt	eq
 80049d6:	1852      	addeq	r2, r2, r1
 80049d8:	6022      	streq	r2, [r4, #0]
 80049da:	602c      	str	r4, [r5, #0]
 80049dc:	e7ec      	b.n	80049b8 <_free_r+0x28>
 80049de:	461a      	mov	r2, r3
 80049e0:	685b      	ldr	r3, [r3, #4]
 80049e2:	b10b      	cbz	r3, 80049e8 <_free_r+0x58>
 80049e4:	42a3      	cmp	r3, r4
 80049e6:	d9fa      	bls.n	80049de <_free_r+0x4e>
 80049e8:	6811      	ldr	r1, [r2, #0]
 80049ea:	1855      	adds	r5, r2, r1
 80049ec:	42a5      	cmp	r5, r4
 80049ee:	d10b      	bne.n	8004a08 <_free_r+0x78>
 80049f0:	6824      	ldr	r4, [r4, #0]
 80049f2:	4421      	add	r1, r4
 80049f4:	1854      	adds	r4, r2, r1
 80049f6:	42a3      	cmp	r3, r4
 80049f8:	6011      	str	r1, [r2, #0]
 80049fa:	d1dd      	bne.n	80049b8 <_free_r+0x28>
 80049fc:	681c      	ldr	r4, [r3, #0]
 80049fe:	685b      	ldr	r3, [r3, #4]
 8004a00:	6053      	str	r3, [r2, #4]
 8004a02:	4421      	add	r1, r4
 8004a04:	6011      	str	r1, [r2, #0]
 8004a06:	e7d7      	b.n	80049b8 <_free_r+0x28>
 8004a08:	d902      	bls.n	8004a10 <_free_r+0x80>
 8004a0a:	230c      	movs	r3, #12
 8004a0c:	6003      	str	r3, [r0, #0]
 8004a0e:	e7d3      	b.n	80049b8 <_free_r+0x28>
 8004a10:	6825      	ldr	r5, [r4, #0]
 8004a12:	1961      	adds	r1, r4, r5
 8004a14:	428b      	cmp	r3, r1
 8004a16:	bf04      	itt	eq
 8004a18:	6819      	ldreq	r1, [r3, #0]
 8004a1a:	685b      	ldreq	r3, [r3, #4]
 8004a1c:	6063      	str	r3, [r4, #4]
 8004a1e:	bf04      	itt	eq
 8004a20:	1949      	addeq	r1, r1, r5
 8004a22:	6021      	streq	r1, [r4, #0]
 8004a24:	6054      	str	r4, [r2, #4]
 8004a26:	e7c7      	b.n	80049b8 <_free_r+0x28>
 8004a28:	b003      	add	sp, #12
 8004a2a:	bd30      	pop	{r4, r5, pc}
 8004a2c:	2000009c 	.word	0x2000009c

08004a30 <_malloc_r>:
 8004a30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a32:	1ccd      	adds	r5, r1, #3
 8004a34:	f025 0503 	bic.w	r5, r5, #3
 8004a38:	3508      	adds	r5, #8
 8004a3a:	2d0c      	cmp	r5, #12
 8004a3c:	bf38      	it	cc
 8004a3e:	250c      	movcc	r5, #12
 8004a40:	2d00      	cmp	r5, #0
 8004a42:	4606      	mov	r6, r0
 8004a44:	db01      	blt.n	8004a4a <_malloc_r+0x1a>
 8004a46:	42a9      	cmp	r1, r5
 8004a48:	d903      	bls.n	8004a52 <_malloc_r+0x22>
 8004a4a:	230c      	movs	r3, #12
 8004a4c:	6033      	str	r3, [r6, #0]
 8004a4e:	2000      	movs	r0, #0
 8004a50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004a52:	f000 f87d 	bl	8004b50 <__malloc_lock>
 8004a56:	4921      	ldr	r1, [pc, #132]	; (8004adc <_malloc_r+0xac>)
 8004a58:	680a      	ldr	r2, [r1, #0]
 8004a5a:	4614      	mov	r4, r2
 8004a5c:	b99c      	cbnz	r4, 8004a86 <_malloc_r+0x56>
 8004a5e:	4f20      	ldr	r7, [pc, #128]	; (8004ae0 <_malloc_r+0xb0>)
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	b923      	cbnz	r3, 8004a6e <_malloc_r+0x3e>
 8004a64:	4621      	mov	r1, r4
 8004a66:	4630      	mov	r0, r6
 8004a68:	f000 f862 	bl	8004b30 <_sbrk_r>
 8004a6c:	6038      	str	r0, [r7, #0]
 8004a6e:	4629      	mov	r1, r5
 8004a70:	4630      	mov	r0, r6
 8004a72:	f000 f85d 	bl	8004b30 <_sbrk_r>
 8004a76:	1c43      	adds	r3, r0, #1
 8004a78:	d123      	bne.n	8004ac2 <_malloc_r+0x92>
 8004a7a:	230c      	movs	r3, #12
 8004a7c:	6033      	str	r3, [r6, #0]
 8004a7e:	4630      	mov	r0, r6
 8004a80:	f000 f86c 	bl	8004b5c <__malloc_unlock>
 8004a84:	e7e3      	b.n	8004a4e <_malloc_r+0x1e>
 8004a86:	6823      	ldr	r3, [r4, #0]
 8004a88:	1b5b      	subs	r3, r3, r5
 8004a8a:	d417      	bmi.n	8004abc <_malloc_r+0x8c>
 8004a8c:	2b0b      	cmp	r3, #11
 8004a8e:	d903      	bls.n	8004a98 <_malloc_r+0x68>
 8004a90:	6023      	str	r3, [r4, #0]
 8004a92:	441c      	add	r4, r3
 8004a94:	6025      	str	r5, [r4, #0]
 8004a96:	e004      	b.n	8004aa2 <_malloc_r+0x72>
 8004a98:	6863      	ldr	r3, [r4, #4]
 8004a9a:	42a2      	cmp	r2, r4
 8004a9c:	bf0c      	ite	eq
 8004a9e:	600b      	streq	r3, [r1, #0]
 8004aa0:	6053      	strne	r3, [r2, #4]
 8004aa2:	4630      	mov	r0, r6
 8004aa4:	f000 f85a 	bl	8004b5c <__malloc_unlock>
 8004aa8:	f104 000b 	add.w	r0, r4, #11
 8004aac:	1d23      	adds	r3, r4, #4
 8004aae:	f020 0007 	bic.w	r0, r0, #7
 8004ab2:	1ac2      	subs	r2, r0, r3
 8004ab4:	d0cc      	beq.n	8004a50 <_malloc_r+0x20>
 8004ab6:	1a1b      	subs	r3, r3, r0
 8004ab8:	50a3      	str	r3, [r4, r2]
 8004aba:	e7c9      	b.n	8004a50 <_malloc_r+0x20>
 8004abc:	4622      	mov	r2, r4
 8004abe:	6864      	ldr	r4, [r4, #4]
 8004ac0:	e7cc      	b.n	8004a5c <_malloc_r+0x2c>
 8004ac2:	1cc4      	adds	r4, r0, #3
 8004ac4:	f024 0403 	bic.w	r4, r4, #3
 8004ac8:	42a0      	cmp	r0, r4
 8004aca:	d0e3      	beq.n	8004a94 <_malloc_r+0x64>
 8004acc:	1a21      	subs	r1, r4, r0
 8004ace:	4630      	mov	r0, r6
 8004ad0:	f000 f82e 	bl	8004b30 <_sbrk_r>
 8004ad4:	3001      	adds	r0, #1
 8004ad6:	d1dd      	bne.n	8004a94 <_malloc_r+0x64>
 8004ad8:	e7cf      	b.n	8004a7a <_malloc_r+0x4a>
 8004ada:	bf00      	nop
 8004adc:	2000009c 	.word	0x2000009c
 8004ae0:	200000a0 	.word	0x200000a0

08004ae4 <_realloc_r>:
 8004ae4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ae6:	4607      	mov	r7, r0
 8004ae8:	4614      	mov	r4, r2
 8004aea:	460e      	mov	r6, r1
 8004aec:	b921      	cbnz	r1, 8004af8 <_realloc_r+0x14>
 8004aee:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004af2:	4611      	mov	r1, r2
 8004af4:	f7ff bf9c 	b.w	8004a30 <_malloc_r>
 8004af8:	b922      	cbnz	r2, 8004b04 <_realloc_r+0x20>
 8004afa:	f7ff ff49 	bl	8004990 <_free_r>
 8004afe:	4625      	mov	r5, r4
 8004b00:	4628      	mov	r0, r5
 8004b02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004b04:	f000 f830 	bl	8004b68 <_malloc_usable_size_r>
 8004b08:	42a0      	cmp	r0, r4
 8004b0a:	d20f      	bcs.n	8004b2c <_realloc_r+0x48>
 8004b0c:	4621      	mov	r1, r4
 8004b0e:	4638      	mov	r0, r7
 8004b10:	f7ff ff8e 	bl	8004a30 <_malloc_r>
 8004b14:	4605      	mov	r5, r0
 8004b16:	2800      	cmp	r0, #0
 8004b18:	d0f2      	beq.n	8004b00 <_realloc_r+0x1c>
 8004b1a:	4631      	mov	r1, r6
 8004b1c:	4622      	mov	r2, r4
 8004b1e:	f7ff ff0f 	bl	8004940 <memcpy>
 8004b22:	4631      	mov	r1, r6
 8004b24:	4638      	mov	r0, r7
 8004b26:	f7ff ff33 	bl	8004990 <_free_r>
 8004b2a:	e7e9      	b.n	8004b00 <_realloc_r+0x1c>
 8004b2c:	4635      	mov	r5, r6
 8004b2e:	e7e7      	b.n	8004b00 <_realloc_r+0x1c>

08004b30 <_sbrk_r>:
 8004b30:	b538      	push	{r3, r4, r5, lr}
 8004b32:	4d06      	ldr	r5, [pc, #24]	; (8004b4c <_sbrk_r+0x1c>)
 8004b34:	2300      	movs	r3, #0
 8004b36:	4604      	mov	r4, r0
 8004b38:	4608      	mov	r0, r1
 8004b3a:	602b      	str	r3, [r5, #0]
 8004b3c:	f7fc fe32 	bl	80017a4 <_sbrk>
 8004b40:	1c43      	adds	r3, r0, #1
 8004b42:	d102      	bne.n	8004b4a <_sbrk_r+0x1a>
 8004b44:	682b      	ldr	r3, [r5, #0]
 8004b46:	b103      	cbz	r3, 8004b4a <_sbrk_r+0x1a>
 8004b48:	6023      	str	r3, [r4, #0]
 8004b4a:	bd38      	pop	{r3, r4, r5, pc}
 8004b4c:	2000015c 	.word	0x2000015c

08004b50 <__malloc_lock>:
 8004b50:	4801      	ldr	r0, [pc, #4]	; (8004b58 <__malloc_lock+0x8>)
 8004b52:	f000 b811 	b.w	8004b78 <__retarget_lock_acquire_recursive>
 8004b56:	bf00      	nop
 8004b58:	20000164 	.word	0x20000164

08004b5c <__malloc_unlock>:
 8004b5c:	4801      	ldr	r0, [pc, #4]	; (8004b64 <__malloc_unlock+0x8>)
 8004b5e:	f000 b80c 	b.w	8004b7a <__retarget_lock_release_recursive>
 8004b62:	bf00      	nop
 8004b64:	20000164 	.word	0x20000164

08004b68 <_malloc_usable_size_r>:
 8004b68:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004b6c:	1f18      	subs	r0, r3, #4
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	bfbc      	itt	lt
 8004b72:	580b      	ldrlt	r3, [r1, r0]
 8004b74:	18c0      	addlt	r0, r0, r3
 8004b76:	4770      	bx	lr

08004b78 <__retarget_lock_acquire_recursive>:
 8004b78:	4770      	bx	lr

08004b7a <__retarget_lock_release_recursive>:
 8004b7a:	4770      	bx	lr

08004b7c <round>:
 8004b7c:	ec51 0b10 	vmov	r0, r1, d0
 8004b80:	b570      	push	{r4, r5, r6, lr}
 8004b82:	f3c1 550a 	ubfx	r5, r1, #20, #11
 8004b86:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 8004b8a:	2c13      	cmp	r4, #19
 8004b8c:	ee10 2a10 	vmov	r2, s0
 8004b90:	460b      	mov	r3, r1
 8004b92:	dc19      	bgt.n	8004bc8 <round+0x4c>
 8004b94:	2c00      	cmp	r4, #0
 8004b96:	da09      	bge.n	8004bac <round+0x30>
 8004b98:	3401      	adds	r4, #1
 8004b9a:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8004b9e:	d103      	bne.n	8004ba8 <round+0x2c>
 8004ba0:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8004ba4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8004ba8:	2100      	movs	r1, #0
 8004baa:	e028      	b.n	8004bfe <round+0x82>
 8004bac:	4d15      	ldr	r5, [pc, #84]	; (8004c04 <round+0x88>)
 8004bae:	4125      	asrs	r5, r4
 8004bb0:	ea01 0605 	and.w	r6, r1, r5
 8004bb4:	4332      	orrs	r2, r6
 8004bb6:	d00e      	beq.n	8004bd6 <round+0x5a>
 8004bb8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8004bbc:	fa42 f404 	asr.w	r4, r2, r4
 8004bc0:	4423      	add	r3, r4
 8004bc2:	ea23 0305 	bic.w	r3, r3, r5
 8004bc6:	e7ef      	b.n	8004ba8 <round+0x2c>
 8004bc8:	2c33      	cmp	r4, #51	; 0x33
 8004bca:	dd07      	ble.n	8004bdc <round+0x60>
 8004bcc:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8004bd0:	d101      	bne.n	8004bd6 <round+0x5a>
 8004bd2:	f7fb fb5b 	bl	800028c <__adddf3>
 8004bd6:	ec41 0b10 	vmov	d0, r0, r1
 8004bda:	bd70      	pop	{r4, r5, r6, pc}
 8004bdc:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 8004be0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8004be4:	40f5      	lsrs	r5, r6
 8004be6:	4228      	tst	r0, r5
 8004be8:	d0f5      	beq.n	8004bd6 <round+0x5a>
 8004bea:	2101      	movs	r1, #1
 8004bec:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 8004bf0:	fa01 f404 	lsl.w	r4, r1, r4
 8004bf4:	1912      	adds	r2, r2, r4
 8004bf6:	bf28      	it	cs
 8004bf8:	185b      	addcs	r3, r3, r1
 8004bfa:	ea22 0105 	bic.w	r1, r2, r5
 8004bfe:	4608      	mov	r0, r1
 8004c00:	4619      	mov	r1, r3
 8004c02:	e7e8      	b.n	8004bd6 <round+0x5a>
 8004c04:	000fffff 	.word	0x000fffff

08004c08 <_init>:
 8004c08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c0a:	bf00      	nop
 8004c0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c0e:	bc08      	pop	{r3}
 8004c10:	469e      	mov	lr, r3
 8004c12:	4770      	bx	lr

08004c14 <_fini>:
 8004c14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c16:	bf00      	nop
 8004c18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c1a:	bc08      	pop	{r3}
 8004c1c:	469e      	mov	lr, r3
 8004c1e:	4770      	bx	lr
