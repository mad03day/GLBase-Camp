
laba3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000279c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08002924  08002924  00012924  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800293c  0800293c  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  0800293c  0800293c  0001293c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002944  08002944  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002944  08002944  00012944  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002948  08002948  00012948  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  0800294c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020014  2**0
                  CONTENTS
 10 .bss          00000074  20000014  20000014  00020014  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000088  20000088  00020014  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 13 .debug_info   000098e1  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001543  00000000  00000000  00029925  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000968  00000000  00000000  0002ae68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000008c0  00000000  00000000  0002b7d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002041a  00000000  00000000  0002c090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a010  00000000  00000000  0004c4aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c7ffc  00000000  00000000  000564ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0011e4b6  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000027f4  00000000  00000000  0011e50c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000014 	.word	0x20000014
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800290c 	.word	0x0800290c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000018 	.word	0x20000018
 80001c4:	0800290c 	.word	0x0800290c

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_d2uiz>:
 8000540:	004a      	lsls	r2, r1, #1
 8000542:	d211      	bcs.n	8000568 <__aeabi_d2uiz+0x28>
 8000544:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000548:	d211      	bcs.n	800056e <__aeabi_d2uiz+0x2e>
 800054a:	d50d      	bpl.n	8000568 <__aeabi_d2uiz+0x28>
 800054c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000550:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000554:	d40e      	bmi.n	8000574 <__aeabi_d2uiz+0x34>
 8000556:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800055a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800055e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000562:	fa23 f002 	lsr.w	r0, r3, r2
 8000566:	4770      	bx	lr
 8000568:	f04f 0000 	mov.w	r0, #0
 800056c:	4770      	bx	lr
 800056e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000572:	d102      	bne.n	800057a <__aeabi_d2uiz+0x3a>
 8000574:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000578:	4770      	bx	lr
 800057a:	f04f 0000 	mov.w	r0, #0
 800057e:	4770      	bx	lr

08000580 <__aeabi_uldivmod>:
 8000580:	b953      	cbnz	r3, 8000598 <__aeabi_uldivmod+0x18>
 8000582:	b94a      	cbnz	r2, 8000598 <__aeabi_uldivmod+0x18>
 8000584:	2900      	cmp	r1, #0
 8000586:	bf08      	it	eq
 8000588:	2800      	cmpeq	r0, #0
 800058a:	bf1c      	itt	ne
 800058c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000590:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000594:	f000 b96e 	b.w	8000874 <__aeabi_idiv0>
 8000598:	f1ad 0c08 	sub.w	ip, sp, #8
 800059c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80005a0:	f000 f806 	bl	80005b0 <__udivmoddi4>
 80005a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80005a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80005ac:	b004      	add	sp, #16
 80005ae:	4770      	bx	lr

080005b0 <__udivmoddi4>:
 80005b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80005b4:	9d08      	ldr	r5, [sp, #32]
 80005b6:	4604      	mov	r4, r0
 80005b8:	468c      	mov	ip, r1
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	f040 8083 	bne.w	80006c6 <__udivmoddi4+0x116>
 80005c0:	428a      	cmp	r2, r1
 80005c2:	4617      	mov	r7, r2
 80005c4:	d947      	bls.n	8000656 <__udivmoddi4+0xa6>
 80005c6:	fab2 f282 	clz	r2, r2
 80005ca:	b142      	cbz	r2, 80005de <__udivmoddi4+0x2e>
 80005cc:	f1c2 0020 	rsb	r0, r2, #32
 80005d0:	fa24 f000 	lsr.w	r0, r4, r0
 80005d4:	4091      	lsls	r1, r2
 80005d6:	4097      	lsls	r7, r2
 80005d8:	ea40 0c01 	orr.w	ip, r0, r1
 80005dc:	4094      	lsls	r4, r2
 80005de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80005e2:	0c23      	lsrs	r3, r4, #16
 80005e4:	fbbc f6f8 	udiv	r6, ip, r8
 80005e8:	fa1f fe87 	uxth.w	lr, r7
 80005ec:	fb08 c116 	mls	r1, r8, r6, ip
 80005f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005f4:	fb06 f10e 	mul.w	r1, r6, lr
 80005f8:	4299      	cmp	r1, r3
 80005fa:	d909      	bls.n	8000610 <__udivmoddi4+0x60>
 80005fc:	18fb      	adds	r3, r7, r3
 80005fe:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000602:	f080 8119 	bcs.w	8000838 <__udivmoddi4+0x288>
 8000606:	4299      	cmp	r1, r3
 8000608:	f240 8116 	bls.w	8000838 <__udivmoddi4+0x288>
 800060c:	3e02      	subs	r6, #2
 800060e:	443b      	add	r3, r7
 8000610:	1a5b      	subs	r3, r3, r1
 8000612:	b2a4      	uxth	r4, r4
 8000614:	fbb3 f0f8 	udiv	r0, r3, r8
 8000618:	fb08 3310 	mls	r3, r8, r0, r3
 800061c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000620:	fb00 fe0e 	mul.w	lr, r0, lr
 8000624:	45a6      	cmp	lr, r4
 8000626:	d909      	bls.n	800063c <__udivmoddi4+0x8c>
 8000628:	193c      	adds	r4, r7, r4
 800062a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800062e:	f080 8105 	bcs.w	800083c <__udivmoddi4+0x28c>
 8000632:	45a6      	cmp	lr, r4
 8000634:	f240 8102 	bls.w	800083c <__udivmoddi4+0x28c>
 8000638:	3802      	subs	r0, #2
 800063a:	443c      	add	r4, r7
 800063c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000640:	eba4 040e 	sub.w	r4, r4, lr
 8000644:	2600      	movs	r6, #0
 8000646:	b11d      	cbz	r5, 8000650 <__udivmoddi4+0xa0>
 8000648:	40d4      	lsrs	r4, r2
 800064a:	2300      	movs	r3, #0
 800064c:	e9c5 4300 	strd	r4, r3, [r5]
 8000650:	4631      	mov	r1, r6
 8000652:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000656:	b902      	cbnz	r2, 800065a <__udivmoddi4+0xaa>
 8000658:	deff      	udf	#255	; 0xff
 800065a:	fab2 f282 	clz	r2, r2
 800065e:	2a00      	cmp	r2, #0
 8000660:	d150      	bne.n	8000704 <__udivmoddi4+0x154>
 8000662:	1bcb      	subs	r3, r1, r7
 8000664:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000668:	fa1f f887 	uxth.w	r8, r7
 800066c:	2601      	movs	r6, #1
 800066e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000672:	0c21      	lsrs	r1, r4, #16
 8000674:	fb0e 331c 	mls	r3, lr, ip, r3
 8000678:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800067c:	fb08 f30c 	mul.w	r3, r8, ip
 8000680:	428b      	cmp	r3, r1
 8000682:	d907      	bls.n	8000694 <__udivmoddi4+0xe4>
 8000684:	1879      	adds	r1, r7, r1
 8000686:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800068a:	d202      	bcs.n	8000692 <__udivmoddi4+0xe2>
 800068c:	428b      	cmp	r3, r1
 800068e:	f200 80e9 	bhi.w	8000864 <__udivmoddi4+0x2b4>
 8000692:	4684      	mov	ip, r0
 8000694:	1ac9      	subs	r1, r1, r3
 8000696:	b2a3      	uxth	r3, r4
 8000698:	fbb1 f0fe 	udiv	r0, r1, lr
 800069c:	fb0e 1110 	mls	r1, lr, r0, r1
 80006a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80006a4:	fb08 f800 	mul.w	r8, r8, r0
 80006a8:	45a0      	cmp	r8, r4
 80006aa:	d907      	bls.n	80006bc <__udivmoddi4+0x10c>
 80006ac:	193c      	adds	r4, r7, r4
 80006ae:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80006b2:	d202      	bcs.n	80006ba <__udivmoddi4+0x10a>
 80006b4:	45a0      	cmp	r8, r4
 80006b6:	f200 80d9 	bhi.w	800086c <__udivmoddi4+0x2bc>
 80006ba:	4618      	mov	r0, r3
 80006bc:	eba4 0408 	sub.w	r4, r4, r8
 80006c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80006c4:	e7bf      	b.n	8000646 <__udivmoddi4+0x96>
 80006c6:	428b      	cmp	r3, r1
 80006c8:	d909      	bls.n	80006de <__udivmoddi4+0x12e>
 80006ca:	2d00      	cmp	r5, #0
 80006cc:	f000 80b1 	beq.w	8000832 <__udivmoddi4+0x282>
 80006d0:	2600      	movs	r6, #0
 80006d2:	e9c5 0100 	strd	r0, r1, [r5]
 80006d6:	4630      	mov	r0, r6
 80006d8:	4631      	mov	r1, r6
 80006da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006de:	fab3 f683 	clz	r6, r3
 80006e2:	2e00      	cmp	r6, #0
 80006e4:	d14a      	bne.n	800077c <__udivmoddi4+0x1cc>
 80006e6:	428b      	cmp	r3, r1
 80006e8:	d302      	bcc.n	80006f0 <__udivmoddi4+0x140>
 80006ea:	4282      	cmp	r2, r0
 80006ec:	f200 80b8 	bhi.w	8000860 <__udivmoddi4+0x2b0>
 80006f0:	1a84      	subs	r4, r0, r2
 80006f2:	eb61 0103 	sbc.w	r1, r1, r3
 80006f6:	2001      	movs	r0, #1
 80006f8:	468c      	mov	ip, r1
 80006fa:	2d00      	cmp	r5, #0
 80006fc:	d0a8      	beq.n	8000650 <__udivmoddi4+0xa0>
 80006fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000702:	e7a5      	b.n	8000650 <__udivmoddi4+0xa0>
 8000704:	f1c2 0320 	rsb	r3, r2, #32
 8000708:	fa20 f603 	lsr.w	r6, r0, r3
 800070c:	4097      	lsls	r7, r2
 800070e:	fa01 f002 	lsl.w	r0, r1, r2
 8000712:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000716:	40d9      	lsrs	r1, r3
 8000718:	4330      	orrs	r0, r6
 800071a:	0c03      	lsrs	r3, r0, #16
 800071c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000720:	fa1f f887 	uxth.w	r8, r7
 8000724:	fb0e 1116 	mls	r1, lr, r6, r1
 8000728:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800072c:	fb06 f108 	mul.w	r1, r6, r8
 8000730:	4299      	cmp	r1, r3
 8000732:	fa04 f402 	lsl.w	r4, r4, r2
 8000736:	d909      	bls.n	800074c <__udivmoddi4+0x19c>
 8000738:	18fb      	adds	r3, r7, r3
 800073a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800073e:	f080 808d 	bcs.w	800085c <__udivmoddi4+0x2ac>
 8000742:	4299      	cmp	r1, r3
 8000744:	f240 808a 	bls.w	800085c <__udivmoddi4+0x2ac>
 8000748:	3e02      	subs	r6, #2
 800074a:	443b      	add	r3, r7
 800074c:	1a5b      	subs	r3, r3, r1
 800074e:	b281      	uxth	r1, r0
 8000750:	fbb3 f0fe 	udiv	r0, r3, lr
 8000754:	fb0e 3310 	mls	r3, lr, r0, r3
 8000758:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800075c:	fb00 f308 	mul.w	r3, r0, r8
 8000760:	428b      	cmp	r3, r1
 8000762:	d907      	bls.n	8000774 <__udivmoddi4+0x1c4>
 8000764:	1879      	adds	r1, r7, r1
 8000766:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800076a:	d273      	bcs.n	8000854 <__udivmoddi4+0x2a4>
 800076c:	428b      	cmp	r3, r1
 800076e:	d971      	bls.n	8000854 <__udivmoddi4+0x2a4>
 8000770:	3802      	subs	r0, #2
 8000772:	4439      	add	r1, r7
 8000774:	1acb      	subs	r3, r1, r3
 8000776:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800077a:	e778      	b.n	800066e <__udivmoddi4+0xbe>
 800077c:	f1c6 0c20 	rsb	ip, r6, #32
 8000780:	fa03 f406 	lsl.w	r4, r3, r6
 8000784:	fa22 f30c 	lsr.w	r3, r2, ip
 8000788:	431c      	orrs	r4, r3
 800078a:	fa20 f70c 	lsr.w	r7, r0, ip
 800078e:	fa01 f306 	lsl.w	r3, r1, r6
 8000792:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000796:	fa21 f10c 	lsr.w	r1, r1, ip
 800079a:	431f      	orrs	r7, r3
 800079c:	0c3b      	lsrs	r3, r7, #16
 800079e:	fbb1 f9fe 	udiv	r9, r1, lr
 80007a2:	fa1f f884 	uxth.w	r8, r4
 80007a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80007aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80007ae:	fb09 fa08 	mul.w	sl, r9, r8
 80007b2:	458a      	cmp	sl, r1
 80007b4:	fa02 f206 	lsl.w	r2, r2, r6
 80007b8:	fa00 f306 	lsl.w	r3, r0, r6
 80007bc:	d908      	bls.n	80007d0 <__udivmoddi4+0x220>
 80007be:	1861      	adds	r1, r4, r1
 80007c0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80007c4:	d248      	bcs.n	8000858 <__udivmoddi4+0x2a8>
 80007c6:	458a      	cmp	sl, r1
 80007c8:	d946      	bls.n	8000858 <__udivmoddi4+0x2a8>
 80007ca:	f1a9 0902 	sub.w	r9, r9, #2
 80007ce:	4421      	add	r1, r4
 80007d0:	eba1 010a 	sub.w	r1, r1, sl
 80007d4:	b2bf      	uxth	r7, r7
 80007d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80007da:	fb0e 1110 	mls	r1, lr, r0, r1
 80007de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80007e2:	fb00 f808 	mul.w	r8, r0, r8
 80007e6:	45b8      	cmp	r8, r7
 80007e8:	d907      	bls.n	80007fa <__udivmoddi4+0x24a>
 80007ea:	19e7      	adds	r7, r4, r7
 80007ec:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80007f0:	d22e      	bcs.n	8000850 <__udivmoddi4+0x2a0>
 80007f2:	45b8      	cmp	r8, r7
 80007f4:	d92c      	bls.n	8000850 <__udivmoddi4+0x2a0>
 80007f6:	3802      	subs	r0, #2
 80007f8:	4427      	add	r7, r4
 80007fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80007fe:	eba7 0708 	sub.w	r7, r7, r8
 8000802:	fba0 8902 	umull	r8, r9, r0, r2
 8000806:	454f      	cmp	r7, r9
 8000808:	46c6      	mov	lr, r8
 800080a:	4649      	mov	r1, r9
 800080c:	d31a      	bcc.n	8000844 <__udivmoddi4+0x294>
 800080e:	d017      	beq.n	8000840 <__udivmoddi4+0x290>
 8000810:	b15d      	cbz	r5, 800082a <__udivmoddi4+0x27a>
 8000812:	ebb3 020e 	subs.w	r2, r3, lr
 8000816:	eb67 0701 	sbc.w	r7, r7, r1
 800081a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800081e:	40f2      	lsrs	r2, r6
 8000820:	ea4c 0202 	orr.w	r2, ip, r2
 8000824:	40f7      	lsrs	r7, r6
 8000826:	e9c5 2700 	strd	r2, r7, [r5]
 800082a:	2600      	movs	r6, #0
 800082c:	4631      	mov	r1, r6
 800082e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000832:	462e      	mov	r6, r5
 8000834:	4628      	mov	r0, r5
 8000836:	e70b      	b.n	8000650 <__udivmoddi4+0xa0>
 8000838:	4606      	mov	r6, r0
 800083a:	e6e9      	b.n	8000610 <__udivmoddi4+0x60>
 800083c:	4618      	mov	r0, r3
 800083e:	e6fd      	b.n	800063c <__udivmoddi4+0x8c>
 8000840:	4543      	cmp	r3, r8
 8000842:	d2e5      	bcs.n	8000810 <__udivmoddi4+0x260>
 8000844:	ebb8 0e02 	subs.w	lr, r8, r2
 8000848:	eb69 0104 	sbc.w	r1, r9, r4
 800084c:	3801      	subs	r0, #1
 800084e:	e7df      	b.n	8000810 <__udivmoddi4+0x260>
 8000850:	4608      	mov	r0, r1
 8000852:	e7d2      	b.n	80007fa <__udivmoddi4+0x24a>
 8000854:	4660      	mov	r0, ip
 8000856:	e78d      	b.n	8000774 <__udivmoddi4+0x1c4>
 8000858:	4681      	mov	r9, r0
 800085a:	e7b9      	b.n	80007d0 <__udivmoddi4+0x220>
 800085c:	4666      	mov	r6, ip
 800085e:	e775      	b.n	800074c <__udivmoddi4+0x19c>
 8000860:	4630      	mov	r0, r6
 8000862:	e74a      	b.n	80006fa <__udivmoddi4+0x14a>
 8000864:	f1ac 0c02 	sub.w	ip, ip, #2
 8000868:	4439      	add	r1, r7
 800086a:	e713      	b.n	8000694 <__udivmoddi4+0xe4>
 800086c:	3802      	subs	r0, #2
 800086e:	443c      	add	r4, r7
 8000870:	e724      	b.n	80006bc <__udivmoddi4+0x10c>
 8000872:	bf00      	nop

08000874 <__aeabi_idiv0>:
 8000874:	4770      	bx	lr
 8000876:	bf00      	nop

08000878 <set_PWM_prop>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void set_PWM_prop(void)
{
 8000878:	b598      	push	{r3, r4, r7, lr}
 800087a:	af00      	add	r7, sp, #0
	  TIM4->ARR = floor(timer_freq / frequncy) - 1;
 800087c:	4b18      	ldr	r3, [pc, #96]	; (80008e0 <set_PWM_prop+0x68>)
 800087e:	681a      	ldr	r2, [r3, #0]
 8000880:	4b18      	ldr	r3, [pc, #96]	; (80008e4 <set_PWM_prop+0x6c>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	fbb2 f3f3 	udiv	r3, r2, r3
 8000888:	4618      	mov	r0, r3
 800088a:	f7ff fddf 	bl	800044c <__aeabi_ui2d>
 800088e:	f04f 0200 	mov.w	r2, #0
 8000892:	4b15      	ldr	r3, [pc, #84]	; (80008e8 <set_PWM_prop+0x70>)
 8000894:	f7ff fc9c 	bl	80001d0 <__aeabi_dsub>
 8000898:	4602      	mov	r2, r0
 800089a:	460b      	mov	r3, r1
 800089c:	4c13      	ldr	r4, [pc, #76]	; (80008ec <set_PWM_prop+0x74>)
 800089e:	4610      	mov	r0, r2
 80008a0:	4619      	mov	r1, r3
 80008a2:	f7ff fe4d 	bl	8000540 <__aeabi_d2uiz>
 80008a6:	4603      	mov	r3, r0
 80008a8:	62e3      	str	r3, [r4, #44]	; 0x2c
	  duty_value = floor((duty * (TIM4->ARR + 1)) / 100);
 80008aa:	4b11      	ldr	r3, [pc, #68]	; (80008f0 <set_PWM_prop+0x78>)
 80008ac:	781b      	ldrb	r3, [r3, #0]
 80008ae:	461a      	mov	r2, r3
 80008b0:	4b0e      	ldr	r3, [pc, #56]	; (80008ec <set_PWM_prop+0x74>)
 80008b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008b4:	3301      	adds	r3, #1
 80008b6:	fb03 f302 	mul.w	r3, r3, r2
 80008ba:	4a0e      	ldr	r2, [pc, #56]	; (80008f4 <set_PWM_prop+0x7c>)
 80008bc:	fba2 2303 	umull	r2, r3, r2, r3
 80008c0:	095b      	lsrs	r3, r3, #5
 80008c2:	4618      	mov	r0, r3
 80008c4:	f7ff fdc2 	bl	800044c <__aeabi_ui2d>
 80008c8:	4602      	mov	r2, r0
 80008ca:	460b      	mov	r3, r1
 80008cc:	4610      	mov	r0, r2
 80008ce:	4619      	mov	r1, r3
 80008d0:	f7ff fe36 	bl	8000540 <__aeabi_d2uiz>
 80008d4:	4603      	mov	r3, r0
 80008d6:	b29a      	uxth	r2, r3
 80008d8:	4b07      	ldr	r3, [pc, #28]	; (80008f8 <set_PWM_prop+0x80>)
 80008da:	801a      	strh	r2, [r3, #0]
}
 80008dc:	bf00      	nop
 80008de:	bd98      	pop	{r3, r4, r7, pc}
 80008e0:	20000080 	.word	0x20000080
 80008e4:	20000004 	.word	0x20000004
 80008e8:	3ff00000 	.word	0x3ff00000
 80008ec:	40000800 	.word	0x40000800
 80008f0:	20000000 	.word	0x20000000
 80008f4:	51eb851f 	.word	0x51eb851f
 80008f8:	2000007c 	.word	0x2000007c

080008fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000900:	f000 fb74 	bl	8000fec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000904:	f000 f828 	bl	8000958 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000908:	f000 f908 	bl	8000b1c <MX_GPIO_Init>
  MX_TIM4_Init();
 800090c:	f000 f88c 	bl	8000a28 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000910:	2100      	movs	r1, #0
 8000912:	480e      	ldr	r0, [pc, #56]	; (800094c <main+0x50>)
 8000914:	f001 fb52 	bl	8001fbc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8000918:	2104      	movs	r1, #4
 800091a:	480c      	ldr	r0, [pc, #48]	; (800094c <main+0x50>)
 800091c:	f001 fb4e 	bl	8001fbc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8000920:	2108      	movs	r1, #8
 8000922:	480a      	ldr	r0, [pc, #40]	; (800094c <main+0x50>)
 8000924:	f001 fb4a 	bl	8001fbc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8000928:	210c      	movs	r1, #12
 800092a:	4808      	ldr	r0, [pc, #32]	; (800094c <main+0x50>)
 800092c:	f001 fb46 	bl	8001fbc <HAL_TIM_PWM_Start>
  timer_freq = (HAL_RCC_GetPCLK1Freq()*2)/PSC;
 8000930:	f001 fae0 	bl	8001ef4 <HAL_RCC_GetPCLK1Freq>
 8000934:	4603      	mov	r3, r0
 8000936:	005b      	lsls	r3, r3, #1
 8000938:	4a05      	ldr	r2, [pc, #20]	; (8000950 <main+0x54>)
 800093a:	fba2 2303 	umull	r2, r3, r2, r3
 800093e:	091b      	lsrs	r3, r3, #4
 8000940:	4a04      	ldr	r2, [pc, #16]	; (8000954 <main+0x58>)
 8000942:	6013      	str	r3, [r2, #0]
  set_PWM_prop();
 8000944:	f7ff ff98 	bl	8000878 <set_PWM_prop>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000948:	e7fe      	b.n	8000948 <main+0x4c>
 800094a:	bf00      	nop
 800094c:	20000034 	.word	0x20000034
 8000950:	cccccccd 	.word	0xcccccccd
 8000954:	20000080 	.word	0x20000080

08000958 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b094      	sub	sp, #80	; 0x50
 800095c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800095e:	f107 0320 	add.w	r3, r7, #32
 8000962:	2230      	movs	r2, #48	; 0x30
 8000964:	2100      	movs	r1, #0
 8000966:	4618      	mov	r0, r3
 8000968:	f001 ffc8 	bl	80028fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800096c:	f107 030c 	add.w	r3, r7, #12
 8000970:	2200      	movs	r2, #0
 8000972:	601a      	str	r2, [r3, #0]
 8000974:	605a      	str	r2, [r3, #4]
 8000976:	609a      	str	r2, [r3, #8]
 8000978:	60da      	str	r2, [r3, #12]
 800097a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800097c:	2300      	movs	r3, #0
 800097e:	60bb      	str	r3, [r7, #8]
 8000980:	4b27      	ldr	r3, [pc, #156]	; (8000a20 <SystemClock_Config+0xc8>)
 8000982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000984:	4a26      	ldr	r2, [pc, #152]	; (8000a20 <SystemClock_Config+0xc8>)
 8000986:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800098a:	6413      	str	r3, [r2, #64]	; 0x40
 800098c:	4b24      	ldr	r3, [pc, #144]	; (8000a20 <SystemClock_Config+0xc8>)
 800098e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000990:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000994:	60bb      	str	r3, [r7, #8]
 8000996:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000998:	2300      	movs	r3, #0
 800099a:	607b      	str	r3, [r7, #4]
 800099c:	4b21      	ldr	r3, [pc, #132]	; (8000a24 <SystemClock_Config+0xcc>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	4a20      	ldr	r2, [pc, #128]	; (8000a24 <SystemClock_Config+0xcc>)
 80009a2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009a6:	6013      	str	r3, [r2, #0]
 80009a8:	4b1e      	ldr	r3, [pc, #120]	; (8000a24 <SystemClock_Config+0xcc>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009b0:	607b      	str	r3, [r7, #4]
 80009b2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009b4:	2301      	movs	r3, #1
 80009b6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009b8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009bc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009be:	2302      	movs	r3, #2
 80009c0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009c2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80009c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80009c8:	2304      	movs	r3, #4
 80009ca:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 60;
 80009cc:	233c      	movs	r3, #60	; 0x3c
 80009ce:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009d0:	2302      	movs	r3, #2
 80009d2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80009d4:	2304      	movs	r3, #4
 80009d6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009d8:	f107 0320 	add.w	r3, r7, #32
 80009dc:	4618      	mov	r0, r3
 80009de:	f000 fe3d 	bl	800165c <HAL_RCC_OscConfig>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d001      	beq.n	80009ec <SystemClock_Config+0x94>
  {
    Error_Handler();
 80009e8:	f000 f9f4 	bl	8000dd4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009ec:	230f      	movs	r3, #15
 80009ee:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009f0:	2302      	movs	r3, #2
 80009f2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009f4:	2300      	movs	r3, #0
 80009f6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80009f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009fc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009fe:	2300      	movs	r3, #0
 8000a00:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000a02:	f107 030c 	add.w	r3, r7, #12
 8000a06:	2101      	movs	r1, #1
 8000a08:	4618      	mov	r0, r3
 8000a0a:	f001 f89f 	bl	8001b4c <HAL_RCC_ClockConfig>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d001      	beq.n	8000a18 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000a14:	f000 f9de 	bl	8000dd4 <Error_Handler>
  }
}
 8000a18:	bf00      	nop
 8000a1a:	3750      	adds	r7, #80	; 0x50
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	40023800 	.word	0x40023800
 8000a24:	40007000 	.word	0x40007000

08000a28 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b08a      	sub	sp, #40	; 0x28
 8000a2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a2e:	f107 0320 	add.w	r3, r7, #32
 8000a32:	2200      	movs	r2, #0
 8000a34:	601a      	str	r2, [r3, #0]
 8000a36:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a38:	1d3b      	adds	r3, r7, #4
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	601a      	str	r2, [r3, #0]
 8000a3e:	605a      	str	r2, [r3, #4]
 8000a40:	609a      	str	r2, [r3, #8]
 8000a42:	60da      	str	r2, [r3, #12]
 8000a44:	611a      	str	r2, [r3, #16]
 8000a46:	615a      	str	r2, [r3, #20]
 8000a48:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000a4a:	4b32      	ldr	r3, [pc, #200]	; (8000b14 <MX_TIM4_Init+0xec>)
 8000a4c:	4a32      	ldr	r2, [pc, #200]	; (8000b18 <MX_TIM4_Init+0xf0>)
 8000a4e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 19;
 8000a50:	4b30      	ldr	r3, [pc, #192]	; (8000b14 <MX_TIM4_Init+0xec>)
 8000a52:	2213      	movs	r2, #19
 8000a54:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a56:	4b2f      	ldr	r3, [pc, #188]	; (8000b14 <MX_TIM4_Init+0xec>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 0;
 8000a5c:	4b2d      	ldr	r3, [pc, #180]	; (8000b14 <MX_TIM4_Init+0xec>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a62:	4b2c      	ldr	r3, [pc, #176]	; (8000b14 <MX_TIM4_Init+0xec>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a68:	4b2a      	ldr	r3, [pc, #168]	; (8000b14 <MX_TIM4_Init+0xec>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000a6e:	4829      	ldr	r0, [pc, #164]	; (8000b14 <MX_TIM4_Init+0xec>)
 8000a70:	f001 fa54 	bl	8001f1c <HAL_TIM_PWM_Init>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d001      	beq.n	8000a7e <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 8000a7a:	f000 f9ab 	bl	8000dd4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a82:	2300      	movs	r3, #0
 8000a84:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000a86:	f107 0320 	add.w	r3, r7, #32
 8000a8a:	4619      	mov	r1, r3
 8000a8c:	4821      	ldr	r0, [pc, #132]	; (8000b14 <MX_TIM4_Init+0xec>)
 8000a8e:	f001 fe95 	bl	80027bc <HAL_TIMEx_MasterConfigSynchronization>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d001      	beq.n	8000a9c <MX_TIM4_Init+0x74>
  {
    Error_Handler();
 8000a98:	f000 f99c 	bl	8000dd4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a9c:	2360      	movs	r3, #96	; 0x60
 8000a9e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000aac:	1d3b      	adds	r3, r7, #4
 8000aae:	2200      	movs	r2, #0
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4818      	ldr	r0, [pc, #96]	; (8000b14 <MX_TIM4_Init+0xec>)
 8000ab4:	f001 fb4a 	bl	800214c <HAL_TIM_PWM_ConfigChannel>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d001      	beq.n	8000ac2 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8000abe:	f000 f989 	bl	8000dd4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000ac2:	1d3b      	adds	r3, r7, #4
 8000ac4:	2204      	movs	r2, #4
 8000ac6:	4619      	mov	r1, r3
 8000ac8:	4812      	ldr	r0, [pc, #72]	; (8000b14 <MX_TIM4_Init+0xec>)
 8000aca:	f001 fb3f 	bl	800214c <HAL_TIM_PWM_ConfigChannel>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d001      	beq.n	8000ad8 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8000ad4:	f000 f97e 	bl	8000dd4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000ad8:	1d3b      	adds	r3, r7, #4
 8000ada:	2208      	movs	r2, #8
 8000adc:	4619      	mov	r1, r3
 8000ade:	480d      	ldr	r0, [pc, #52]	; (8000b14 <MX_TIM4_Init+0xec>)
 8000ae0:	f001 fb34 	bl	800214c <HAL_TIM_PWM_ConfigChannel>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d001      	beq.n	8000aee <MX_TIM4_Init+0xc6>
  {
    Error_Handler();
 8000aea:	f000 f973 	bl	8000dd4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000aee:	1d3b      	adds	r3, r7, #4
 8000af0:	220c      	movs	r2, #12
 8000af2:	4619      	mov	r1, r3
 8000af4:	4807      	ldr	r0, [pc, #28]	; (8000b14 <MX_TIM4_Init+0xec>)
 8000af6:	f001 fb29 	bl	800214c <HAL_TIM_PWM_ConfigChannel>
 8000afa:	4603      	mov	r3, r0
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d001      	beq.n	8000b04 <MX_TIM4_Init+0xdc>
  {
    Error_Handler();
 8000b00:	f000 f968 	bl	8000dd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000b04:	4803      	ldr	r0, [pc, #12]	; (8000b14 <MX_TIM4_Init+0xec>)
 8000b06:	f000 f9b5 	bl	8000e74 <HAL_TIM_MspPostInit>

}
 8000b0a:	bf00      	nop
 8000b0c:	3728      	adds	r7, #40	; 0x28
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	20000034 	.word	0x20000034
 8000b18:	40000800 	.word	0x40000800

08000b1c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b08a      	sub	sp, #40	; 0x28
 8000b20:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b22:	f107 0314 	add.w	r3, r7, #20
 8000b26:	2200      	movs	r2, #0
 8000b28:	601a      	str	r2, [r3, #0]
 8000b2a:	605a      	str	r2, [r3, #4]
 8000b2c:	609a      	str	r2, [r3, #8]
 8000b2e:	60da      	str	r2, [r3, #12]
 8000b30:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b32:	2300      	movs	r3, #0
 8000b34:	613b      	str	r3, [r7, #16]
 8000b36:	4b33      	ldr	r3, [pc, #204]	; (8000c04 <MX_GPIO_Init+0xe8>)
 8000b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3a:	4a32      	ldr	r2, [pc, #200]	; (8000c04 <MX_GPIO_Init+0xe8>)
 8000b3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b40:	6313      	str	r3, [r2, #48]	; 0x30
 8000b42:	4b30      	ldr	r3, [pc, #192]	; (8000c04 <MX_GPIO_Init+0xe8>)
 8000b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b4a:	613b      	str	r3, [r7, #16]
 8000b4c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b4e:	2300      	movs	r3, #0
 8000b50:	60fb      	str	r3, [r7, #12]
 8000b52:	4b2c      	ldr	r3, [pc, #176]	; (8000c04 <MX_GPIO_Init+0xe8>)
 8000b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b56:	4a2b      	ldr	r2, [pc, #172]	; (8000c04 <MX_GPIO_Init+0xe8>)
 8000b58:	f043 0308 	orr.w	r3, r3, #8
 8000b5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b5e:	4b29      	ldr	r3, [pc, #164]	; (8000c04 <MX_GPIO_Init+0xe8>)
 8000b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b62:	f003 0308 	and.w	r3, r3, #8
 8000b66:	60fb      	str	r3, [r7, #12]
 8000b68:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	60bb      	str	r3, [r7, #8]
 8000b6e:	4b25      	ldr	r3, [pc, #148]	; (8000c04 <MX_GPIO_Init+0xe8>)
 8000b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b72:	4a24      	ldr	r2, [pc, #144]	; (8000c04 <MX_GPIO_Init+0xe8>)
 8000b74:	f043 0304 	orr.w	r3, r3, #4
 8000b78:	6313      	str	r3, [r2, #48]	; 0x30
 8000b7a:	4b22      	ldr	r3, [pc, #136]	; (8000c04 <MX_GPIO_Init+0xe8>)
 8000b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7e:	f003 0304 	and.w	r3, r3, #4
 8000b82:	60bb      	str	r3, [r7, #8]
 8000b84:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b86:	2300      	movs	r3, #0
 8000b88:	607b      	str	r3, [r7, #4]
 8000b8a:	4b1e      	ldr	r3, [pc, #120]	; (8000c04 <MX_GPIO_Init+0xe8>)
 8000b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8e:	4a1d      	ldr	r2, [pc, #116]	; (8000c04 <MX_GPIO_Init+0xe8>)
 8000b90:	f043 0301 	orr.w	r3, r3, #1
 8000b94:	6313      	str	r3, [r2, #48]	; 0x30
 8000b96:	4b1b      	ldr	r3, [pc, #108]	; (8000c04 <MX_GPIO_Init+0xe8>)
 8000b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9a:	f003 0301 	and.w	r3, r3, #1
 8000b9e:	607b      	str	r3, [r7, #4]
 8000ba0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : FREQ_UP_Pin FREQ_DOWN_Pin DUTY_DOWN_Pin DUTY_UP_Pin */
  GPIO_InitStruct.Pin = FREQ_UP_Pin|FREQ_DOWN_Pin|DUTY_DOWN_Pin|DUTY_UP_Pin;
 8000ba2:	f44f 6334 	mov.w	r3, #2880	; 0xb40
 8000ba6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000ba8:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000bac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bb2:	f107 0314 	add.w	r3, r7, #20
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	4813      	ldr	r0, [pc, #76]	; (8000c08 <MX_GPIO_Init+0xec>)
 8000bba:	f000 fb9b 	bl	80012f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : NEXT_PIN_Pin */
  GPIO_InitStruct.Pin = NEXT_PIN_Pin;
 8000bbe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000bc2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000bc4:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000bc8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(NEXT_PIN_GPIO_Port, &GPIO_InitStruct);
 8000bce:	f107 0314 	add.w	r3, r7, #20
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	480d      	ldr	r0, [pc, #52]	; (8000c0c <MX_GPIO_Init+0xf0>)
 8000bd6:	f000 fb8d 	bl	80012f4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000bda:	2200      	movs	r2, #0
 8000bdc:	2100      	movs	r1, #0
 8000bde:	2017      	movs	r0, #23
 8000be0:	f000 fb51 	bl	8001286 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000be4:	2017      	movs	r0, #23
 8000be6:	f000 fb6a 	bl	80012be <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000bea:	2200      	movs	r2, #0
 8000bec:	2100      	movs	r1, #0
 8000bee:	2028      	movs	r0, #40	; 0x28
 8000bf0:	f000 fb49 	bl	8001286 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000bf4:	2028      	movs	r0, #40	; 0x28
 8000bf6:	f000 fb62 	bl	80012be <HAL_NVIC_EnableIRQ>

}
 8000bfa:	bf00      	nop
 8000bfc:	3728      	adds	r7, #40	; 0x28
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	40023800 	.word	0x40023800
 8000c08:	40020800 	.word	0x40020800
 8000c0c:	40020000 	.word	0x40020000

08000c10 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t Pin)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b082      	sub	sp, #8
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	4603      	mov	r3, r0
 8000c18:	80fb      	strh	r3, [r7, #6]
	switch (Pin)
 8000c1a:	88fb      	ldrh	r3, [r7, #6]
 8000c1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000c20:	d05e      	beq.n	8000ce0 <HAL_GPIO_EXTI_Callback+0xd0>
 8000c22:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000c26:	dc6b      	bgt.n	8000d00 <HAL_GPIO_EXTI_Callback+0xf0>
 8000c28:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000c2c:	d00e      	beq.n	8000c4c <HAL_GPIO_EXTI_Callback+0x3c>
 8000c2e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000c32:	dc65      	bgt.n	8000d00 <HAL_GPIO_EXTI_Callback+0xf0>
 8000c34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000c38:	d019      	beq.n	8000c6e <HAL_GPIO_EXTI_Callback+0x5e>
 8000c3a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000c3e:	dc5f      	bgt.n	8000d00 <HAL_GPIO_EXTI_Callback+0xf0>
 8000c40:	2b40      	cmp	r3, #64	; 0x40
 8000c42:	d025      	beq.n	8000c90 <HAL_GPIO_EXTI_Callback+0x80>
 8000c44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000c48:	d035      	beq.n	8000cb6 <HAL_GPIO_EXTI_Callback+0xa6>
 8000c4a:	e059      	b.n	8000d00 <HAL_GPIO_EXTI_Callback+0xf0>
	{
	case DUTY_UP_Pin:
		duty = duty < MAX_DUTY? duty += STEP_DUTY : MAX_DUTY;
 8000c4c:	4b5a      	ldr	r3, [pc, #360]	; (8000db8 <HAL_GPIO_EXTI_Callback+0x1a8>)
 8000c4e:	781b      	ldrb	r3, [r3, #0]
 8000c50:	2b63      	cmp	r3, #99	; 0x63
 8000c52:	d808      	bhi.n	8000c66 <HAL_GPIO_EXTI_Callback+0x56>
 8000c54:	4b58      	ldr	r3, [pc, #352]	; (8000db8 <HAL_GPIO_EXTI_Callback+0x1a8>)
 8000c56:	781b      	ldrb	r3, [r3, #0]
 8000c58:	3305      	adds	r3, #5
 8000c5a:	b2da      	uxtb	r2, r3
 8000c5c:	4b56      	ldr	r3, [pc, #344]	; (8000db8 <HAL_GPIO_EXTI_Callback+0x1a8>)
 8000c5e:	701a      	strb	r2, [r3, #0]
 8000c60:	4b55      	ldr	r3, [pc, #340]	; (8000db8 <HAL_GPIO_EXTI_Callback+0x1a8>)
 8000c62:	781b      	ldrb	r3, [r3, #0]
 8000c64:	e000      	b.n	8000c68 <HAL_GPIO_EXTI_Callback+0x58>
 8000c66:	2364      	movs	r3, #100	; 0x64
 8000c68:	4a53      	ldr	r2, [pc, #332]	; (8000db8 <HAL_GPIO_EXTI_Callback+0x1a8>)
 8000c6a:	7013      	strb	r3, [r2, #0]
		break;
 8000c6c:	e048      	b.n	8000d00 <HAL_GPIO_EXTI_Callback+0xf0>
	case DUTY_DOWN_Pin:
		duty = duty > MIN_DUTY? duty -= STEP_DUTY : MIN_DUTY;
 8000c6e:	4b52      	ldr	r3, [pc, #328]	; (8000db8 <HAL_GPIO_EXTI_Callback+0x1a8>)
 8000c70:	781b      	ldrb	r3, [r3, #0]
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d008      	beq.n	8000c88 <HAL_GPIO_EXTI_Callback+0x78>
 8000c76:	4b50      	ldr	r3, [pc, #320]	; (8000db8 <HAL_GPIO_EXTI_Callback+0x1a8>)
 8000c78:	781b      	ldrb	r3, [r3, #0]
 8000c7a:	3b05      	subs	r3, #5
 8000c7c:	b2da      	uxtb	r2, r3
 8000c7e:	4b4e      	ldr	r3, [pc, #312]	; (8000db8 <HAL_GPIO_EXTI_Callback+0x1a8>)
 8000c80:	701a      	strb	r2, [r3, #0]
 8000c82:	4b4d      	ldr	r3, [pc, #308]	; (8000db8 <HAL_GPIO_EXTI_Callback+0x1a8>)
 8000c84:	781b      	ldrb	r3, [r3, #0]
 8000c86:	e000      	b.n	8000c8a <HAL_GPIO_EXTI_Callback+0x7a>
 8000c88:	2300      	movs	r3, #0
 8000c8a:	4a4b      	ldr	r2, [pc, #300]	; (8000db8 <HAL_GPIO_EXTI_Callback+0x1a8>)
 8000c8c:	7013      	strb	r3, [r2, #0]
		break;
 8000c8e:	e037      	b.n	8000d00 <HAL_GPIO_EXTI_Callback+0xf0>
	case FREQ_UP_Pin:
		frequncy = frequncy < MAX_FREQ ? frequncy += STEP_FREQ : MAX_FREQ;
 8000c90:	4b4a      	ldr	r3, [pc, #296]	; (8000dbc <HAL_GPIO_EXTI_Callback+0x1ac>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	4a4a      	ldr	r2, [pc, #296]	; (8000dc0 <HAL_GPIO_EXTI_Callback+0x1b0>)
 8000c96:	4293      	cmp	r3, r2
 8000c98:	d809      	bhi.n	8000cae <HAL_GPIO_EXTI_Callback+0x9e>
 8000c9a:	4b48      	ldr	r3, [pc, #288]	; (8000dbc <HAL_GPIO_EXTI_Callback+0x1ac>)
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8000ca2:	3308      	adds	r3, #8
 8000ca4:	4a45      	ldr	r2, [pc, #276]	; (8000dbc <HAL_GPIO_EXTI_Callback+0x1ac>)
 8000ca6:	6013      	str	r3, [r2, #0]
 8000ca8:	4b44      	ldr	r3, [pc, #272]	; (8000dbc <HAL_GPIO_EXTI_Callback+0x1ac>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	e000      	b.n	8000cb0 <HAL_GPIO_EXTI_Callback+0xa0>
 8000cae:	4b45      	ldr	r3, [pc, #276]	; (8000dc4 <HAL_GPIO_EXTI_Callback+0x1b4>)
 8000cb0:	4a42      	ldr	r2, [pc, #264]	; (8000dbc <HAL_GPIO_EXTI_Callback+0x1ac>)
 8000cb2:	6013      	str	r3, [r2, #0]
		break;
 8000cb4:	e024      	b.n	8000d00 <HAL_GPIO_EXTI_Callback+0xf0>
	case FREQ_DOWN_Pin:
		frequncy = frequncy > STEP_FREQ ? frequncy -= STEP_FREQ : STEP_FREQ;
 8000cb6:	4b41      	ldr	r3, [pc, #260]	; (8000dbc <HAL_GPIO_EXTI_Callback+0x1ac>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	f241 3288 	movw	r2, #5000	; 0x1388
 8000cbe:	4293      	cmp	r3, r2
 8000cc0:	d909      	bls.n	8000cd6 <HAL_GPIO_EXTI_Callback+0xc6>
 8000cc2:	4b3e      	ldr	r3, [pc, #248]	; (8000dbc <HAL_GPIO_EXTI_Callback+0x1ac>)
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	f5a3 539c 	sub.w	r3, r3, #4992	; 0x1380
 8000cca:	3b08      	subs	r3, #8
 8000ccc:	4a3b      	ldr	r2, [pc, #236]	; (8000dbc <HAL_GPIO_EXTI_Callback+0x1ac>)
 8000cce:	6013      	str	r3, [r2, #0]
 8000cd0:	4b3a      	ldr	r3, [pc, #232]	; (8000dbc <HAL_GPIO_EXTI_Callback+0x1ac>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	e001      	b.n	8000cda <HAL_GPIO_EXTI_Callback+0xca>
 8000cd6:	f241 3388 	movw	r3, #5000	; 0x1388
 8000cda:	4a38      	ldr	r2, [pc, #224]	; (8000dbc <HAL_GPIO_EXTI_Callback+0x1ac>)
 8000cdc:	6013      	str	r3, [r2, #0]
		break;
 8000cde:	e00f      	b.n	8000d00 <HAL_GPIO_EXTI_Callback+0xf0>
	case NEXT_PIN_Pin:
		mode = mode < 4 ? ++mode : 0;
 8000ce0:	4b39      	ldr	r3, [pc, #228]	; (8000dc8 <HAL_GPIO_EXTI_Callback+0x1b8>)
 8000ce2:	781b      	ldrb	r3, [r3, #0]
 8000ce4:	2b03      	cmp	r3, #3
 8000ce6:	d808      	bhi.n	8000cfa <HAL_GPIO_EXTI_Callback+0xea>
 8000ce8:	4b37      	ldr	r3, [pc, #220]	; (8000dc8 <HAL_GPIO_EXTI_Callback+0x1b8>)
 8000cea:	781b      	ldrb	r3, [r3, #0]
 8000cec:	3301      	adds	r3, #1
 8000cee:	b2da      	uxtb	r2, r3
 8000cf0:	4b35      	ldr	r3, [pc, #212]	; (8000dc8 <HAL_GPIO_EXTI_Callback+0x1b8>)
 8000cf2:	701a      	strb	r2, [r3, #0]
 8000cf4:	4b34      	ldr	r3, [pc, #208]	; (8000dc8 <HAL_GPIO_EXTI_Callback+0x1b8>)
 8000cf6:	781b      	ldrb	r3, [r3, #0]
 8000cf8:	e000      	b.n	8000cfc <HAL_GPIO_EXTI_Callback+0xec>
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	4a32      	ldr	r2, [pc, #200]	; (8000dc8 <HAL_GPIO_EXTI_Callback+0x1b8>)
 8000cfe:	7013      	strb	r3, [r2, #0]
	}
	set_PWM_prop();
 8000d00:	f7ff fdba 	bl	8000878 <set_PWM_prop>
	switch(mode)
 8000d04:	4b30      	ldr	r3, [pc, #192]	; (8000dc8 <HAL_GPIO_EXTI_Callback+0x1b8>)
 8000d06:	781b      	ldrb	r3, [r3, #0]
 8000d08:	3b01      	subs	r3, #1
 8000d0a:	2b03      	cmp	r3, #3
 8000d0c:	d842      	bhi.n	8000d94 <HAL_GPIO_EXTI_Callback+0x184>
 8000d0e:	a201      	add	r2, pc, #4	; (adr r2, 8000d14 <HAL_GPIO_EXTI_Callback+0x104>)
 8000d10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d14:	08000d25 	.word	0x08000d25
 8000d18:	08000d41 	.word	0x08000d41
 8000d1c:	08000d5d 	.word	0x08000d5d
 8000d20:	08000d79 	.word	0x08000d79
	{
	case 1:
		TIM4->CCR1 = duty_value;
 8000d24:	4b29      	ldr	r3, [pc, #164]	; (8000dcc <HAL_GPIO_EXTI_Callback+0x1bc>)
 8000d26:	881a      	ldrh	r2, [r3, #0]
 8000d28:	4b29      	ldr	r3, [pc, #164]	; (8000dd0 <HAL_GPIO_EXTI_Callback+0x1c0>)
 8000d2a:	635a      	str	r2, [r3, #52]	; 0x34
		TIM4->CCR2 = 0;
 8000d2c:	4b28      	ldr	r3, [pc, #160]	; (8000dd0 <HAL_GPIO_EXTI_Callback+0x1c0>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	639a      	str	r2, [r3, #56]	; 0x38
		TIM4->CCR3 = 0;
 8000d32:	4b27      	ldr	r3, [pc, #156]	; (8000dd0 <HAL_GPIO_EXTI_Callback+0x1c0>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	63da      	str	r2, [r3, #60]	; 0x3c
		TIM4->CCR4 = 0;
 8000d38:	4b25      	ldr	r3, [pc, #148]	; (8000dd0 <HAL_GPIO_EXTI_Callback+0x1c0>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	641a      	str	r2, [r3, #64]	; 0x40
		break;
 8000d3e:	e036      	b.n	8000dae <HAL_GPIO_EXTI_Callback+0x19e>
	case 2:
		TIM4->CCR1 = 0;
 8000d40:	4b23      	ldr	r3, [pc, #140]	; (8000dd0 <HAL_GPIO_EXTI_Callback+0x1c0>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	635a      	str	r2, [r3, #52]	; 0x34
		TIM4->CCR2 = duty_value;
 8000d46:	4b21      	ldr	r3, [pc, #132]	; (8000dcc <HAL_GPIO_EXTI_Callback+0x1bc>)
 8000d48:	881a      	ldrh	r2, [r3, #0]
 8000d4a:	4b21      	ldr	r3, [pc, #132]	; (8000dd0 <HAL_GPIO_EXTI_Callback+0x1c0>)
 8000d4c:	639a      	str	r2, [r3, #56]	; 0x38
		TIM4->CCR3 = 0;
 8000d4e:	4b20      	ldr	r3, [pc, #128]	; (8000dd0 <HAL_GPIO_EXTI_Callback+0x1c0>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	63da      	str	r2, [r3, #60]	; 0x3c
		TIM4->CCR4 = 0;
 8000d54:	4b1e      	ldr	r3, [pc, #120]	; (8000dd0 <HAL_GPIO_EXTI_Callback+0x1c0>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	641a      	str	r2, [r3, #64]	; 0x40
		break;
 8000d5a:	e028      	b.n	8000dae <HAL_GPIO_EXTI_Callback+0x19e>
	case 3:
		TIM4->CCR1 = 0;
 8000d5c:	4b1c      	ldr	r3, [pc, #112]	; (8000dd0 <HAL_GPIO_EXTI_Callback+0x1c0>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	635a      	str	r2, [r3, #52]	; 0x34
		TIM4->CCR2 = 0;
 8000d62:	4b1b      	ldr	r3, [pc, #108]	; (8000dd0 <HAL_GPIO_EXTI_Callback+0x1c0>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	639a      	str	r2, [r3, #56]	; 0x38
		TIM4->CCR3 = duty_value;
 8000d68:	4b18      	ldr	r3, [pc, #96]	; (8000dcc <HAL_GPIO_EXTI_Callback+0x1bc>)
 8000d6a:	881a      	ldrh	r2, [r3, #0]
 8000d6c:	4b18      	ldr	r3, [pc, #96]	; (8000dd0 <HAL_GPIO_EXTI_Callback+0x1c0>)
 8000d6e:	63da      	str	r2, [r3, #60]	; 0x3c
		TIM4->CCR4 = 0;
 8000d70:	4b17      	ldr	r3, [pc, #92]	; (8000dd0 <HAL_GPIO_EXTI_Callback+0x1c0>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	641a      	str	r2, [r3, #64]	; 0x40
		break;
 8000d76:	e01a      	b.n	8000dae <HAL_GPIO_EXTI_Callback+0x19e>
	case 4:
		TIM4->CCR1 = 0;
 8000d78:	4b15      	ldr	r3, [pc, #84]	; (8000dd0 <HAL_GPIO_EXTI_Callback+0x1c0>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	635a      	str	r2, [r3, #52]	; 0x34
		TIM4->CCR2 = 0;
 8000d7e:	4b14      	ldr	r3, [pc, #80]	; (8000dd0 <HAL_GPIO_EXTI_Callback+0x1c0>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	639a      	str	r2, [r3, #56]	; 0x38
		TIM4->CCR3 = 0;
 8000d84:	4b12      	ldr	r3, [pc, #72]	; (8000dd0 <HAL_GPIO_EXTI_Callback+0x1c0>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	63da      	str	r2, [r3, #60]	; 0x3c
		TIM4->CCR4 = duty_value;
 8000d8a:	4b10      	ldr	r3, [pc, #64]	; (8000dcc <HAL_GPIO_EXTI_Callback+0x1bc>)
 8000d8c:	881a      	ldrh	r2, [r3, #0]
 8000d8e:	4b10      	ldr	r3, [pc, #64]	; (8000dd0 <HAL_GPIO_EXTI_Callback+0x1c0>)
 8000d90:	641a      	str	r2, [r3, #64]	; 0x40
		break;
 8000d92:	e00c      	b.n	8000dae <HAL_GPIO_EXTI_Callback+0x19e>
	default:
		TIM4->CCR1 = 0;
 8000d94:	4b0e      	ldr	r3, [pc, #56]	; (8000dd0 <HAL_GPIO_EXTI_Callback+0x1c0>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	635a      	str	r2, [r3, #52]	; 0x34
		TIM4->CCR2 = 0;
 8000d9a:	4b0d      	ldr	r3, [pc, #52]	; (8000dd0 <HAL_GPIO_EXTI_Callback+0x1c0>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	639a      	str	r2, [r3, #56]	; 0x38
		TIM4->CCR3 = 0;
 8000da0:	4b0b      	ldr	r3, [pc, #44]	; (8000dd0 <HAL_GPIO_EXTI_Callback+0x1c0>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	63da      	str	r2, [r3, #60]	; 0x3c
		TIM4->CCR4 = 0;
 8000da6:	4b0a      	ldr	r3, [pc, #40]	; (8000dd0 <HAL_GPIO_EXTI_Callback+0x1c0>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	641a      	str	r2, [r3, #64]	; 0x40
		break;
 8000dac:	bf00      	nop
	}
}
 8000dae:	bf00      	nop
 8000db0:	3708      	adds	r7, #8
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	20000000 	.word	0x20000000
 8000dbc:	20000004 	.word	0x20000004
 8000dc0:	00015f8f 	.word	0x00015f8f
 8000dc4:	00015f90 	.word	0x00015f90
 8000dc8:	20000030 	.word	0x20000030
 8000dcc:	2000007c 	.word	0x2000007c
 8000dd0:	40000800 	.word	0x40000800

08000dd4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dd8:	b672      	cpsid	i
}
 8000dda:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ddc:	e7fe      	b.n	8000ddc <Error_Handler+0x8>
	...

08000de0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	b083      	sub	sp, #12
 8000de4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000de6:	2300      	movs	r3, #0
 8000de8:	607b      	str	r3, [r7, #4]
 8000dea:	4b10      	ldr	r3, [pc, #64]	; (8000e2c <HAL_MspInit+0x4c>)
 8000dec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dee:	4a0f      	ldr	r2, [pc, #60]	; (8000e2c <HAL_MspInit+0x4c>)
 8000df0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000df4:	6453      	str	r3, [r2, #68]	; 0x44
 8000df6:	4b0d      	ldr	r3, [pc, #52]	; (8000e2c <HAL_MspInit+0x4c>)
 8000df8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dfa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dfe:	607b      	str	r3, [r7, #4]
 8000e00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e02:	2300      	movs	r3, #0
 8000e04:	603b      	str	r3, [r7, #0]
 8000e06:	4b09      	ldr	r3, [pc, #36]	; (8000e2c <HAL_MspInit+0x4c>)
 8000e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e0a:	4a08      	ldr	r2, [pc, #32]	; (8000e2c <HAL_MspInit+0x4c>)
 8000e0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e10:	6413      	str	r3, [r2, #64]	; 0x40
 8000e12:	4b06      	ldr	r3, [pc, #24]	; (8000e2c <HAL_MspInit+0x4c>)
 8000e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e1a:	603b      	str	r3, [r7, #0]
 8000e1c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e1e:	bf00      	nop
 8000e20:	370c      	adds	r7, #12
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr
 8000e2a:	bf00      	nop
 8000e2c:	40023800 	.word	0x40023800

08000e30 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000e30:	b480      	push	{r7}
 8000e32:	b085      	sub	sp, #20
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	4a0b      	ldr	r2, [pc, #44]	; (8000e6c <HAL_TIM_PWM_MspInit+0x3c>)
 8000e3e:	4293      	cmp	r3, r2
 8000e40:	d10d      	bne.n	8000e5e <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000e42:	2300      	movs	r3, #0
 8000e44:	60fb      	str	r3, [r7, #12]
 8000e46:	4b0a      	ldr	r3, [pc, #40]	; (8000e70 <HAL_TIM_PWM_MspInit+0x40>)
 8000e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e4a:	4a09      	ldr	r2, [pc, #36]	; (8000e70 <HAL_TIM_PWM_MspInit+0x40>)
 8000e4c:	f043 0304 	orr.w	r3, r3, #4
 8000e50:	6413      	str	r3, [r2, #64]	; 0x40
 8000e52:	4b07      	ldr	r3, [pc, #28]	; (8000e70 <HAL_TIM_PWM_MspInit+0x40>)
 8000e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e56:	f003 0304 	and.w	r3, r3, #4
 8000e5a:	60fb      	str	r3, [r7, #12]
 8000e5c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000e5e:	bf00      	nop
 8000e60:	3714      	adds	r7, #20
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr
 8000e6a:	bf00      	nop
 8000e6c:	40000800 	.word	0x40000800
 8000e70:	40023800 	.word	0x40023800

08000e74 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b088      	sub	sp, #32
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e7c:	f107 030c 	add.w	r3, r7, #12
 8000e80:	2200      	movs	r2, #0
 8000e82:	601a      	str	r2, [r3, #0]
 8000e84:	605a      	str	r2, [r3, #4]
 8000e86:	609a      	str	r2, [r3, #8]
 8000e88:	60da      	str	r2, [r3, #12]
 8000e8a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	4a12      	ldr	r2, [pc, #72]	; (8000edc <HAL_TIM_MspPostInit+0x68>)
 8000e92:	4293      	cmp	r3, r2
 8000e94:	d11e      	bne.n	8000ed4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e96:	2300      	movs	r3, #0
 8000e98:	60bb      	str	r3, [r7, #8]
 8000e9a:	4b11      	ldr	r3, [pc, #68]	; (8000ee0 <HAL_TIM_MspPostInit+0x6c>)
 8000e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9e:	4a10      	ldr	r2, [pc, #64]	; (8000ee0 <HAL_TIM_MspPostInit+0x6c>)
 8000ea0:	f043 0308 	orr.w	r3, r3, #8
 8000ea4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ea6:	4b0e      	ldr	r3, [pc, #56]	; (8000ee0 <HAL_TIM_MspPostInit+0x6c>)
 8000ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eaa:	f003 0308 	and.w	r3, r3, #8
 8000eae:	60bb      	str	r3, [r7, #8]
 8000eb0:	68bb      	ldr	r3, [r7, #8]
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    PD14     ------> TIM4_CH3
    PD15     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000eb2:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000eb6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb8:	2302      	movs	r3, #2
 8000eba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000ec4:	2302      	movs	r3, #2
 8000ec6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ec8:	f107 030c 	add.w	r3, r7, #12
 8000ecc:	4619      	mov	r1, r3
 8000ece:	4805      	ldr	r0, [pc, #20]	; (8000ee4 <HAL_TIM_MspPostInit+0x70>)
 8000ed0:	f000 fa10 	bl	80012f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8000ed4:	bf00      	nop
 8000ed6:	3720      	adds	r7, #32
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	40000800 	.word	0x40000800
 8000ee0:	40023800 	.word	0x40023800
 8000ee4:	40020c00 	.word	0x40020c00

08000ee8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000eec:	e7fe      	b.n	8000eec <NMI_Handler+0x4>

08000eee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000eee:	b480      	push	{r7}
 8000ef0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ef2:	e7fe      	b.n	8000ef2 <HardFault_Handler+0x4>

08000ef4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ef8:	e7fe      	b.n	8000ef8 <MemManage_Handler+0x4>

08000efa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000efa:	b480      	push	{r7}
 8000efc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000efe:	e7fe      	b.n	8000efe <BusFault_Handler+0x4>

08000f00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f04:	e7fe      	b.n	8000f04 <UsageFault_Handler+0x4>

08000f06 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f06:	b480      	push	{r7}
 8000f08:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f0a:	bf00      	nop
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f12:	4770      	bx	lr

08000f14 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f18:	bf00      	nop
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr

08000f22 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f22:	b480      	push	{r7}
 8000f24:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f26:	bf00      	nop
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2e:	4770      	bx	lr

08000f30 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f34:	f000 f8ac 	bl	8001090 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f38:	bf00      	nop
 8000f3a:	bd80      	pop	{r7, pc}

08000f3c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8000f40:	2040      	movs	r0, #64	; 0x40
 8000f42:	f000 fb73 	bl	800162c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8000f46:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000f4a:	f000 fb6f 	bl	800162c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8000f4e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000f52:	f000 fb6b 	bl	800162c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000f56:	bf00      	nop
 8000f58:	bd80      	pop	{r7, pc}

08000f5a <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000f5a:	b580      	push	{r7, lr}
 8000f5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8000f5e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8000f62:	f000 fb63 	bl	800162c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8000f66:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000f6a:	f000 fb5f 	bl	800162c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000f6e:	bf00      	nop
 8000f70:	bd80      	pop	{r7, pc}
	...

08000f74 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f78:	4b06      	ldr	r3, [pc, #24]	; (8000f94 <SystemInit+0x20>)
 8000f7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f7e:	4a05      	ldr	r2, [pc, #20]	; (8000f94 <SystemInit+0x20>)
 8000f80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f88:	bf00      	nop
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop
 8000f94:	e000ed00 	.word	0xe000ed00

08000f98 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000f98:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fd0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f9c:	480d      	ldr	r0, [pc, #52]	; (8000fd4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f9e:	490e      	ldr	r1, [pc, #56]	; (8000fd8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000fa0:	4a0e      	ldr	r2, [pc, #56]	; (8000fdc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000fa2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fa4:	e002      	b.n	8000fac <LoopCopyDataInit>

08000fa6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fa6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fa8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000faa:	3304      	adds	r3, #4

08000fac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fb0:	d3f9      	bcc.n	8000fa6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fb2:	4a0b      	ldr	r2, [pc, #44]	; (8000fe0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000fb4:	4c0b      	ldr	r4, [pc, #44]	; (8000fe4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000fb6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fb8:	e001      	b.n	8000fbe <LoopFillZerobss>

08000fba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fbc:	3204      	adds	r2, #4

08000fbe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fbe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fc0:	d3fb      	bcc.n	8000fba <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000fc2:	f7ff ffd7 	bl	8000f74 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000fc6:	f001 fc75 	bl	80028b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fca:	f7ff fc97 	bl	80008fc <main>
  bx  lr    
 8000fce:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000fd0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000fd4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fd8:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000fdc:	0800294c 	.word	0x0800294c
  ldr r2, =_sbss
 8000fe0:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000fe4:	20000088 	.word	0x20000088

08000fe8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fe8:	e7fe      	b.n	8000fe8 <ADC_IRQHandler>
	...

08000fec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ff0:	4b0e      	ldr	r3, [pc, #56]	; (800102c <HAL_Init+0x40>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	4a0d      	ldr	r2, [pc, #52]	; (800102c <HAL_Init+0x40>)
 8000ff6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ffa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ffc:	4b0b      	ldr	r3, [pc, #44]	; (800102c <HAL_Init+0x40>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	4a0a      	ldr	r2, [pc, #40]	; (800102c <HAL_Init+0x40>)
 8001002:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001006:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001008:	4b08      	ldr	r3, [pc, #32]	; (800102c <HAL_Init+0x40>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	4a07      	ldr	r2, [pc, #28]	; (800102c <HAL_Init+0x40>)
 800100e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001012:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001014:	2003      	movs	r0, #3
 8001016:	f000 f92b 	bl	8001270 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800101a:	200f      	movs	r0, #15
 800101c:	f000 f808 	bl	8001030 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001020:	f7ff fede 	bl	8000de0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001024:	2300      	movs	r3, #0
}
 8001026:	4618      	mov	r0, r3
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	40023c00 	.word	0x40023c00

08001030 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001038:	4b12      	ldr	r3, [pc, #72]	; (8001084 <HAL_InitTick+0x54>)
 800103a:	681a      	ldr	r2, [r3, #0]
 800103c:	4b12      	ldr	r3, [pc, #72]	; (8001088 <HAL_InitTick+0x58>)
 800103e:	781b      	ldrb	r3, [r3, #0]
 8001040:	4619      	mov	r1, r3
 8001042:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001046:	fbb3 f3f1 	udiv	r3, r3, r1
 800104a:	fbb2 f3f3 	udiv	r3, r2, r3
 800104e:	4618      	mov	r0, r3
 8001050:	f000 f943 	bl	80012da <HAL_SYSTICK_Config>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d001      	beq.n	800105e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800105a:	2301      	movs	r3, #1
 800105c:	e00e      	b.n	800107c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	2b0f      	cmp	r3, #15
 8001062:	d80a      	bhi.n	800107a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001064:	2200      	movs	r2, #0
 8001066:	6879      	ldr	r1, [r7, #4]
 8001068:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800106c:	f000 f90b 	bl	8001286 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001070:	4a06      	ldr	r2, [pc, #24]	; (800108c <HAL_InitTick+0x5c>)
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001076:	2300      	movs	r3, #0
 8001078:	e000      	b.n	800107c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800107a:	2301      	movs	r3, #1
}
 800107c:	4618      	mov	r0, r3
 800107e:	3708      	adds	r7, #8
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}
 8001084:	20000008 	.word	0x20000008
 8001088:	20000010 	.word	0x20000010
 800108c:	2000000c 	.word	0x2000000c

08001090 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001094:	4b06      	ldr	r3, [pc, #24]	; (80010b0 <HAL_IncTick+0x20>)
 8001096:	781b      	ldrb	r3, [r3, #0]
 8001098:	461a      	mov	r2, r3
 800109a:	4b06      	ldr	r3, [pc, #24]	; (80010b4 <HAL_IncTick+0x24>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	4413      	add	r3, r2
 80010a0:	4a04      	ldr	r2, [pc, #16]	; (80010b4 <HAL_IncTick+0x24>)
 80010a2:	6013      	str	r3, [r2, #0]
}
 80010a4:	bf00      	nop
 80010a6:	46bd      	mov	sp, r7
 80010a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ac:	4770      	bx	lr
 80010ae:	bf00      	nop
 80010b0:	20000010 	.word	0x20000010
 80010b4:	20000084 	.word	0x20000084

080010b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010b8:	b480      	push	{r7}
 80010ba:	af00      	add	r7, sp, #0
  return uwTick;
 80010bc:	4b03      	ldr	r3, [pc, #12]	; (80010cc <HAL_GetTick+0x14>)
 80010be:	681b      	ldr	r3, [r3, #0]
}
 80010c0:	4618      	mov	r0, r3
 80010c2:	46bd      	mov	sp, r7
 80010c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c8:	4770      	bx	lr
 80010ca:	bf00      	nop
 80010cc:	20000084 	.word	0x20000084

080010d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b085      	sub	sp, #20
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	f003 0307 	and.w	r3, r3, #7
 80010de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010e0:	4b0c      	ldr	r3, [pc, #48]	; (8001114 <__NVIC_SetPriorityGrouping+0x44>)
 80010e2:	68db      	ldr	r3, [r3, #12]
 80010e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010e6:	68ba      	ldr	r2, [r7, #8]
 80010e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010ec:	4013      	ands	r3, r2
 80010ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010f4:	68bb      	ldr	r3, [r7, #8]
 80010f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001100:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001102:	4a04      	ldr	r2, [pc, #16]	; (8001114 <__NVIC_SetPriorityGrouping+0x44>)
 8001104:	68bb      	ldr	r3, [r7, #8]
 8001106:	60d3      	str	r3, [r2, #12]
}
 8001108:	bf00      	nop
 800110a:	3714      	adds	r7, #20
 800110c:	46bd      	mov	sp, r7
 800110e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001112:	4770      	bx	lr
 8001114:	e000ed00 	.word	0xe000ed00

08001118 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001118:	b480      	push	{r7}
 800111a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800111c:	4b04      	ldr	r3, [pc, #16]	; (8001130 <__NVIC_GetPriorityGrouping+0x18>)
 800111e:	68db      	ldr	r3, [r3, #12]
 8001120:	0a1b      	lsrs	r3, r3, #8
 8001122:	f003 0307 	and.w	r3, r3, #7
}
 8001126:	4618      	mov	r0, r3
 8001128:	46bd      	mov	sp, r7
 800112a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112e:	4770      	bx	lr
 8001130:	e000ed00 	.word	0xe000ed00

08001134 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001134:	b480      	push	{r7}
 8001136:	b083      	sub	sp, #12
 8001138:	af00      	add	r7, sp, #0
 800113a:	4603      	mov	r3, r0
 800113c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800113e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001142:	2b00      	cmp	r3, #0
 8001144:	db0b      	blt.n	800115e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001146:	79fb      	ldrb	r3, [r7, #7]
 8001148:	f003 021f 	and.w	r2, r3, #31
 800114c:	4907      	ldr	r1, [pc, #28]	; (800116c <__NVIC_EnableIRQ+0x38>)
 800114e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001152:	095b      	lsrs	r3, r3, #5
 8001154:	2001      	movs	r0, #1
 8001156:	fa00 f202 	lsl.w	r2, r0, r2
 800115a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800115e:	bf00      	nop
 8001160:	370c      	adds	r7, #12
 8001162:	46bd      	mov	sp, r7
 8001164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001168:	4770      	bx	lr
 800116a:	bf00      	nop
 800116c:	e000e100 	.word	0xe000e100

08001170 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001170:	b480      	push	{r7}
 8001172:	b083      	sub	sp, #12
 8001174:	af00      	add	r7, sp, #0
 8001176:	4603      	mov	r3, r0
 8001178:	6039      	str	r1, [r7, #0]
 800117a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800117c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001180:	2b00      	cmp	r3, #0
 8001182:	db0a      	blt.n	800119a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	b2da      	uxtb	r2, r3
 8001188:	490c      	ldr	r1, [pc, #48]	; (80011bc <__NVIC_SetPriority+0x4c>)
 800118a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800118e:	0112      	lsls	r2, r2, #4
 8001190:	b2d2      	uxtb	r2, r2
 8001192:	440b      	add	r3, r1
 8001194:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001198:	e00a      	b.n	80011b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	b2da      	uxtb	r2, r3
 800119e:	4908      	ldr	r1, [pc, #32]	; (80011c0 <__NVIC_SetPriority+0x50>)
 80011a0:	79fb      	ldrb	r3, [r7, #7]
 80011a2:	f003 030f 	and.w	r3, r3, #15
 80011a6:	3b04      	subs	r3, #4
 80011a8:	0112      	lsls	r2, r2, #4
 80011aa:	b2d2      	uxtb	r2, r2
 80011ac:	440b      	add	r3, r1
 80011ae:	761a      	strb	r2, [r3, #24]
}
 80011b0:	bf00      	nop
 80011b2:	370c      	adds	r7, #12
 80011b4:	46bd      	mov	sp, r7
 80011b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ba:	4770      	bx	lr
 80011bc:	e000e100 	.word	0xe000e100
 80011c0:	e000ed00 	.word	0xe000ed00

080011c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011c4:	b480      	push	{r7}
 80011c6:	b089      	sub	sp, #36	; 0x24
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	60f8      	str	r0, [r7, #12]
 80011cc:	60b9      	str	r1, [r7, #8]
 80011ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	f003 0307 	and.w	r3, r3, #7
 80011d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011d8:	69fb      	ldr	r3, [r7, #28]
 80011da:	f1c3 0307 	rsb	r3, r3, #7
 80011de:	2b04      	cmp	r3, #4
 80011e0:	bf28      	it	cs
 80011e2:	2304      	movcs	r3, #4
 80011e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011e6:	69fb      	ldr	r3, [r7, #28]
 80011e8:	3304      	adds	r3, #4
 80011ea:	2b06      	cmp	r3, #6
 80011ec:	d902      	bls.n	80011f4 <NVIC_EncodePriority+0x30>
 80011ee:	69fb      	ldr	r3, [r7, #28]
 80011f0:	3b03      	subs	r3, #3
 80011f2:	e000      	b.n	80011f6 <NVIC_EncodePriority+0x32>
 80011f4:	2300      	movs	r3, #0
 80011f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80011fc:	69bb      	ldr	r3, [r7, #24]
 80011fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001202:	43da      	mvns	r2, r3
 8001204:	68bb      	ldr	r3, [r7, #8]
 8001206:	401a      	ands	r2, r3
 8001208:	697b      	ldr	r3, [r7, #20]
 800120a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800120c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001210:	697b      	ldr	r3, [r7, #20]
 8001212:	fa01 f303 	lsl.w	r3, r1, r3
 8001216:	43d9      	mvns	r1, r3
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800121c:	4313      	orrs	r3, r2
         );
}
 800121e:	4618      	mov	r0, r3
 8001220:	3724      	adds	r7, #36	; 0x24
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr
	...

0800122c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b082      	sub	sp, #8
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	3b01      	subs	r3, #1
 8001238:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800123c:	d301      	bcc.n	8001242 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800123e:	2301      	movs	r3, #1
 8001240:	e00f      	b.n	8001262 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001242:	4a0a      	ldr	r2, [pc, #40]	; (800126c <SysTick_Config+0x40>)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	3b01      	subs	r3, #1
 8001248:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800124a:	210f      	movs	r1, #15
 800124c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001250:	f7ff ff8e 	bl	8001170 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001254:	4b05      	ldr	r3, [pc, #20]	; (800126c <SysTick_Config+0x40>)
 8001256:	2200      	movs	r2, #0
 8001258:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800125a:	4b04      	ldr	r3, [pc, #16]	; (800126c <SysTick_Config+0x40>)
 800125c:	2207      	movs	r2, #7
 800125e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001260:	2300      	movs	r3, #0
}
 8001262:	4618      	mov	r0, r3
 8001264:	3708      	adds	r7, #8
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	e000e010 	.word	0xe000e010

08001270 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001278:	6878      	ldr	r0, [r7, #4]
 800127a:	f7ff ff29 	bl	80010d0 <__NVIC_SetPriorityGrouping>
}
 800127e:	bf00      	nop
 8001280:	3708      	adds	r7, #8
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}

08001286 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001286:	b580      	push	{r7, lr}
 8001288:	b086      	sub	sp, #24
 800128a:	af00      	add	r7, sp, #0
 800128c:	4603      	mov	r3, r0
 800128e:	60b9      	str	r1, [r7, #8]
 8001290:	607a      	str	r2, [r7, #4]
 8001292:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001294:	2300      	movs	r3, #0
 8001296:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001298:	f7ff ff3e 	bl	8001118 <__NVIC_GetPriorityGrouping>
 800129c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800129e:	687a      	ldr	r2, [r7, #4]
 80012a0:	68b9      	ldr	r1, [r7, #8]
 80012a2:	6978      	ldr	r0, [r7, #20]
 80012a4:	f7ff ff8e 	bl	80011c4 <NVIC_EncodePriority>
 80012a8:	4602      	mov	r2, r0
 80012aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012ae:	4611      	mov	r1, r2
 80012b0:	4618      	mov	r0, r3
 80012b2:	f7ff ff5d 	bl	8001170 <__NVIC_SetPriority>
}
 80012b6:	bf00      	nop
 80012b8:	3718      	adds	r7, #24
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}

080012be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012be:	b580      	push	{r7, lr}
 80012c0:	b082      	sub	sp, #8
 80012c2:	af00      	add	r7, sp, #0
 80012c4:	4603      	mov	r3, r0
 80012c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012cc:	4618      	mov	r0, r3
 80012ce:	f7ff ff31 	bl	8001134 <__NVIC_EnableIRQ>
}
 80012d2:	bf00      	nop
 80012d4:	3708      	adds	r7, #8
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}

080012da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012da:	b580      	push	{r7, lr}
 80012dc:	b082      	sub	sp, #8
 80012de:	af00      	add	r7, sp, #0
 80012e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012e2:	6878      	ldr	r0, [r7, #4]
 80012e4:	f7ff ffa2 	bl	800122c <SysTick_Config>
 80012e8:	4603      	mov	r3, r0
}
 80012ea:	4618      	mov	r0, r3
 80012ec:	3708      	adds	r7, #8
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
	...

080012f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b089      	sub	sp, #36	; 0x24
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
 80012fc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80012fe:	2300      	movs	r3, #0
 8001300:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001302:	2300      	movs	r3, #0
 8001304:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001306:	2300      	movs	r3, #0
 8001308:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800130a:	2300      	movs	r3, #0
 800130c:	61fb      	str	r3, [r7, #28]
 800130e:	e16b      	b.n	80015e8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001310:	2201      	movs	r2, #1
 8001312:	69fb      	ldr	r3, [r7, #28]
 8001314:	fa02 f303 	lsl.w	r3, r2, r3
 8001318:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	697a      	ldr	r2, [r7, #20]
 8001320:	4013      	ands	r3, r2
 8001322:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001324:	693a      	ldr	r2, [r7, #16]
 8001326:	697b      	ldr	r3, [r7, #20]
 8001328:	429a      	cmp	r2, r3
 800132a:	f040 815a 	bne.w	80015e2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	f003 0303 	and.w	r3, r3, #3
 8001336:	2b01      	cmp	r3, #1
 8001338:	d005      	beq.n	8001346 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001342:	2b02      	cmp	r3, #2
 8001344:	d130      	bne.n	80013a8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	689b      	ldr	r3, [r3, #8]
 800134a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800134c:	69fb      	ldr	r3, [r7, #28]
 800134e:	005b      	lsls	r3, r3, #1
 8001350:	2203      	movs	r2, #3
 8001352:	fa02 f303 	lsl.w	r3, r2, r3
 8001356:	43db      	mvns	r3, r3
 8001358:	69ba      	ldr	r2, [r7, #24]
 800135a:	4013      	ands	r3, r2
 800135c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	68da      	ldr	r2, [r3, #12]
 8001362:	69fb      	ldr	r3, [r7, #28]
 8001364:	005b      	lsls	r3, r3, #1
 8001366:	fa02 f303 	lsl.w	r3, r2, r3
 800136a:	69ba      	ldr	r2, [r7, #24]
 800136c:	4313      	orrs	r3, r2
 800136e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	69ba      	ldr	r2, [r7, #24]
 8001374:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800137c:	2201      	movs	r2, #1
 800137e:	69fb      	ldr	r3, [r7, #28]
 8001380:	fa02 f303 	lsl.w	r3, r2, r3
 8001384:	43db      	mvns	r3, r3
 8001386:	69ba      	ldr	r2, [r7, #24]
 8001388:	4013      	ands	r3, r2
 800138a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	091b      	lsrs	r3, r3, #4
 8001392:	f003 0201 	and.w	r2, r3, #1
 8001396:	69fb      	ldr	r3, [r7, #28]
 8001398:	fa02 f303 	lsl.w	r3, r2, r3
 800139c:	69ba      	ldr	r2, [r7, #24]
 800139e:	4313      	orrs	r3, r2
 80013a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	69ba      	ldr	r2, [r7, #24]
 80013a6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	f003 0303 	and.w	r3, r3, #3
 80013b0:	2b03      	cmp	r3, #3
 80013b2:	d017      	beq.n	80013e4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	68db      	ldr	r3, [r3, #12]
 80013b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80013ba:	69fb      	ldr	r3, [r7, #28]
 80013bc:	005b      	lsls	r3, r3, #1
 80013be:	2203      	movs	r2, #3
 80013c0:	fa02 f303 	lsl.w	r3, r2, r3
 80013c4:	43db      	mvns	r3, r3
 80013c6:	69ba      	ldr	r2, [r7, #24]
 80013c8:	4013      	ands	r3, r2
 80013ca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	689a      	ldr	r2, [r3, #8]
 80013d0:	69fb      	ldr	r3, [r7, #28]
 80013d2:	005b      	lsls	r3, r3, #1
 80013d4:	fa02 f303 	lsl.w	r3, r2, r3
 80013d8:	69ba      	ldr	r2, [r7, #24]
 80013da:	4313      	orrs	r3, r2
 80013dc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	69ba      	ldr	r2, [r7, #24]
 80013e2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	f003 0303 	and.w	r3, r3, #3
 80013ec:	2b02      	cmp	r3, #2
 80013ee:	d123      	bne.n	8001438 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80013f0:	69fb      	ldr	r3, [r7, #28]
 80013f2:	08da      	lsrs	r2, r3, #3
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	3208      	adds	r2, #8
 80013f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80013fe:	69fb      	ldr	r3, [r7, #28]
 8001400:	f003 0307 	and.w	r3, r3, #7
 8001404:	009b      	lsls	r3, r3, #2
 8001406:	220f      	movs	r2, #15
 8001408:	fa02 f303 	lsl.w	r3, r2, r3
 800140c:	43db      	mvns	r3, r3
 800140e:	69ba      	ldr	r2, [r7, #24]
 8001410:	4013      	ands	r3, r2
 8001412:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	691a      	ldr	r2, [r3, #16]
 8001418:	69fb      	ldr	r3, [r7, #28]
 800141a:	f003 0307 	and.w	r3, r3, #7
 800141e:	009b      	lsls	r3, r3, #2
 8001420:	fa02 f303 	lsl.w	r3, r2, r3
 8001424:	69ba      	ldr	r2, [r7, #24]
 8001426:	4313      	orrs	r3, r2
 8001428:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800142a:	69fb      	ldr	r3, [r7, #28]
 800142c:	08da      	lsrs	r2, r3, #3
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	3208      	adds	r2, #8
 8001432:	69b9      	ldr	r1, [r7, #24]
 8001434:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800143e:	69fb      	ldr	r3, [r7, #28]
 8001440:	005b      	lsls	r3, r3, #1
 8001442:	2203      	movs	r2, #3
 8001444:	fa02 f303 	lsl.w	r3, r2, r3
 8001448:	43db      	mvns	r3, r3
 800144a:	69ba      	ldr	r2, [r7, #24]
 800144c:	4013      	ands	r3, r2
 800144e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	f003 0203 	and.w	r2, r3, #3
 8001458:	69fb      	ldr	r3, [r7, #28]
 800145a:	005b      	lsls	r3, r3, #1
 800145c:	fa02 f303 	lsl.w	r3, r2, r3
 8001460:	69ba      	ldr	r2, [r7, #24]
 8001462:	4313      	orrs	r3, r2
 8001464:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	69ba      	ldr	r2, [r7, #24]
 800146a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001474:	2b00      	cmp	r3, #0
 8001476:	f000 80b4 	beq.w	80015e2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800147a:	2300      	movs	r3, #0
 800147c:	60fb      	str	r3, [r7, #12]
 800147e:	4b60      	ldr	r3, [pc, #384]	; (8001600 <HAL_GPIO_Init+0x30c>)
 8001480:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001482:	4a5f      	ldr	r2, [pc, #380]	; (8001600 <HAL_GPIO_Init+0x30c>)
 8001484:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001488:	6453      	str	r3, [r2, #68]	; 0x44
 800148a:	4b5d      	ldr	r3, [pc, #372]	; (8001600 <HAL_GPIO_Init+0x30c>)
 800148c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800148e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001492:	60fb      	str	r3, [r7, #12]
 8001494:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001496:	4a5b      	ldr	r2, [pc, #364]	; (8001604 <HAL_GPIO_Init+0x310>)
 8001498:	69fb      	ldr	r3, [r7, #28]
 800149a:	089b      	lsrs	r3, r3, #2
 800149c:	3302      	adds	r3, #2
 800149e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80014a4:	69fb      	ldr	r3, [r7, #28]
 80014a6:	f003 0303 	and.w	r3, r3, #3
 80014aa:	009b      	lsls	r3, r3, #2
 80014ac:	220f      	movs	r2, #15
 80014ae:	fa02 f303 	lsl.w	r3, r2, r3
 80014b2:	43db      	mvns	r3, r3
 80014b4:	69ba      	ldr	r2, [r7, #24]
 80014b6:	4013      	ands	r3, r2
 80014b8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	4a52      	ldr	r2, [pc, #328]	; (8001608 <HAL_GPIO_Init+0x314>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d02b      	beq.n	800151a <HAL_GPIO_Init+0x226>
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	4a51      	ldr	r2, [pc, #324]	; (800160c <HAL_GPIO_Init+0x318>)
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d025      	beq.n	8001516 <HAL_GPIO_Init+0x222>
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	4a50      	ldr	r2, [pc, #320]	; (8001610 <HAL_GPIO_Init+0x31c>)
 80014ce:	4293      	cmp	r3, r2
 80014d0:	d01f      	beq.n	8001512 <HAL_GPIO_Init+0x21e>
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	4a4f      	ldr	r2, [pc, #316]	; (8001614 <HAL_GPIO_Init+0x320>)
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d019      	beq.n	800150e <HAL_GPIO_Init+0x21a>
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	4a4e      	ldr	r2, [pc, #312]	; (8001618 <HAL_GPIO_Init+0x324>)
 80014de:	4293      	cmp	r3, r2
 80014e0:	d013      	beq.n	800150a <HAL_GPIO_Init+0x216>
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	4a4d      	ldr	r2, [pc, #308]	; (800161c <HAL_GPIO_Init+0x328>)
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d00d      	beq.n	8001506 <HAL_GPIO_Init+0x212>
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	4a4c      	ldr	r2, [pc, #304]	; (8001620 <HAL_GPIO_Init+0x32c>)
 80014ee:	4293      	cmp	r3, r2
 80014f0:	d007      	beq.n	8001502 <HAL_GPIO_Init+0x20e>
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	4a4b      	ldr	r2, [pc, #300]	; (8001624 <HAL_GPIO_Init+0x330>)
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d101      	bne.n	80014fe <HAL_GPIO_Init+0x20a>
 80014fa:	2307      	movs	r3, #7
 80014fc:	e00e      	b.n	800151c <HAL_GPIO_Init+0x228>
 80014fe:	2308      	movs	r3, #8
 8001500:	e00c      	b.n	800151c <HAL_GPIO_Init+0x228>
 8001502:	2306      	movs	r3, #6
 8001504:	e00a      	b.n	800151c <HAL_GPIO_Init+0x228>
 8001506:	2305      	movs	r3, #5
 8001508:	e008      	b.n	800151c <HAL_GPIO_Init+0x228>
 800150a:	2304      	movs	r3, #4
 800150c:	e006      	b.n	800151c <HAL_GPIO_Init+0x228>
 800150e:	2303      	movs	r3, #3
 8001510:	e004      	b.n	800151c <HAL_GPIO_Init+0x228>
 8001512:	2302      	movs	r3, #2
 8001514:	e002      	b.n	800151c <HAL_GPIO_Init+0x228>
 8001516:	2301      	movs	r3, #1
 8001518:	e000      	b.n	800151c <HAL_GPIO_Init+0x228>
 800151a:	2300      	movs	r3, #0
 800151c:	69fa      	ldr	r2, [r7, #28]
 800151e:	f002 0203 	and.w	r2, r2, #3
 8001522:	0092      	lsls	r2, r2, #2
 8001524:	4093      	lsls	r3, r2
 8001526:	69ba      	ldr	r2, [r7, #24]
 8001528:	4313      	orrs	r3, r2
 800152a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800152c:	4935      	ldr	r1, [pc, #212]	; (8001604 <HAL_GPIO_Init+0x310>)
 800152e:	69fb      	ldr	r3, [r7, #28]
 8001530:	089b      	lsrs	r3, r3, #2
 8001532:	3302      	adds	r3, #2
 8001534:	69ba      	ldr	r2, [r7, #24]
 8001536:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800153a:	4b3b      	ldr	r3, [pc, #236]	; (8001628 <HAL_GPIO_Init+0x334>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001540:	693b      	ldr	r3, [r7, #16]
 8001542:	43db      	mvns	r3, r3
 8001544:	69ba      	ldr	r2, [r7, #24]
 8001546:	4013      	ands	r3, r2
 8001548:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001552:	2b00      	cmp	r3, #0
 8001554:	d003      	beq.n	800155e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001556:	69ba      	ldr	r2, [r7, #24]
 8001558:	693b      	ldr	r3, [r7, #16]
 800155a:	4313      	orrs	r3, r2
 800155c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800155e:	4a32      	ldr	r2, [pc, #200]	; (8001628 <HAL_GPIO_Init+0x334>)
 8001560:	69bb      	ldr	r3, [r7, #24]
 8001562:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001564:	4b30      	ldr	r3, [pc, #192]	; (8001628 <HAL_GPIO_Init+0x334>)
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800156a:	693b      	ldr	r3, [r7, #16]
 800156c:	43db      	mvns	r3, r3
 800156e:	69ba      	ldr	r2, [r7, #24]
 8001570:	4013      	ands	r3, r2
 8001572:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800157c:	2b00      	cmp	r3, #0
 800157e:	d003      	beq.n	8001588 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001580:	69ba      	ldr	r2, [r7, #24]
 8001582:	693b      	ldr	r3, [r7, #16]
 8001584:	4313      	orrs	r3, r2
 8001586:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001588:	4a27      	ldr	r2, [pc, #156]	; (8001628 <HAL_GPIO_Init+0x334>)
 800158a:	69bb      	ldr	r3, [r7, #24]
 800158c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800158e:	4b26      	ldr	r3, [pc, #152]	; (8001628 <HAL_GPIO_Init+0x334>)
 8001590:	689b      	ldr	r3, [r3, #8]
 8001592:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001594:	693b      	ldr	r3, [r7, #16]
 8001596:	43db      	mvns	r3, r3
 8001598:	69ba      	ldr	r2, [r7, #24]
 800159a:	4013      	ands	r3, r2
 800159c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d003      	beq.n	80015b2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80015aa:	69ba      	ldr	r2, [r7, #24]
 80015ac:	693b      	ldr	r3, [r7, #16]
 80015ae:	4313      	orrs	r3, r2
 80015b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80015b2:	4a1d      	ldr	r2, [pc, #116]	; (8001628 <HAL_GPIO_Init+0x334>)
 80015b4:	69bb      	ldr	r3, [r7, #24]
 80015b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80015b8:	4b1b      	ldr	r3, [pc, #108]	; (8001628 <HAL_GPIO_Init+0x334>)
 80015ba:	68db      	ldr	r3, [r3, #12]
 80015bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015be:	693b      	ldr	r3, [r7, #16]
 80015c0:	43db      	mvns	r3, r3
 80015c2:	69ba      	ldr	r2, [r7, #24]
 80015c4:	4013      	ands	r3, r2
 80015c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d003      	beq.n	80015dc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80015d4:	69ba      	ldr	r2, [r7, #24]
 80015d6:	693b      	ldr	r3, [r7, #16]
 80015d8:	4313      	orrs	r3, r2
 80015da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80015dc:	4a12      	ldr	r2, [pc, #72]	; (8001628 <HAL_GPIO_Init+0x334>)
 80015de:	69bb      	ldr	r3, [r7, #24]
 80015e0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015e2:	69fb      	ldr	r3, [r7, #28]
 80015e4:	3301      	adds	r3, #1
 80015e6:	61fb      	str	r3, [r7, #28]
 80015e8:	69fb      	ldr	r3, [r7, #28]
 80015ea:	2b0f      	cmp	r3, #15
 80015ec:	f67f ae90 	bls.w	8001310 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80015f0:	bf00      	nop
 80015f2:	bf00      	nop
 80015f4:	3724      	adds	r7, #36	; 0x24
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr
 80015fe:	bf00      	nop
 8001600:	40023800 	.word	0x40023800
 8001604:	40013800 	.word	0x40013800
 8001608:	40020000 	.word	0x40020000
 800160c:	40020400 	.word	0x40020400
 8001610:	40020800 	.word	0x40020800
 8001614:	40020c00 	.word	0x40020c00
 8001618:	40021000 	.word	0x40021000
 800161c:	40021400 	.word	0x40021400
 8001620:	40021800 	.word	0x40021800
 8001624:	40021c00 	.word	0x40021c00
 8001628:	40013c00 	.word	0x40013c00

0800162c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b082      	sub	sp, #8
 8001630:	af00      	add	r7, sp, #0
 8001632:	4603      	mov	r3, r0
 8001634:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001636:	4b08      	ldr	r3, [pc, #32]	; (8001658 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001638:	695a      	ldr	r2, [r3, #20]
 800163a:	88fb      	ldrh	r3, [r7, #6]
 800163c:	4013      	ands	r3, r2
 800163e:	2b00      	cmp	r3, #0
 8001640:	d006      	beq.n	8001650 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001642:	4a05      	ldr	r2, [pc, #20]	; (8001658 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001644:	88fb      	ldrh	r3, [r7, #6]
 8001646:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001648:	88fb      	ldrh	r3, [r7, #6]
 800164a:	4618      	mov	r0, r3
 800164c:	f7ff fae0 	bl	8000c10 <HAL_GPIO_EXTI_Callback>
  }
}
 8001650:	bf00      	nop
 8001652:	3708      	adds	r7, #8
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}
 8001658:	40013c00 	.word	0x40013c00

0800165c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b086      	sub	sp, #24
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	2b00      	cmp	r3, #0
 8001668:	d101      	bne.n	800166e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800166a:	2301      	movs	r3, #1
 800166c:	e264      	b.n	8001b38 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f003 0301 	and.w	r3, r3, #1
 8001676:	2b00      	cmp	r3, #0
 8001678:	d075      	beq.n	8001766 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800167a:	4ba3      	ldr	r3, [pc, #652]	; (8001908 <HAL_RCC_OscConfig+0x2ac>)
 800167c:	689b      	ldr	r3, [r3, #8]
 800167e:	f003 030c 	and.w	r3, r3, #12
 8001682:	2b04      	cmp	r3, #4
 8001684:	d00c      	beq.n	80016a0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001686:	4ba0      	ldr	r3, [pc, #640]	; (8001908 <HAL_RCC_OscConfig+0x2ac>)
 8001688:	689b      	ldr	r3, [r3, #8]
 800168a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800168e:	2b08      	cmp	r3, #8
 8001690:	d112      	bne.n	80016b8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001692:	4b9d      	ldr	r3, [pc, #628]	; (8001908 <HAL_RCC_OscConfig+0x2ac>)
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800169a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800169e:	d10b      	bne.n	80016b8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016a0:	4b99      	ldr	r3, [pc, #612]	; (8001908 <HAL_RCC_OscConfig+0x2ac>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d05b      	beq.n	8001764 <HAL_RCC_OscConfig+0x108>
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d157      	bne.n	8001764 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80016b4:	2301      	movs	r3, #1
 80016b6:	e23f      	b.n	8001b38 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016c0:	d106      	bne.n	80016d0 <HAL_RCC_OscConfig+0x74>
 80016c2:	4b91      	ldr	r3, [pc, #580]	; (8001908 <HAL_RCC_OscConfig+0x2ac>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4a90      	ldr	r2, [pc, #576]	; (8001908 <HAL_RCC_OscConfig+0x2ac>)
 80016c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016cc:	6013      	str	r3, [r2, #0]
 80016ce:	e01d      	b.n	800170c <HAL_RCC_OscConfig+0xb0>
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80016d8:	d10c      	bne.n	80016f4 <HAL_RCC_OscConfig+0x98>
 80016da:	4b8b      	ldr	r3, [pc, #556]	; (8001908 <HAL_RCC_OscConfig+0x2ac>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4a8a      	ldr	r2, [pc, #552]	; (8001908 <HAL_RCC_OscConfig+0x2ac>)
 80016e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016e4:	6013      	str	r3, [r2, #0]
 80016e6:	4b88      	ldr	r3, [pc, #544]	; (8001908 <HAL_RCC_OscConfig+0x2ac>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4a87      	ldr	r2, [pc, #540]	; (8001908 <HAL_RCC_OscConfig+0x2ac>)
 80016ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016f0:	6013      	str	r3, [r2, #0]
 80016f2:	e00b      	b.n	800170c <HAL_RCC_OscConfig+0xb0>
 80016f4:	4b84      	ldr	r3, [pc, #528]	; (8001908 <HAL_RCC_OscConfig+0x2ac>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a83      	ldr	r2, [pc, #524]	; (8001908 <HAL_RCC_OscConfig+0x2ac>)
 80016fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016fe:	6013      	str	r3, [r2, #0]
 8001700:	4b81      	ldr	r3, [pc, #516]	; (8001908 <HAL_RCC_OscConfig+0x2ac>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4a80      	ldr	r2, [pc, #512]	; (8001908 <HAL_RCC_OscConfig+0x2ac>)
 8001706:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800170a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	2b00      	cmp	r3, #0
 8001712:	d013      	beq.n	800173c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001714:	f7ff fcd0 	bl	80010b8 <HAL_GetTick>
 8001718:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800171a:	e008      	b.n	800172e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800171c:	f7ff fccc 	bl	80010b8 <HAL_GetTick>
 8001720:	4602      	mov	r2, r0
 8001722:	693b      	ldr	r3, [r7, #16]
 8001724:	1ad3      	subs	r3, r2, r3
 8001726:	2b64      	cmp	r3, #100	; 0x64
 8001728:	d901      	bls.n	800172e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800172a:	2303      	movs	r3, #3
 800172c:	e204      	b.n	8001b38 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800172e:	4b76      	ldr	r3, [pc, #472]	; (8001908 <HAL_RCC_OscConfig+0x2ac>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001736:	2b00      	cmp	r3, #0
 8001738:	d0f0      	beq.n	800171c <HAL_RCC_OscConfig+0xc0>
 800173a:	e014      	b.n	8001766 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800173c:	f7ff fcbc 	bl	80010b8 <HAL_GetTick>
 8001740:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001742:	e008      	b.n	8001756 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001744:	f7ff fcb8 	bl	80010b8 <HAL_GetTick>
 8001748:	4602      	mov	r2, r0
 800174a:	693b      	ldr	r3, [r7, #16]
 800174c:	1ad3      	subs	r3, r2, r3
 800174e:	2b64      	cmp	r3, #100	; 0x64
 8001750:	d901      	bls.n	8001756 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001752:	2303      	movs	r3, #3
 8001754:	e1f0      	b.n	8001b38 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001756:	4b6c      	ldr	r3, [pc, #432]	; (8001908 <HAL_RCC_OscConfig+0x2ac>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800175e:	2b00      	cmp	r3, #0
 8001760:	d1f0      	bne.n	8001744 <HAL_RCC_OscConfig+0xe8>
 8001762:	e000      	b.n	8001766 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001764:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f003 0302 	and.w	r3, r3, #2
 800176e:	2b00      	cmp	r3, #0
 8001770:	d063      	beq.n	800183a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001772:	4b65      	ldr	r3, [pc, #404]	; (8001908 <HAL_RCC_OscConfig+0x2ac>)
 8001774:	689b      	ldr	r3, [r3, #8]
 8001776:	f003 030c 	and.w	r3, r3, #12
 800177a:	2b00      	cmp	r3, #0
 800177c:	d00b      	beq.n	8001796 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800177e:	4b62      	ldr	r3, [pc, #392]	; (8001908 <HAL_RCC_OscConfig+0x2ac>)
 8001780:	689b      	ldr	r3, [r3, #8]
 8001782:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001786:	2b08      	cmp	r3, #8
 8001788:	d11c      	bne.n	80017c4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800178a:	4b5f      	ldr	r3, [pc, #380]	; (8001908 <HAL_RCC_OscConfig+0x2ac>)
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001792:	2b00      	cmp	r3, #0
 8001794:	d116      	bne.n	80017c4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001796:	4b5c      	ldr	r3, [pc, #368]	; (8001908 <HAL_RCC_OscConfig+0x2ac>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f003 0302 	and.w	r3, r3, #2
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d005      	beq.n	80017ae <HAL_RCC_OscConfig+0x152>
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	68db      	ldr	r3, [r3, #12]
 80017a6:	2b01      	cmp	r3, #1
 80017a8:	d001      	beq.n	80017ae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80017aa:	2301      	movs	r3, #1
 80017ac:	e1c4      	b.n	8001b38 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017ae:	4b56      	ldr	r3, [pc, #344]	; (8001908 <HAL_RCC_OscConfig+0x2ac>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	691b      	ldr	r3, [r3, #16]
 80017ba:	00db      	lsls	r3, r3, #3
 80017bc:	4952      	ldr	r1, [pc, #328]	; (8001908 <HAL_RCC_OscConfig+0x2ac>)
 80017be:	4313      	orrs	r3, r2
 80017c0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017c2:	e03a      	b.n	800183a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	68db      	ldr	r3, [r3, #12]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d020      	beq.n	800180e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80017cc:	4b4f      	ldr	r3, [pc, #316]	; (800190c <HAL_RCC_OscConfig+0x2b0>)
 80017ce:	2201      	movs	r2, #1
 80017d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017d2:	f7ff fc71 	bl	80010b8 <HAL_GetTick>
 80017d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017d8:	e008      	b.n	80017ec <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017da:	f7ff fc6d 	bl	80010b8 <HAL_GetTick>
 80017de:	4602      	mov	r2, r0
 80017e0:	693b      	ldr	r3, [r7, #16]
 80017e2:	1ad3      	subs	r3, r2, r3
 80017e4:	2b02      	cmp	r3, #2
 80017e6:	d901      	bls.n	80017ec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80017e8:	2303      	movs	r3, #3
 80017ea:	e1a5      	b.n	8001b38 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017ec:	4b46      	ldr	r3, [pc, #280]	; (8001908 <HAL_RCC_OscConfig+0x2ac>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f003 0302 	and.w	r3, r3, #2
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d0f0      	beq.n	80017da <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017f8:	4b43      	ldr	r3, [pc, #268]	; (8001908 <HAL_RCC_OscConfig+0x2ac>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	691b      	ldr	r3, [r3, #16]
 8001804:	00db      	lsls	r3, r3, #3
 8001806:	4940      	ldr	r1, [pc, #256]	; (8001908 <HAL_RCC_OscConfig+0x2ac>)
 8001808:	4313      	orrs	r3, r2
 800180a:	600b      	str	r3, [r1, #0]
 800180c:	e015      	b.n	800183a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800180e:	4b3f      	ldr	r3, [pc, #252]	; (800190c <HAL_RCC_OscConfig+0x2b0>)
 8001810:	2200      	movs	r2, #0
 8001812:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001814:	f7ff fc50 	bl	80010b8 <HAL_GetTick>
 8001818:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800181a:	e008      	b.n	800182e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800181c:	f7ff fc4c 	bl	80010b8 <HAL_GetTick>
 8001820:	4602      	mov	r2, r0
 8001822:	693b      	ldr	r3, [r7, #16]
 8001824:	1ad3      	subs	r3, r2, r3
 8001826:	2b02      	cmp	r3, #2
 8001828:	d901      	bls.n	800182e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800182a:	2303      	movs	r3, #3
 800182c:	e184      	b.n	8001b38 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800182e:	4b36      	ldr	r3, [pc, #216]	; (8001908 <HAL_RCC_OscConfig+0x2ac>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f003 0302 	and.w	r3, r3, #2
 8001836:	2b00      	cmp	r3, #0
 8001838:	d1f0      	bne.n	800181c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f003 0308 	and.w	r3, r3, #8
 8001842:	2b00      	cmp	r3, #0
 8001844:	d030      	beq.n	80018a8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	695b      	ldr	r3, [r3, #20]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d016      	beq.n	800187c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800184e:	4b30      	ldr	r3, [pc, #192]	; (8001910 <HAL_RCC_OscConfig+0x2b4>)
 8001850:	2201      	movs	r2, #1
 8001852:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001854:	f7ff fc30 	bl	80010b8 <HAL_GetTick>
 8001858:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800185a:	e008      	b.n	800186e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800185c:	f7ff fc2c 	bl	80010b8 <HAL_GetTick>
 8001860:	4602      	mov	r2, r0
 8001862:	693b      	ldr	r3, [r7, #16]
 8001864:	1ad3      	subs	r3, r2, r3
 8001866:	2b02      	cmp	r3, #2
 8001868:	d901      	bls.n	800186e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800186a:	2303      	movs	r3, #3
 800186c:	e164      	b.n	8001b38 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800186e:	4b26      	ldr	r3, [pc, #152]	; (8001908 <HAL_RCC_OscConfig+0x2ac>)
 8001870:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001872:	f003 0302 	and.w	r3, r3, #2
 8001876:	2b00      	cmp	r3, #0
 8001878:	d0f0      	beq.n	800185c <HAL_RCC_OscConfig+0x200>
 800187a:	e015      	b.n	80018a8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800187c:	4b24      	ldr	r3, [pc, #144]	; (8001910 <HAL_RCC_OscConfig+0x2b4>)
 800187e:	2200      	movs	r2, #0
 8001880:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001882:	f7ff fc19 	bl	80010b8 <HAL_GetTick>
 8001886:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001888:	e008      	b.n	800189c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800188a:	f7ff fc15 	bl	80010b8 <HAL_GetTick>
 800188e:	4602      	mov	r2, r0
 8001890:	693b      	ldr	r3, [r7, #16]
 8001892:	1ad3      	subs	r3, r2, r3
 8001894:	2b02      	cmp	r3, #2
 8001896:	d901      	bls.n	800189c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001898:	2303      	movs	r3, #3
 800189a:	e14d      	b.n	8001b38 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800189c:	4b1a      	ldr	r3, [pc, #104]	; (8001908 <HAL_RCC_OscConfig+0x2ac>)
 800189e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80018a0:	f003 0302 	and.w	r3, r3, #2
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d1f0      	bne.n	800188a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f003 0304 	and.w	r3, r3, #4
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	f000 80a0 	beq.w	80019f6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018b6:	2300      	movs	r3, #0
 80018b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80018ba:	4b13      	ldr	r3, [pc, #76]	; (8001908 <HAL_RCC_OscConfig+0x2ac>)
 80018bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d10f      	bne.n	80018e6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018c6:	2300      	movs	r3, #0
 80018c8:	60bb      	str	r3, [r7, #8]
 80018ca:	4b0f      	ldr	r3, [pc, #60]	; (8001908 <HAL_RCC_OscConfig+0x2ac>)
 80018cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ce:	4a0e      	ldr	r2, [pc, #56]	; (8001908 <HAL_RCC_OscConfig+0x2ac>)
 80018d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018d4:	6413      	str	r3, [r2, #64]	; 0x40
 80018d6:	4b0c      	ldr	r3, [pc, #48]	; (8001908 <HAL_RCC_OscConfig+0x2ac>)
 80018d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018de:	60bb      	str	r3, [r7, #8]
 80018e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80018e2:	2301      	movs	r3, #1
 80018e4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018e6:	4b0b      	ldr	r3, [pc, #44]	; (8001914 <HAL_RCC_OscConfig+0x2b8>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d121      	bne.n	8001936 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80018f2:	4b08      	ldr	r3, [pc, #32]	; (8001914 <HAL_RCC_OscConfig+0x2b8>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4a07      	ldr	r2, [pc, #28]	; (8001914 <HAL_RCC_OscConfig+0x2b8>)
 80018f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018fe:	f7ff fbdb 	bl	80010b8 <HAL_GetTick>
 8001902:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001904:	e011      	b.n	800192a <HAL_RCC_OscConfig+0x2ce>
 8001906:	bf00      	nop
 8001908:	40023800 	.word	0x40023800
 800190c:	42470000 	.word	0x42470000
 8001910:	42470e80 	.word	0x42470e80
 8001914:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001918:	f7ff fbce 	bl	80010b8 <HAL_GetTick>
 800191c:	4602      	mov	r2, r0
 800191e:	693b      	ldr	r3, [r7, #16]
 8001920:	1ad3      	subs	r3, r2, r3
 8001922:	2b02      	cmp	r3, #2
 8001924:	d901      	bls.n	800192a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001926:	2303      	movs	r3, #3
 8001928:	e106      	b.n	8001b38 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800192a:	4b85      	ldr	r3, [pc, #532]	; (8001b40 <HAL_RCC_OscConfig+0x4e4>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001932:	2b00      	cmp	r3, #0
 8001934:	d0f0      	beq.n	8001918 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	689b      	ldr	r3, [r3, #8]
 800193a:	2b01      	cmp	r3, #1
 800193c:	d106      	bne.n	800194c <HAL_RCC_OscConfig+0x2f0>
 800193e:	4b81      	ldr	r3, [pc, #516]	; (8001b44 <HAL_RCC_OscConfig+0x4e8>)
 8001940:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001942:	4a80      	ldr	r2, [pc, #512]	; (8001b44 <HAL_RCC_OscConfig+0x4e8>)
 8001944:	f043 0301 	orr.w	r3, r3, #1
 8001948:	6713      	str	r3, [r2, #112]	; 0x70
 800194a:	e01c      	b.n	8001986 <HAL_RCC_OscConfig+0x32a>
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	689b      	ldr	r3, [r3, #8]
 8001950:	2b05      	cmp	r3, #5
 8001952:	d10c      	bne.n	800196e <HAL_RCC_OscConfig+0x312>
 8001954:	4b7b      	ldr	r3, [pc, #492]	; (8001b44 <HAL_RCC_OscConfig+0x4e8>)
 8001956:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001958:	4a7a      	ldr	r2, [pc, #488]	; (8001b44 <HAL_RCC_OscConfig+0x4e8>)
 800195a:	f043 0304 	orr.w	r3, r3, #4
 800195e:	6713      	str	r3, [r2, #112]	; 0x70
 8001960:	4b78      	ldr	r3, [pc, #480]	; (8001b44 <HAL_RCC_OscConfig+0x4e8>)
 8001962:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001964:	4a77      	ldr	r2, [pc, #476]	; (8001b44 <HAL_RCC_OscConfig+0x4e8>)
 8001966:	f043 0301 	orr.w	r3, r3, #1
 800196a:	6713      	str	r3, [r2, #112]	; 0x70
 800196c:	e00b      	b.n	8001986 <HAL_RCC_OscConfig+0x32a>
 800196e:	4b75      	ldr	r3, [pc, #468]	; (8001b44 <HAL_RCC_OscConfig+0x4e8>)
 8001970:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001972:	4a74      	ldr	r2, [pc, #464]	; (8001b44 <HAL_RCC_OscConfig+0x4e8>)
 8001974:	f023 0301 	bic.w	r3, r3, #1
 8001978:	6713      	str	r3, [r2, #112]	; 0x70
 800197a:	4b72      	ldr	r3, [pc, #456]	; (8001b44 <HAL_RCC_OscConfig+0x4e8>)
 800197c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800197e:	4a71      	ldr	r2, [pc, #452]	; (8001b44 <HAL_RCC_OscConfig+0x4e8>)
 8001980:	f023 0304 	bic.w	r3, r3, #4
 8001984:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	689b      	ldr	r3, [r3, #8]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d015      	beq.n	80019ba <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800198e:	f7ff fb93 	bl	80010b8 <HAL_GetTick>
 8001992:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001994:	e00a      	b.n	80019ac <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001996:	f7ff fb8f 	bl	80010b8 <HAL_GetTick>
 800199a:	4602      	mov	r2, r0
 800199c:	693b      	ldr	r3, [r7, #16]
 800199e:	1ad3      	subs	r3, r2, r3
 80019a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80019a4:	4293      	cmp	r3, r2
 80019a6:	d901      	bls.n	80019ac <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80019a8:	2303      	movs	r3, #3
 80019aa:	e0c5      	b.n	8001b38 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019ac:	4b65      	ldr	r3, [pc, #404]	; (8001b44 <HAL_RCC_OscConfig+0x4e8>)
 80019ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019b0:	f003 0302 	and.w	r3, r3, #2
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d0ee      	beq.n	8001996 <HAL_RCC_OscConfig+0x33a>
 80019b8:	e014      	b.n	80019e4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019ba:	f7ff fb7d 	bl	80010b8 <HAL_GetTick>
 80019be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019c0:	e00a      	b.n	80019d8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019c2:	f7ff fb79 	bl	80010b8 <HAL_GetTick>
 80019c6:	4602      	mov	r2, r0
 80019c8:	693b      	ldr	r3, [r7, #16]
 80019ca:	1ad3      	subs	r3, r2, r3
 80019cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80019d0:	4293      	cmp	r3, r2
 80019d2:	d901      	bls.n	80019d8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80019d4:	2303      	movs	r3, #3
 80019d6:	e0af      	b.n	8001b38 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019d8:	4b5a      	ldr	r3, [pc, #360]	; (8001b44 <HAL_RCC_OscConfig+0x4e8>)
 80019da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019dc:	f003 0302 	and.w	r3, r3, #2
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d1ee      	bne.n	80019c2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80019e4:	7dfb      	ldrb	r3, [r7, #23]
 80019e6:	2b01      	cmp	r3, #1
 80019e8:	d105      	bne.n	80019f6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019ea:	4b56      	ldr	r3, [pc, #344]	; (8001b44 <HAL_RCC_OscConfig+0x4e8>)
 80019ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ee:	4a55      	ldr	r2, [pc, #340]	; (8001b44 <HAL_RCC_OscConfig+0x4e8>)
 80019f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80019f4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	699b      	ldr	r3, [r3, #24]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	f000 809b 	beq.w	8001b36 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001a00:	4b50      	ldr	r3, [pc, #320]	; (8001b44 <HAL_RCC_OscConfig+0x4e8>)
 8001a02:	689b      	ldr	r3, [r3, #8]
 8001a04:	f003 030c 	and.w	r3, r3, #12
 8001a08:	2b08      	cmp	r3, #8
 8001a0a:	d05c      	beq.n	8001ac6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	699b      	ldr	r3, [r3, #24]
 8001a10:	2b02      	cmp	r3, #2
 8001a12:	d141      	bne.n	8001a98 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a14:	4b4c      	ldr	r3, [pc, #304]	; (8001b48 <HAL_RCC_OscConfig+0x4ec>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a1a:	f7ff fb4d 	bl	80010b8 <HAL_GetTick>
 8001a1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a20:	e008      	b.n	8001a34 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a22:	f7ff fb49 	bl	80010b8 <HAL_GetTick>
 8001a26:	4602      	mov	r2, r0
 8001a28:	693b      	ldr	r3, [r7, #16]
 8001a2a:	1ad3      	subs	r3, r2, r3
 8001a2c:	2b02      	cmp	r3, #2
 8001a2e:	d901      	bls.n	8001a34 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001a30:	2303      	movs	r3, #3
 8001a32:	e081      	b.n	8001b38 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a34:	4b43      	ldr	r3, [pc, #268]	; (8001b44 <HAL_RCC_OscConfig+0x4e8>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d1f0      	bne.n	8001a22 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	69da      	ldr	r2, [r3, #28]
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6a1b      	ldr	r3, [r3, #32]
 8001a48:	431a      	orrs	r2, r3
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a4e:	019b      	lsls	r3, r3, #6
 8001a50:	431a      	orrs	r2, r3
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a56:	085b      	lsrs	r3, r3, #1
 8001a58:	3b01      	subs	r3, #1
 8001a5a:	041b      	lsls	r3, r3, #16
 8001a5c:	431a      	orrs	r2, r3
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a62:	061b      	lsls	r3, r3, #24
 8001a64:	4937      	ldr	r1, [pc, #220]	; (8001b44 <HAL_RCC_OscConfig+0x4e8>)
 8001a66:	4313      	orrs	r3, r2
 8001a68:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a6a:	4b37      	ldr	r3, [pc, #220]	; (8001b48 <HAL_RCC_OscConfig+0x4ec>)
 8001a6c:	2201      	movs	r2, #1
 8001a6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a70:	f7ff fb22 	bl	80010b8 <HAL_GetTick>
 8001a74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a76:	e008      	b.n	8001a8a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a78:	f7ff fb1e 	bl	80010b8 <HAL_GetTick>
 8001a7c:	4602      	mov	r2, r0
 8001a7e:	693b      	ldr	r3, [r7, #16]
 8001a80:	1ad3      	subs	r3, r2, r3
 8001a82:	2b02      	cmp	r3, #2
 8001a84:	d901      	bls.n	8001a8a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001a86:	2303      	movs	r3, #3
 8001a88:	e056      	b.n	8001b38 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a8a:	4b2e      	ldr	r3, [pc, #184]	; (8001b44 <HAL_RCC_OscConfig+0x4e8>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d0f0      	beq.n	8001a78 <HAL_RCC_OscConfig+0x41c>
 8001a96:	e04e      	b.n	8001b36 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a98:	4b2b      	ldr	r3, [pc, #172]	; (8001b48 <HAL_RCC_OscConfig+0x4ec>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a9e:	f7ff fb0b 	bl	80010b8 <HAL_GetTick>
 8001aa2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001aa4:	e008      	b.n	8001ab8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001aa6:	f7ff fb07 	bl	80010b8 <HAL_GetTick>
 8001aaa:	4602      	mov	r2, r0
 8001aac:	693b      	ldr	r3, [r7, #16]
 8001aae:	1ad3      	subs	r3, r2, r3
 8001ab0:	2b02      	cmp	r3, #2
 8001ab2:	d901      	bls.n	8001ab8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001ab4:	2303      	movs	r3, #3
 8001ab6:	e03f      	b.n	8001b38 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ab8:	4b22      	ldr	r3, [pc, #136]	; (8001b44 <HAL_RCC_OscConfig+0x4e8>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d1f0      	bne.n	8001aa6 <HAL_RCC_OscConfig+0x44a>
 8001ac4:	e037      	b.n	8001b36 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	699b      	ldr	r3, [r3, #24]
 8001aca:	2b01      	cmp	r3, #1
 8001acc:	d101      	bne.n	8001ad2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	e032      	b.n	8001b38 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001ad2:	4b1c      	ldr	r3, [pc, #112]	; (8001b44 <HAL_RCC_OscConfig+0x4e8>)
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	699b      	ldr	r3, [r3, #24]
 8001adc:	2b01      	cmp	r3, #1
 8001ade:	d028      	beq.n	8001b32 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001aea:	429a      	cmp	r2, r3
 8001aec:	d121      	bne.n	8001b32 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001af8:	429a      	cmp	r2, r3
 8001afa:	d11a      	bne.n	8001b32 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001afc:	68fa      	ldr	r2, [r7, #12]
 8001afe:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001b02:	4013      	ands	r3, r2
 8001b04:	687a      	ldr	r2, [r7, #4]
 8001b06:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001b08:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d111      	bne.n	8001b32 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b18:	085b      	lsrs	r3, r3, #1
 8001b1a:	3b01      	subs	r3, #1
 8001b1c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001b1e:	429a      	cmp	r2, r3
 8001b20:	d107      	bne.n	8001b32 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b2c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001b2e:	429a      	cmp	r2, r3
 8001b30:	d001      	beq.n	8001b36 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8001b32:	2301      	movs	r3, #1
 8001b34:	e000      	b.n	8001b38 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8001b36:	2300      	movs	r3, #0
}
 8001b38:	4618      	mov	r0, r3
 8001b3a:	3718      	adds	r7, #24
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd80      	pop	{r7, pc}
 8001b40:	40007000 	.word	0x40007000
 8001b44:	40023800 	.word	0x40023800
 8001b48:	42470060 	.word	0x42470060

08001b4c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b084      	sub	sp, #16
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
 8001b54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d101      	bne.n	8001b60 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	e0cc      	b.n	8001cfa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b60:	4b68      	ldr	r3, [pc, #416]	; (8001d04 <HAL_RCC_ClockConfig+0x1b8>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f003 0307 	and.w	r3, r3, #7
 8001b68:	683a      	ldr	r2, [r7, #0]
 8001b6a:	429a      	cmp	r2, r3
 8001b6c:	d90c      	bls.n	8001b88 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b6e:	4b65      	ldr	r3, [pc, #404]	; (8001d04 <HAL_RCC_ClockConfig+0x1b8>)
 8001b70:	683a      	ldr	r2, [r7, #0]
 8001b72:	b2d2      	uxtb	r2, r2
 8001b74:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b76:	4b63      	ldr	r3, [pc, #396]	; (8001d04 <HAL_RCC_ClockConfig+0x1b8>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f003 0307 	and.w	r3, r3, #7
 8001b7e:	683a      	ldr	r2, [r7, #0]
 8001b80:	429a      	cmp	r2, r3
 8001b82:	d001      	beq.n	8001b88 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001b84:	2301      	movs	r3, #1
 8001b86:	e0b8      	b.n	8001cfa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f003 0302 	and.w	r3, r3, #2
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d020      	beq.n	8001bd6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f003 0304 	and.w	r3, r3, #4
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d005      	beq.n	8001bac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ba0:	4b59      	ldr	r3, [pc, #356]	; (8001d08 <HAL_RCC_ClockConfig+0x1bc>)
 8001ba2:	689b      	ldr	r3, [r3, #8]
 8001ba4:	4a58      	ldr	r2, [pc, #352]	; (8001d08 <HAL_RCC_ClockConfig+0x1bc>)
 8001ba6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001baa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f003 0308 	and.w	r3, r3, #8
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d005      	beq.n	8001bc4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001bb8:	4b53      	ldr	r3, [pc, #332]	; (8001d08 <HAL_RCC_ClockConfig+0x1bc>)
 8001bba:	689b      	ldr	r3, [r3, #8]
 8001bbc:	4a52      	ldr	r2, [pc, #328]	; (8001d08 <HAL_RCC_ClockConfig+0x1bc>)
 8001bbe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001bc2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bc4:	4b50      	ldr	r3, [pc, #320]	; (8001d08 <HAL_RCC_ClockConfig+0x1bc>)
 8001bc6:	689b      	ldr	r3, [r3, #8]
 8001bc8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	689b      	ldr	r3, [r3, #8]
 8001bd0:	494d      	ldr	r1, [pc, #308]	; (8001d08 <HAL_RCC_ClockConfig+0x1bc>)
 8001bd2:	4313      	orrs	r3, r2
 8001bd4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f003 0301 	and.w	r3, r3, #1
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d044      	beq.n	8001c6c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	2b01      	cmp	r3, #1
 8001be8:	d107      	bne.n	8001bfa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bea:	4b47      	ldr	r3, [pc, #284]	; (8001d08 <HAL_RCC_ClockConfig+0x1bc>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d119      	bne.n	8001c2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e07f      	b.n	8001cfa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	2b02      	cmp	r3, #2
 8001c00:	d003      	beq.n	8001c0a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c06:	2b03      	cmp	r3, #3
 8001c08:	d107      	bne.n	8001c1a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c0a:	4b3f      	ldr	r3, [pc, #252]	; (8001d08 <HAL_RCC_ClockConfig+0x1bc>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d109      	bne.n	8001c2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c16:	2301      	movs	r3, #1
 8001c18:	e06f      	b.n	8001cfa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c1a:	4b3b      	ldr	r3, [pc, #236]	; (8001d08 <HAL_RCC_ClockConfig+0x1bc>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f003 0302 	and.w	r3, r3, #2
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d101      	bne.n	8001c2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c26:	2301      	movs	r3, #1
 8001c28:	e067      	b.n	8001cfa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c2a:	4b37      	ldr	r3, [pc, #220]	; (8001d08 <HAL_RCC_ClockConfig+0x1bc>)
 8001c2c:	689b      	ldr	r3, [r3, #8]
 8001c2e:	f023 0203 	bic.w	r2, r3, #3
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	4934      	ldr	r1, [pc, #208]	; (8001d08 <HAL_RCC_ClockConfig+0x1bc>)
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c3c:	f7ff fa3c 	bl	80010b8 <HAL_GetTick>
 8001c40:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c42:	e00a      	b.n	8001c5a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c44:	f7ff fa38 	bl	80010b8 <HAL_GetTick>
 8001c48:	4602      	mov	r2, r0
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	1ad3      	subs	r3, r2, r3
 8001c4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d901      	bls.n	8001c5a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001c56:	2303      	movs	r3, #3
 8001c58:	e04f      	b.n	8001cfa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c5a:	4b2b      	ldr	r3, [pc, #172]	; (8001d08 <HAL_RCC_ClockConfig+0x1bc>)
 8001c5c:	689b      	ldr	r3, [r3, #8]
 8001c5e:	f003 020c 	and.w	r2, r3, #12
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	009b      	lsls	r3, r3, #2
 8001c68:	429a      	cmp	r2, r3
 8001c6a:	d1eb      	bne.n	8001c44 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c6c:	4b25      	ldr	r3, [pc, #148]	; (8001d04 <HAL_RCC_ClockConfig+0x1b8>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f003 0307 	and.w	r3, r3, #7
 8001c74:	683a      	ldr	r2, [r7, #0]
 8001c76:	429a      	cmp	r2, r3
 8001c78:	d20c      	bcs.n	8001c94 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c7a:	4b22      	ldr	r3, [pc, #136]	; (8001d04 <HAL_RCC_ClockConfig+0x1b8>)
 8001c7c:	683a      	ldr	r2, [r7, #0]
 8001c7e:	b2d2      	uxtb	r2, r2
 8001c80:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c82:	4b20      	ldr	r3, [pc, #128]	; (8001d04 <HAL_RCC_ClockConfig+0x1b8>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f003 0307 	and.w	r3, r3, #7
 8001c8a:	683a      	ldr	r2, [r7, #0]
 8001c8c:	429a      	cmp	r2, r3
 8001c8e:	d001      	beq.n	8001c94 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001c90:	2301      	movs	r3, #1
 8001c92:	e032      	b.n	8001cfa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f003 0304 	and.w	r3, r3, #4
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d008      	beq.n	8001cb2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ca0:	4b19      	ldr	r3, [pc, #100]	; (8001d08 <HAL_RCC_ClockConfig+0x1bc>)
 8001ca2:	689b      	ldr	r3, [r3, #8]
 8001ca4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	68db      	ldr	r3, [r3, #12]
 8001cac:	4916      	ldr	r1, [pc, #88]	; (8001d08 <HAL_RCC_ClockConfig+0x1bc>)
 8001cae:	4313      	orrs	r3, r2
 8001cb0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f003 0308 	and.w	r3, r3, #8
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d009      	beq.n	8001cd2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001cbe:	4b12      	ldr	r3, [pc, #72]	; (8001d08 <HAL_RCC_ClockConfig+0x1bc>)
 8001cc0:	689b      	ldr	r3, [r3, #8]
 8001cc2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	691b      	ldr	r3, [r3, #16]
 8001cca:	00db      	lsls	r3, r3, #3
 8001ccc:	490e      	ldr	r1, [pc, #56]	; (8001d08 <HAL_RCC_ClockConfig+0x1bc>)
 8001cce:	4313      	orrs	r3, r2
 8001cd0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001cd2:	f000 f821 	bl	8001d18 <HAL_RCC_GetSysClockFreq>
 8001cd6:	4602      	mov	r2, r0
 8001cd8:	4b0b      	ldr	r3, [pc, #44]	; (8001d08 <HAL_RCC_ClockConfig+0x1bc>)
 8001cda:	689b      	ldr	r3, [r3, #8]
 8001cdc:	091b      	lsrs	r3, r3, #4
 8001cde:	f003 030f 	and.w	r3, r3, #15
 8001ce2:	490a      	ldr	r1, [pc, #40]	; (8001d0c <HAL_RCC_ClockConfig+0x1c0>)
 8001ce4:	5ccb      	ldrb	r3, [r1, r3]
 8001ce6:	fa22 f303 	lsr.w	r3, r2, r3
 8001cea:	4a09      	ldr	r2, [pc, #36]	; (8001d10 <HAL_RCC_ClockConfig+0x1c4>)
 8001cec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001cee:	4b09      	ldr	r3, [pc, #36]	; (8001d14 <HAL_RCC_ClockConfig+0x1c8>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f7ff f99c 	bl	8001030 <HAL_InitTick>

  return HAL_OK;
 8001cf8:	2300      	movs	r3, #0
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	3710      	adds	r7, #16
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	bf00      	nop
 8001d04:	40023c00 	.word	0x40023c00
 8001d08:	40023800 	.word	0x40023800
 8001d0c:	08002924 	.word	0x08002924
 8001d10:	20000008 	.word	0x20000008
 8001d14:	2000000c 	.word	0x2000000c

08001d18 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d18:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001d1c:	b084      	sub	sp, #16
 8001d1e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001d20:	2300      	movs	r3, #0
 8001d22:	607b      	str	r3, [r7, #4]
 8001d24:	2300      	movs	r3, #0
 8001d26:	60fb      	str	r3, [r7, #12]
 8001d28:	2300      	movs	r3, #0
 8001d2a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001d30:	4b67      	ldr	r3, [pc, #412]	; (8001ed0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001d32:	689b      	ldr	r3, [r3, #8]
 8001d34:	f003 030c 	and.w	r3, r3, #12
 8001d38:	2b08      	cmp	r3, #8
 8001d3a:	d00d      	beq.n	8001d58 <HAL_RCC_GetSysClockFreq+0x40>
 8001d3c:	2b08      	cmp	r3, #8
 8001d3e:	f200 80bd 	bhi.w	8001ebc <HAL_RCC_GetSysClockFreq+0x1a4>
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d002      	beq.n	8001d4c <HAL_RCC_GetSysClockFreq+0x34>
 8001d46:	2b04      	cmp	r3, #4
 8001d48:	d003      	beq.n	8001d52 <HAL_RCC_GetSysClockFreq+0x3a>
 8001d4a:	e0b7      	b.n	8001ebc <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001d4c:	4b61      	ldr	r3, [pc, #388]	; (8001ed4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001d4e:	60bb      	str	r3, [r7, #8]
       break;
 8001d50:	e0b7      	b.n	8001ec2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001d52:	4b61      	ldr	r3, [pc, #388]	; (8001ed8 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8001d54:	60bb      	str	r3, [r7, #8]
      break;
 8001d56:	e0b4      	b.n	8001ec2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001d58:	4b5d      	ldr	r3, [pc, #372]	; (8001ed0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001d60:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001d62:	4b5b      	ldr	r3, [pc, #364]	; (8001ed0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d04d      	beq.n	8001e0a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d6e:	4b58      	ldr	r3, [pc, #352]	; (8001ed0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	099b      	lsrs	r3, r3, #6
 8001d74:	461a      	mov	r2, r3
 8001d76:	f04f 0300 	mov.w	r3, #0
 8001d7a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001d7e:	f04f 0100 	mov.w	r1, #0
 8001d82:	ea02 0800 	and.w	r8, r2, r0
 8001d86:	ea03 0901 	and.w	r9, r3, r1
 8001d8a:	4640      	mov	r0, r8
 8001d8c:	4649      	mov	r1, r9
 8001d8e:	f04f 0200 	mov.w	r2, #0
 8001d92:	f04f 0300 	mov.w	r3, #0
 8001d96:	014b      	lsls	r3, r1, #5
 8001d98:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001d9c:	0142      	lsls	r2, r0, #5
 8001d9e:	4610      	mov	r0, r2
 8001da0:	4619      	mov	r1, r3
 8001da2:	ebb0 0008 	subs.w	r0, r0, r8
 8001da6:	eb61 0109 	sbc.w	r1, r1, r9
 8001daa:	f04f 0200 	mov.w	r2, #0
 8001dae:	f04f 0300 	mov.w	r3, #0
 8001db2:	018b      	lsls	r3, r1, #6
 8001db4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001db8:	0182      	lsls	r2, r0, #6
 8001dba:	1a12      	subs	r2, r2, r0
 8001dbc:	eb63 0301 	sbc.w	r3, r3, r1
 8001dc0:	f04f 0000 	mov.w	r0, #0
 8001dc4:	f04f 0100 	mov.w	r1, #0
 8001dc8:	00d9      	lsls	r1, r3, #3
 8001dca:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001dce:	00d0      	lsls	r0, r2, #3
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	460b      	mov	r3, r1
 8001dd4:	eb12 0208 	adds.w	r2, r2, r8
 8001dd8:	eb43 0309 	adc.w	r3, r3, r9
 8001ddc:	f04f 0000 	mov.w	r0, #0
 8001de0:	f04f 0100 	mov.w	r1, #0
 8001de4:	0259      	lsls	r1, r3, #9
 8001de6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001dea:	0250      	lsls	r0, r2, #9
 8001dec:	4602      	mov	r2, r0
 8001dee:	460b      	mov	r3, r1
 8001df0:	4610      	mov	r0, r2
 8001df2:	4619      	mov	r1, r3
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	461a      	mov	r2, r3
 8001df8:	f04f 0300 	mov.w	r3, #0
 8001dfc:	f7fe fbc0 	bl	8000580 <__aeabi_uldivmod>
 8001e00:	4602      	mov	r2, r0
 8001e02:	460b      	mov	r3, r1
 8001e04:	4613      	mov	r3, r2
 8001e06:	60fb      	str	r3, [r7, #12]
 8001e08:	e04a      	b.n	8001ea0 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e0a:	4b31      	ldr	r3, [pc, #196]	; (8001ed0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	099b      	lsrs	r3, r3, #6
 8001e10:	461a      	mov	r2, r3
 8001e12:	f04f 0300 	mov.w	r3, #0
 8001e16:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001e1a:	f04f 0100 	mov.w	r1, #0
 8001e1e:	ea02 0400 	and.w	r4, r2, r0
 8001e22:	ea03 0501 	and.w	r5, r3, r1
 8001e26:	4620      	mov	r0, r4
 8001e28:	4629      	mov	r1, r5
 8001e2a:	f04f 0200 	mov.w	r2, #0
 8001e2e:	f04f 0300 	mov.w	r3, #0
 8001e32:	014b      	lsls	r3, r1, #5
 8001e34:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001e38:	0142      	lsls	r2, r0, #5
 8001e3a:	4610      	mov	r0, r2
 8001e3c:	4619      	mov	r1, r3
 8001e3e:	1b00      	subs	r0, r0, r4
 8001e40:	eb61 0105 	sbc.w	r1, r1, r5
 8001e44:	f04f 0200 	mov.w	r2, #0
 8001e48:	f04f 0300 	mov.w	r3, #0
 8001e4c:	018b      	lsls	r3, r1, #6
 8001e4e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001e52:	0182      	lsls	r2, r0, #6
 8001e54:	1a12      	subs	r2, r2, r0
 8001e56:	eb63 0301 	sbc.w	r3, r3, r1
 8001e5a:	f04f 0000 	mov.w	r0, #0
 8001e5e:	f04f 0100 	mov.w	r1, #0
 8001e62:	00d9      	lsls	r1, r3, #3
 8001e64:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001e68:	00d0      	lsls	r0, r2, #3
 8001e6a:	4602      	mov	r2, r0
 8001e6c:	460b      	mov	r3, r1
 8001e6e:	1912      	adds	r2, r2, r4
 8001e70:	eb45 0303 	adc.w	r3, r5, r3
 8001e74:	f04f 0000 	mov.w	r0, #0
 8001e78:	f04f 0100 	mov.w	r1, #0
 8001e7c:	0299      	lsls	r1, r3, #10
 8001e7e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001e82:	0290      	lsls	r0, r2, #10
 8001e84:	4602      	mov	r2, r0
 8001e86:	460b      	mov	r3, r1
 8001e88:	4610      	mov	r0, r2
 8001e8a:	4619      	mov	r1, r3
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	461a      	mov	r2, r3
 8001e90:	f04f 0300 	mov.w	r3, #0
 8001e94:	f7fe fb74 	bl	8000580 <__aeabi_uldivmod>
 8001e98:	4602      	mov	r2, r0
 8001e9a:	460b      	mov	r3, r1
 8001e9c:	4613      	mov	r3, r2
 8001e9e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001ea0:	4b0b      	ldr	r3, [pc, #44]	; (8001ed0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	0c1b      	lsrs	r3, r3, #16
 8001ea6:	f003 0303 	and.w	r3, r3, #3
 8001eaa:	3301      	adds	r3, #1
 8001eac:	005b      	lsls	r3, r3, #1
 8001eae:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001eb0:	68fa      	ldr	r2, [r7, #12]
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001eb8:	60bb      	str	r3, [r7, #8]
      break;
 8001eba:	e002      	b.n	8001ec2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001ebc:	4b05      	ldr	r3, [pc, #20]	; (8001ed4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001ebe:	60bb      	str	r3, [r7, #8]
      break;
 8001ec0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ec2:	68bb      	ldr	r3, [r7, #8]
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	3710      	adds	r7, #16
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001ece:	bf00      	nop
 8001ed0:	40023800 	.word	0x40023800
 8001ed4:	00f42400 	.word	0x00f42400
 8001ed8:	007a1200 	.word	0x007a1200

08001edc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001edc:	b480      	push	{r7}
 8001ede:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ee0:	4b03      	ldr	r3, [pc, #12]	; (8001ef0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
}
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eec:	4770      	bx	lr
 8001eee:	bf00      	nop
 8001ef0:	20000008 	.word	0x20000008

08001ef4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001ef8:	f7ff fff0 	bl	8001edc <HAL_RCC_GetHCLKFreq>
 8001efc:	4602      	mov	r2, r0
 8001efe:	4b05      	ldr	r3, [pc, #20]	; (8001f14 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001f00:	689b      	ldr	r3, [r3, #8]
 8001f02:	0a9b      	lsrs	r3, r3, #10
 8001f04:	f003 0307 	and.w	r3, r3, #7
 8001f08:	4903      	ldr	r1, [pc, #12]	; (8001f18 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f0a:	5ccb      	ldrb	r3, [r1, r3]
 8001f0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	bd80      	pop	{r7, pc}
 8001f14:	40023800 	.word	0x40023800
 8001f18:	08002934 	.word	0x08002934

08001f1c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b082      	sub	sp, #8
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d101      	bne.n	8001f2e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	e041      	b.n	8001fb2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f34:	b2db      	uxtb	r3, r3
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d106      	bne.n	8001f48 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001f42:	6878      	ldr	r0, [r7, #4]
 8001f44:	f7fe ff74 	bl	8000e30 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2202      	movs	r2, #2
 8001f4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681a      	ldr	r2, [r3, #0]
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	3304      	adds	r3, #4
 8001f58:	4619      	mov	r1, r3
 8001f5a:	4610      	mov	r0, r2
 8001f5c:	f000 f9b8 	bl	80022d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2201      	movs	r2, #1
 8001f64:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2201      	movs	r2, #1
 8001f6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2201      	movs	r2, #1
 8001f74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2201      	movs	r2, #1
 8001f7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2201      	movs	r2, #1
 8001f84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2201      	movs	r2, #1
 8001f94:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2201      	movs	r2, #1
 8001fac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001fb0:	2300      	movs	r3, #0
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	3708      	adds	r7, #8
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}
	...

08001fbc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b084      	sub	sp, #16
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
 8001fc4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d109      	bne.n	8001fe0 <HAL_TIM_PWM_Start+0x24>
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001fd2:	b2db      	uxtb	r3, r3
 8001fd4:	2b01      	cmp	r3, #1
 8001fd6:	bf14      	ite	ne
 8001fd8:	2301      	movne	r3, #1
 8001fda:	2300      	moveq	r3, #0
 8001fdc:	b2db      	uxtb	r3, r3
 8001fde:	e022      	b.n	8002026 <HAL_TIM_PWM_Start+0x6a>
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	2b04      	cmp	r3, #4
 8001fe4:	d109      	bne.n	8001ffa <HAL_TIM_PWM_Start+0x3e>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001fec:	b2db      	uxtb	r3, r3
 8001fee:	2b01      	cmp	r3, #1
 8001ff0:	bf14      	ite	ne
 8001ff2:	2301      	movne	r3, #1
 8001ff4:	2300      	moveq	r3, #0
 8001ff6:	b2db      	uxtb	r3, r3
 8001ff8:	e015      	b.n	8002026 <HAL_TIM_PWM_Start+0x6a>
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	2b08      	cmp	r3, #8
 8001ffe:	d109      	bne.n	8002014 <HAL_TIM_PWM_Start+0x58>
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002006:	b2db      	uxtb	r3, r3
 8002008:	2b01      	cmp	r3, #1
 800200a:	bf14      	ite	ne
 800200c:	2301      	movne	r3, #1
 800200e:	2300      	moveq	r3, #0
 8002010:	b2db      	uxtb	r3, r3
 8002012:	e008      	b.n	8002026 <HAL_TIM_PWM_Start+0x6a>
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800201a:	b2db      	uxtb	r3, r3
 800201c:	2b01      	cmp	r3, #1
 800201e:	bf14      	ite	ne
 8002020:	2301      	movne	r3, #1
 8002022:	2300      	moveq	r3, #0
 8002024:	b2db      	uxtb	r3, r3
 8002026:	2b00      	cmp	r3, #0
 8002028:	d001      	beq.n	800202e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800202a:	2301      	movs	r3, #1
 800202c:	e07c      	b.n	8002128 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d104      	bne.n	800203e <HAL_TIM_PWM_Start+0x82>
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2202      	movs	r2, #2
 8002038:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800203c:	e013      	b.n	8002066 <HAL_TIM_PWM_Start+0xaa>
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	2b04      	cmp	r3, #4
 8002042:	d104      	bne.n	800204e <HAL_TIM_PWM_Start+0x92>
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2202      	movs	r2, #2
 8002048:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800204c:	e00b      	b.n	8002066 <HAL_TIM_PWM_Start+0xaa>
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	2b08      	cmp	r3, #8
 8002052:	d104      	bne.n	800205e <HAL_TIM_PWM_Start+0xa2>
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2202      	movs	r2, #2
 8002058:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800205c:	e003      	b.n	8002066 <HAL_TIM_PWM_Start+0xaa>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2202      	movs	r2, #2
 8002062:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	2201      	movs	r2, #1
 800206c:	6839      	ldr	r1, [r7, #0]
 800206e:	4618      	mov	r0, r3
 8002070:	f000 fb7e 	bl	8002770 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a2d      	ldr	r2, [pc, #180]	; (8002130 <HAL_TIM_PWM_Start+0x174>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d004      	beq.n	8002088 <HAL_TIM_PWM_Start+0xcc>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4a2c      	ldr	r2, [pc, #176]	; (8002134 <HAL_TIM_PWM_Start+0x178>)
 8002084:	4293      	cmp	r3, r2
 8002086:	d101      	bne.n	800208c <HAL_TIM_PWM_Start+0xd0>
 8002088:	2301      	movs	r3, #1
 800208a:	e000      	b.n	800208e <HAL_TIM_PWM_Start+0xd2>
 800208c:	2300      	movs	r3, #0
 800208e:	2b00      	cmp	r3, #0
 8002090:	d007      	beq.n	80020a2 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80020a0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4a22      	ldr	r2, [pc, #136]	; (8002130 <HAL_TIM_PWM_Start+0x174>)
 80020a8:	4293      	cmp	r3, r2
 80020aa:	d022      	beq.n	80020f2 <HAL_TIM_PWM_Start+0x136>
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020b4:	d01d      	beq.n	80020f2 <HAL_TIM_PWM_Start+0x136>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4a1f      	ldr	r2, [pc, #124]	; (8002138 <HAL_TIM_PWM_Start+0x17c>)
 80020bc:	4293      	cmp	r3, r2
 80020be:	d018      	beq.n	80020f2 <HAL_TIM_PWM_Start+0x136>
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a1d      	ldr	r2, [pc, #116]	; (800213c <HAL_TIM_PWM_Start+0x180>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d013      	beq.n	80020f2 <HAL_TIM_PWM_Start+0x136>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4a1c      	ldr	r2, [pc, #112]	; (8002140 <HAL_TIM_PWM_Start+0x184>)
 80020d0:	4293      	cmp	r3, r2
 80020d2:	d00e      	beq.n	80020f2 <HAL_TIM_PWM_Start+0x136>
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a16      	ldr	r2, [pc, #88]	; (8002134 <HAL_TIM_PWM_Start+0x178>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d009      	beq.n	80020f2 <HAL_TIM_PWM_Start+0x136>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4a18      	ldr	r2, [pc, #96]	; (8002144 <HAL_TIM_PWM_Start+0x188>)
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d004      	beq.n	80020f2 <HAL_TIM_PWM_Start+0x136>
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a16      	ldr	r2, [pc, #88]	; (8002148 <HAL_TIM_PWM_Start+0x18c>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d111      	bne.n	8002116 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	689b      	ldr	r3, [r3, #8]
 80020f8:	f003 0307 	and.w	r3, r3, #7
 80020fc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	2b06      	cmp	r3, #6
 8002102:	d010      	beq.n	8002126 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	681a      	ldr	r2, [r3, #0]
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f042 0201 	orr.w	r2, r2, #1
 8002112:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002114:	e007      	b.n	8002126 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	681a      	ldr	r2, [r3, #0]
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f042 0201 	orr.w	r2, r2, #1
 8002124:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002126:	2300      	movs	r3, #0
}
 8002128:	4618      	mov	r0, r3
 800212a:	3710      	adds	r7, #16
 800212c:	46bd      	mov	sp, r7
 800212e:	bd80      	pop	{r7, pc}
 8002130:	40010000 	.word	0x40010000
 8002134:	40010400 	.word	0x40010400
 8002138:	40000400 	.word	0x40000400
 800213c:	40000800 	.word	0x40000800
 8002140:	40000c00 	.word	0x40000c00
 8002144:	40014000 	.word	0x40014000
 8002148:	40001800 	.word	0x40001800

0800214c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b086      	sub	sp, #24
 8002150:	af00      	add	r7, sp, #0
 8002152:	60f8      	str	r0, [r7, #12]
 8002154:	60b9      	str	r1, [r7, #8]
 8002156:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002158:	2300      	movs	r3, #0
 800215a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002162:	2b01      	cmp	r3, #1
 8002164:	d101      	bne.n	800216a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002166:	2302      	movs	r3, #2
 8002168:	e0ae      	b.n	80022c8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	2201      	movs	r2, #1
 800216e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2b0c      	cmp	r3, #12
 8002176:	f200 809f 	bhi.w	80022b8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800217a:	a201      	add	r2, pc, #4	; (adr r2, 8002180 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800217c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002180:	080021b5 	.word	0x080021b5
 8002184:	080022b9 	.word	0x080022b9
 8002188:	080022b9 	.word	0x080022b9
 800218c:	080022b9 	.word	0x080022b9
 8002190:	080021f5 	.word	0x080021f5
 8002194:	080022b9 	.word	0x080022b9
 8002198:	080022b9 	.word	0x080022b9
 800219c:	080022b9 	.word	0x080022b9
 80021a0:	08002237 	.word	0x08002237
 80021a4:	080022b9 	.word	0x080022b9
 80021a8:	080022b9 	.word	0x080022b9
 80021ac:	080022b9 	.word	0x080022b9
 80021b0:	08002277 	.word	0x08002277
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	68b9      	ldr	r1, [r7, #8]
 80021ba:	4618      	mov	r0, r3
 80021bc:	f000 f928 	bl	8002410 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	699a      	ldr	r2, [r3, #24]
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f042 0208 	orr.w	r2, r2, #8
 80021ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	699a      	ldr	r2, [r3, #24]
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f022 0204 	bic.w	r2, r2, #4
 80021de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	6999      	ldr	r1, [r3, #24]
 80021e6:	68bb      	ldr	r3, [r7, #8]
 80021e8:	691a      	ldr	r2, [r3, #16]
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	430a      	orrs	r2, r1
 80021f0:	619a      	str	r2, [r3, #24]
      break;
 80021f2:	e064      	b.n	80022be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	68b9      	ldr	r1, [r7, #8]
 80021fa:	4618      	mov	r0, r3
 80021fc:	f000 f978 	bl	80024f0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	699a      	ldr	r2, [r3, #24]
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800220e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	699a      	ldr	r2, [r3, #24]
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800221e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	6999      	ldr	r1, [r3, #24]
 8002226:	68bb      	ldr	r3, [r7, #8]
 8002228:	691b      	ldr	r3, [r3, #16]
 800222a:	021a      	lsls	r2, r3, #8
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	430a      	orrs	r2, r1
 8002232:	619a      	str	r2, [r3, #24]
      break;
 8002234:	e043      	b.n	80022be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	68b9      	ldr	r1, [r7, #8]
 800223c:	4618      	mov	r0, r3
 800223e:	f000 f9cd 	bl	80025dc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	69da      	ldr	r2, [r3, #28]
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f042 0208 	orr.w	r2, r2, #8
 8002250:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	69da      	ldr	r2, [r3, #28]
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f022 0204 	bic.w	r2, r2, #4
 8002260:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	69d9      	ldr	r1, [r3, #28]
 8002268:	68bb      	ldr	r3, [r7, #8]
 800226a:	691a      	ldr	r2, [r3, #16]
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	430a      	orrs	r2, r1
 8002272:	61da      	str	r2, [r3, #28]
      break;
 8002274:	e023      	b.n	80022be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	68b9      	ldr	r1, [r7, #8]
 800227c:	4618      	mov	r0, r3
 800227e:	f000 fa21 	bl	80026c4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	69da      	ldr	r2, [r3, #28]
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002290:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	69da      	ldr	r2, [r3, #28]
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80022a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	69d9      	ldr	r1, [r3, #28]
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	691b      	ldr	r3, [r3, #16]
 80022ac:	021a      	lsls	r2, r3, #8
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	430a      	orrs	r2, r1
 80022b4:	61da      	str	r2, [r3, #28]
      break;
 80022b6:	e002      	b.n	80022be <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80022b8:	2301      	movs	r3, #1
 80022ba:	75fb      	strb	r3, [r7, #23]
      break;
 80022bc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	2200      	movs	r2, #0
 80022c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80022c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80022c8:	4618      	mov	r0, r3
 80022ca:	3718      	adds	r7, #24
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bd80      	pop	{r7, pc}

080022d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80022d0:	b480      	push	{r7}
 80022d2:	b085      	sub	sp, #20
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
 80022d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	4a40      	ldr	r2, [pc, #256]	; (80023e4 <TIM_Base_SetConfig+0x114>)
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d013      	beq.n	8002310 <TIM_Base_SetConfig+0x40>
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022ee:	d00f      	beq.n	8002310 <TIM_Base_SetConfig+0x40>
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	4a3d      	ldr	r2, [pc, #244]	; (80023e8 <TIM_Base_SetConfig+0x118>)
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d00b      	beq.n	8002310 <TIM_Base_SetConfig+0x40>
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	4a3c      	ldr	r2, [pc, #240]	; (80023ec <TIM_Base_SetConfig+0x11c>)
 80022fc:	4293      	cmp	r3, r2
 80022fe:	d007      	beq.n	8002310 <TIM_Base_SetConfig+0x40>
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	4a3b      	ldr	r2, [pc, #236]	; (80023f0 <TIM_Base_SetConfig+0x120>)
 8002304:	4293      	cmp	r3, r2
 8002306:	d003      	beq.n	8002310 <TIM_Base_SetConfig+0x40>
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	4a3a      	ldr	r2, [pc, #232]	; (80023f4 <TIM_Base_SetConfig+0x124>)
 800230c:	4293      	cmp	r3, r2
 800230e:	d108      	bne.n	8002322 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002316:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	68fa      	ldr	r2, [r7, #12]
 800231e:	4313      	orrs	r3, r2
 8002320:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	4a2f      	ldr	r2, [pc, #188]	; (80023e4 <TIM_Base_SetConfig+0x114>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d02b      	beq.n	8002382 <TIM_Base_SetConfig+0xb2>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002330:	d027      	beq.n	8002382 <TIM_Base_SetConfig+0xb2>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	4a2c      	ldr	r2, [pc, #176]	; (80023e8 <TIM_Base_SetConfig+0x118>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d023      	beq.n	8002382 <TIM_Base_SetConfig+0xb2>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	4a2b      	ldr	r2, [pc, #172]	; (80023ec <TIM_Base_SetConfig+0x11c>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d01f      	beq.n	8002382 <TIM_Base_SetConfig+0xb2>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	4a2a      	ldr	r2, [pc, #168]	; (80023f0 <TIM_Base_SetConfig+0x120>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d01b      	beq.n	8002382 <TIM_Base_SetConfig+0xb2>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	4a29      	ldr	r2, [pc, #164]	; (80023f4 <TIM_Base_SetConfig+0x124>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d017      	beq.n	8002382 <TIM_Base_SetConfig+0xb2>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	4a28      	ldr	r2, [pc, #160]	; (80023f8 <TIM_Base_SetConfig+0x128>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d013      	beq.n	8002382 <TIM_Base_SetConfig+0xb2>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	4a27      	ldr	r2, [pc, #156]	; (80023fc <TIM_Base_SetConfig+0x12c>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d00f      	beq.n	8002382 <TIM_Base_SetConfig+0xb2>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	4a26      	ldr	r2, [pc, #152]	; (8002400 <TIM_Base_SetConfig+0x130>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d00b      	beq.n	8002382 <TIM_Base_SetConfig+0xb2>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	4a25      	ldr	r2, [pc, #148]	; (8002404 <TIM_Base_SetConfig+0x134>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d007      	beq.n	8002382 <TIM_Base_SetConfig+0xb2>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	4a24      	ldr	r2, [pc, #144]	; (8002408 <TIM_Base_SetConfig+0x138>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d003      	beq.n	8002382 <TIM_Base_SetConfig+0xb2>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	4a23      	ldr	r2, [pc, #140]	; (800240c <TIM_Base_SetConfig+0x13c>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d108      	bne.n	8002394 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002388:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	68db      	ldr	r3, [r3, #12]
 800238e:	68fa      	ldr	r2, [r7, #12]
 8002390:	4313      	orrs	r3, r2
 8002392:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	695b      	ldr	r3, [r3, #20]
 800239e:	4313      	orrs	r3, r2
 80023a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	68fa      	ldr	r2, [r7, #12]
 80023a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	689a      	ldr	r2, [r3, #8]
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	681a      	ldr	r2, [r3, #0]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	4a0a      	ldr	r2, [pc, #40]	; (80023e4 <TIM_Base_SetConfig+0x114>)
 80023bc:	4293      	cmp	r3, r2
 80023be:	d003      	beq.n	80023c8 <TIM_Base_SetConfig+0xf8>
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	4a0c      	ldr	r2, [pc, #48]	; (80023f4 <TIM_Base_SetConfig+0x124>)
 80023c4:	4293      	cmp	r3, r2
 80023c6:	d103      	bne.n	80023d0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	691a      	ldr	r2, [r3, #16]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2201      	movs	r2, #1
 80023d4:	615a      	str	r2, [r3, #20]
}
 80023d6:	bf00      	nop
 80023d8:	3714      	adds	r7, #20
 80023da:	46bd      	mov	sp, r7
 80023dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e0:	4770      	bx	lr
 80023e2:	bf00      	nop
 80023e4:	40010000 	.word	0x40010000
 80023e8:	40000400 	.word	0x40000400
 80023ec:	40000800 	.word	0x40000800
 80023f0:	40000c00 	.word	0x40000c00
 80023f4:	40010400 	.word	0x40010400
 80023f8:	40014000 	.word	0x40014000
 80023fc:	40014400 	.word	0x40014400
 8002400:	40014800 	.word	0x40014800
 8002404:	40001800 	.word	0x40001800
 8002408:	40001c00 	.word	0x40001c00
 800240c:	40002000 	.word	0x40002000

08002410 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002410:	b480      	push	{r7}
 8002412:	b087      	sub	sp, #28
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
 8002418:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6a1b      	ldr	r3, [r3, #32]
 800241e:	f023 0201 	bic.w	r2, r3, #1
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6a1b      	ldr	r3, [r3, #32]
 800242a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	699b      	ldr	r3, [r3, #24]
 8002436:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800243e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	f023 0303 	bic.w	r3, r3, #3
 8002446:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	68fa      	ldr	r2, [r7, #12]
 800244e:	4313      	orrs	r3, r2
 8002450:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002452:	697b      	ldr	r3, [r7, #20]
 8002454:	f023 0302 	bic.w	r3, r3, #2
 8002458:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	689b      	ldr	r3, [r3, #8]
 800245e:	697a      	ldr	r2, [r7, #20]
 8002460:	4313      	orrs	r3, r2
 8002462:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	4a20      	ldr	r2, [pc, #128]	; (80024e8 <TIM_OC1_SetConfig+0xd8>)
 8002468:	4293      	cmp	r3, r2
 800246a:	d003      	beq.n	8002474 <TIM_OC1_SetConfig+0x64>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	4a1f      	ldr	r2, [pc, #124]	; (80024ec <TIM_OC1_SetConfig+0xdc>)
 8002470:	4293      	cmp	r3, r2
 8002472:	d10c      	bne.n	800248e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002474:	697b      	ldr	r3, [r7, #20]
 8002476:	f023 0308 	bic.w	r3, r3, #8
 800247a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	68db      	ldr	r3, [r3, #12]
 8002480:	697a      	ldr	r2, [r7, #20]
 8002482:	4313      	orrs	r3, r2
 8002484:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002486:	697b      	ldr	r3, [r7, #20]
 8002488:	f023 0304 	bic.w	r3, r3, #4
 800248c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	4a15      	ldr	r2, [pc, #84]	; (80024e8 <TIM_OC1_SetConfig+0xd8>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d003      	beq.n	800249e <TIM_OC1_SetConfig+0x8e>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	4a14      	ldr	r2, [pc, #80]	; (80024ec <TIM_OC1_SetConfig+0xdc>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d111      	bne.n	80024c2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800249e:	693b      	ldr	r3, [r7, #16]
 80024a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80024a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80024a6:	693b      	ldr	r3, [r7, #16]
 80024a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80024ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	695b      	ldr	r3, [r3, #20]
 80024b2:	693a      	ldr	r2, [r7, #16]
 80024b4:	4313      	orrs	r3, r2
 80024b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	699b      	ldr	r3, [r3, #24]
 80024bc:	693a      	ldr	r2, [r7, #16]
 80024be:	4313      	orrs	r3, r2
 80024c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	693a      	ldr	r2, [r7, #16]
 80024c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	68fa      	ldr	r2, [r7, #12]
 80024cc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	685a      	ldr	r2, [r3, #4]
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	697a      	ldr	r2, [r7, #20]
 80024da:	621a      	str	r2, [r3, #32]
}
 80024dc:	bf00      	nop
 80024de:	371c      	adds	r7, #28
 80024e0:	46bd      	mov	sp, r7
 80024e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e6:	4770      	bx	lr
 80024e8:	40010000 	.word	0x40010000
 80024ec:	40010400 	.word	0x40010400

080024f0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80024f0:	b480      	push	{r7}
 80024f2:	b087      	sub	sp, #28
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
 80024f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6a1b      	ldr	r3, [r3, #32]
 80024fe:	f023 0210 	bic.w	r2, r3, #16
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6a1b      	ldr	r3, [r3, #32]
 800250a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	699b      	ldr	r3, [r3, #24]
 8002516:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800251e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002526:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	021b      	lsls	r3, r3, #8
 800252e:	68fa      	ldr	r2, [r7, #12]
 8002530:	4313      	orrs	r3, r2
 8002532:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002534:	697b      	ldr	r3, [r7, #20]
 8002536:	f023 0320 	bic.w	r3, r3, #32
 800253a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	689b      	ldr	r3, [r3, #8]
 8002540:	011b      	lsls	r3, r3, #4
 8002542:	697a      	ldr	r2, [r7, #20]
 8002544:	4313      	orrs	r3, r2
 8002546:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	4a22      	ldr	r2, [pc, #136]	; (80025d4 <TIM_OC2_SetConfig+0xe4>)
 800254c:	4293      	cmp	r3, r2
 800254e:	d003      	beq.n	8002558 <TIM_OC2_SetConfig+0x68>
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	4a21      	ldr	r2, [pc, #132]	; (80025d8 <TIM_OC2_SetConfig+0xe8>)
 8002554:	4293      	cmp	r3, r2
 8002556:	d10d      	bne.n	8002574 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002558:	697b      	ldr	r3, [r7, #20]
 800255a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800255e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	68db      	ldr	r3, [r3, #12]
 8002564:	011b      	lsls	r3, r3, #4
 8002566:	697a      	ldr	r2, [r7, #20]
 8002568:	4313      	orrs	r3, r2
 800256a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002572:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	4a17      	ldr	r2, [pc, #92]	; (80025d4 <TIM_OC2_SetConfig+0xe4>)
 8002578:	4293      	cmp	r3, r2
 800257a:	d003      	beq.n	8002584 <TIM_OC2_SetConfig+0x94>
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	4a16      	ldr	r2, [pc, #88]	; (80025d8 <TIM_OC2_SetConfig+0xe8>)
 8002580:	4293      	cmp	r3, r2
 8002582:	d113      	bne.n	80025ac <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002584:	693b      	ldr	r3, [r7, #16]
 8002586:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800258a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800258c:	693b      	ldr	r3, [r7, #16]
 800258e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002592:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	695b      	ldr	r3, [r3, #20]
 8002598:	009b      	lsls	r3, r3, #2
 800259a:	693a      	ldr	r2, [r7, #16]
 800259c:	4313      	orrs	r3, r2
 800259e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	699b      	ldr	r3, [r3, #24]
 80025a4:	009b      	lsls	r3, r3, #2
 80025a6:	693a      	ldr	r2, [r7, #16]
 80025a8:	4313      	orrs	r3, r2
 80025aa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	693a      	ldr	r2, [r7, #16]
 80025b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	68fa      	ldr	r2, [r7, #12]
 80025b6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	685a      	ldr	r2, [r3, #4]
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	697a      	ldr	r2, [r7, #20]
 80025c4:	621a      	str	r2, [r3, #32]
}
 80025c6:	bf00      	nop
 80025c8:	371c      	adds	r7, #28
 80025ca:	46bd      	mov	sp, r7
 80025cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d0:	4770      	bx	lr
 80025d2:	bf00      	nop
 80025d4:	40010000 	.word	0x40010000
 80025d8:	40010400 	.word	0x40010400

080025dc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80025dc:	b480      	push	{r7}
 80025de:	b087      	sub	sp, #28
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
 80025e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6a1b      	ldr	r3, [r3, #32]
 80025ea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6a1b      	ldr	r3, [r3, #32]
 80025f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	69db      	ldr	r3, [r3, #28]
 8002602:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800260a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	f023 0303 	bic.w	r3, r3, #3
 8002612:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	68fa      	ldr	r2, [r7, #12]
 800261a:	4313      	orrs	r3, r2
 800261c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800261e:	697b      	ldr	r3, [r7, #20]
 8002620:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002624:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	689b      	ldr	r3, [r3, #8]
 800262a:	021b      	lsls	r3, r3, #8
 800262c:	697a      	ldr	r2, [r7, #20]
 800262e:	4313      	orrs	r3, r2
 8002630:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	4a21      	ldr	r2, [pc, #132]	; (80026bc <TIM_OC3_SetConfig+0xe0>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d003      	beq.n	8002642 <TIM_OC3_SetConfig+0x66>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	4a20      	ldr	r2, [pc, #128]	; (80026c0 <TIM_OC3_SetConfig+0xe4>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d10d      	bne.n	800265e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002648:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	68db      	ldr	r3, [r3, #12]
 800264e:	021b      	lsls	r3, r3, #8
 8002650:	697a      	ldr	r2, [r7, #20]
 8002652:	4313      	orrs	r3, r2
 8002654:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002656:	697b      	ldr	r3, [r7, #20]
 8002658:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800265c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	4a16      	ldr	r2, [pc, #88]	; (80026bc <TIM_OC3_SetConfig+0xe0>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d003      	beq.n	800266e <TIM_OC3_SetConfig+0x92>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	4a15      	ldr	r2, [pc, #84]	; (80026c0 <TIM_OC3_SetConfig+0xe4>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d113      	bne.n	8002696 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800266e:	693b      	ldr	r3, [r7, #16]
 8002670:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002674:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002676:	693b      	ldr	r3, [r7, #16]
 8002678:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800267c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	695b      	ldr	r3, [r3, #20]
 8002682:	011b      	lsls	r3, r3, #4
 8002684:	693a      	ldr	r2, [r7, #16]
 8002686:	4313      	orrs	r3, r2
 8002688:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	699b      	ldr	r3, [r3, #24]
 800268e:	011b      	lsls	r3, r3, #4
 8002690:	693a      	ldr	r2, [r7, #16]
 8002692:	4313      	orrs	r3, r2
 8002694:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	693a      	ldr	r2, [r7, #16]
 800269a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	68fa      	ldr	r2, [r7, #12]
 80026a0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	685a      	ldr	r2, [r3, #4]
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	697a      	ldr	r2, [r7, #20]
 80026ae:	621a      	str	r2, [r3, #32]
}
 80026b0:	bf00      	nop
 80026b2:	371c      	adds	r7, #28
 80026b4:	46bd      	mov	sp, r7
 80026b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ba:	4770      	bx	lr
 80026bc:	40010000 	.word	0x40010000
 80026c0:	40010400 	.word	0x40010400

080026c4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80026c4:	b480      	push	{r7}
 80026c6:	b087      	sub	sp, #28
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
 80026cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6a1b      	ldr	r3, [r3, #32]
 80026d2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6a1b      	ldr	r3, [r3, #32]
 80026de:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	69db      	ldr	r3, [r3, #28]
 80026ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80026f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	021b      	lsls	r3, r3, #8
 8002702:	68fa      	ldr	r2, [r7, #12]
 8002704:	4313      	orrs	r3, r2
 8002706:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002708:	693b      	ldr	r3, [r7, #16]
 800270a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800270e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	689b      	ldr	r3, [r3, #8]
 8002714:	031b      	lsls	r3, r3, #12
 8002716:	693a      	ldr	r2, [r7, #16]
 8002718:	4313      	orrs	r3, r2
 800271a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	4a12      	ldr	r2, [pc, #72]	; (8002768 <TIM_OC4_SetConfig+0xa4>)
 8002720:	4293      	cmp	r3, r2
 8002722:	d003      	beq.n	800272c <TIM_OC4_SetConfig+0x68>
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	4a11      	ldr	r2, [pc, #68]	; (800276c <TIM_OC4_SetConfig+0xa8>)
 8002728:	4293      	cmp	r3, r2
 800272a:	d109      	bne.n	8002740 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800272c:	697b      	ldr	r3, [r7, #20]
 800272e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002732:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	695b      	ldr	r3, [r3, #20]
 8002738:	019b      	lsls	r3, r3, #6
 800273a:	697a      	ldr	r2, [r7, #20]
 800273c:	4313      	orrs	r3, r2
 800273e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	697a      	ldr	r2, [r7, #20]
 8002744:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	68fa      	ldr	r2, [r7, #12]
 800274a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	685a      	ldr	r2, [r3, #4]
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	693a      	ldr	r2, [r7, #16]
 8002758:	621a      	str	r2, [r3, #32]
}
 800275a:	bf00      	nop
 800275c:	371c      	adds	r7, #28
 800275e:	46bd      	mov	sp, r7
 8002760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002764:	4770      	bx	lr
 8002766:	bf00      	nop
 8002768:	40010000 	.word	0x40010000
 800276c:	40010400 	.word	0x40010400

08002770 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002770:	b480      	push	{r7}
 8002772:	b087      	sub	sp, #28
 8002774:	af00      	add	r7, sp, #0
 8002776:	60f8      	str	r0, [r7, #12]
 8002778:	60b9      	str	r1, [r7, #8]
 800277a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800277c:	68bb      	ldr	r3, [r7, #8]
 800277e:	f003 031f 	and.w	r3, r3, #31
 8002782:	2201      	movs	r2, #1
 8002784:	fa02 f303 	lsl.w	r3, r2, r3
 8002788:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	6a1a      	ldr	r2, [r3, #32]
 800278e:	697b      	ldr	r3, [r7, #20]
 8002790:	43db      	mvns	r3, r3
 8002792:	401a      	ands	r2, r3
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	6a1a      	ldr	r2, [r3, #32]
 800279c:	68bb      	ldr	r3, [r7, #8]
 800279e:	f003 031f 	and.w	r3, r3, #31
 80027a2:	6879      	ldr	r1, [r7, #4]
 80027a4:	fa01 f303 	lsl.w	r3, r1, r3
 80027a8:	431a      	orrs	r2, r3
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	621a      	str	r2, [r3, #32]
}
 80027ae:	bf00      	nop
 80027b0:	371c      	adds	r7, #28
 80027b2:	46bd      	mov	sp, r7
 80027b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b8:	4770      	bx	lr
	...

080027bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80027bc:	b480      	push	{r7}
 80027be:	b085      	sub	sp, #20
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
 80027c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027cc:	2b01      	cmp	r3, #1
 80027ce:	d101      	bne.n	80027d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80027d0:	2302      	movs	r3, #2
 80027d2:	e05a      	b.n	800288a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2201      	movs	r2, #1
 80027d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2202      	movs	r2, #2
 80027e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	689b      	ldr	r3, [r3, #8]
 80027f2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027fa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	68fa      	ldr	r2, [r7, #12]
 8002802:	4313      	orrs	r3, r2
 8002804:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	68fa      	ldr	r2, [r7, #12]
 800280c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4a21      	ldr	r2, [pc, #132]	; (8002898 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d022      	beq.n	800285e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002820:	d01d      	beq.n	800285e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4a1d      	ldr	r2, [pc, #116]	; (800289c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d018      	beq.n	800285e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a1b      	ldr	r2, [pc, #108]	; (80028a0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d013      	beq.n	800285e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4a1a      	ldr	r2, [pc, #104]	; (80028a4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d00e      	beq.n	800285e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a18      	ldr	r2, [pc, #96]	; (80028a8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d009      	beq.n	800285e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4a17      	ldr	r2, [pc, #92]	; (80028ac <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d004      	beq.n	800285e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a15      	ldr	r2, [pc, #84]	; (80028b0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d10c      	bne.n	8002878 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800285e:	68bb      	ldr	r3, [r7, #8]
 8002860:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002864:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	68ba      	ldr	r2, [r7, #8]
 800286c:	4313      	orrs	r3, r2
 800286e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	68ba      	ldr	r2, [r7, #8]
 8002876:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2201      	movs	r2, #1
 800287c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2200      	movs	r2, #0
 8002884:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002888:	2300      	movs	r3, #0
}
 800288a:	4618      	mov	r0, r3
 800288c:	3714      	adds	r7, #20
 800288e:	46bd      	mov	sp, r7
 8002890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002894:	4770      	bx	lr
 8002896:	bf00      	nop
 8002898:	40010000 	.word	0x40010000
 800289c:	40000400 	.word	0x40000400
 80028a0:	40000800 	.word	0x40000800
 80028a4:	40000c00 	.word	0x40000c00
 80028a8:	40010400 	.word	0x40010400
 80028ac:	40014000 	.word	0x40014000
 80028b0:	40001800 	.word	0x40001800

080028b4 <__libc_init_array>:
 80028b4:	b570      	push	{r4, r5, r6, lr}
 80028b6:	4d0d      	ldr	r5, [pc, #52]	; (80028ec <__libc_init_array+0x38>)
 80028b8:	4c0d      	ldr	r4, [pc, #52]	; (80028f0 <__libc_init_array+0x3c>)
 80028ba:	1b64      	subs	r4, r4, r5
 80028bc:	10a4      	asrs	r4, r4, #2
 80028be:	2600      	movs	r6, #0
 80028c0:	42a6      	cmp	r6, r4
 80028c2:	d109      	bne.n	80028d8 <__libc_init_array+0x24>
 80028c4:	4d0b      	ldr	r5, [pc, #44]	; (80028f4 <__libc_init_array+0x40>)
 80028c6:	4c0c      	ldr	r4, [pc, #48]	; (80028f8 <__libc_init_array+0x44>)
 80028c8:	f000 f820 	bl	800290c <_init>
 80028cc:	1b64      	subs	r4, r4, r5
 80028ce:	10a4      	asrs	r4, r4, #2
 80028d0:	2600      	movs	r6, #0
 80028d2:	42a6      	cmp	r6, r4
 80028d4:	d105      	bne.n	80028e2 <__libc_init_array+0x2e>
 80028d6:	bd70      	pop	{r4, r5, r6, pc}
 80028d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80028dc:	4798      	blx	r3
 80028de:	3601      	adds	r6, #1
 80028e0:	e7ee      	b.n	80028c0 <__libc_init_array+0xc>
 80028e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80028e6:	4798      	blx	r3
 80028e8:	3601      	adds	r6, #1
 80028ea:	e7f2      	b.n	80028d2 <__libc_init_array+0x1e>
 80028ec:	08002944 	.word	0x08002944
 80028f0:	08002944 	.word	0x08002944
 80028f4:	08002944 	.word	0x08002944
 80028f8:	08002948 	.word	0x08002948

080028fc <memset>:
 80028fc:	4402      	add	r2, r0
 80028fe:	4603      	mov	r3, r0
 8002900:	4293      	cmp	r3, r2
 8002902:	d100      	bne.n	8002906 <memset+0xa>
 8002904:	4770      	bx	lr
 8002906:	f803 1b01 	strb.w	r1, [r3], #1
 800290a:	e7f9      	b.n	8002900 <memset+0x4>

0800290c <_init>:
 800290c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800290e:	bf00      	nop
 8002910:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002912:	bc08      	pop	{r3}
 8002914:	469e      	mov	lr, r3
 8002916:	4770      	bx	lr

08002918 <_fini>:
 8002918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800291a:	bf00      	nop
 800291c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800291e:	bc08      	pop	{r3}
 8002920:	469e      	mov	lr, r3
 8002922:	4770      	bx	lr
